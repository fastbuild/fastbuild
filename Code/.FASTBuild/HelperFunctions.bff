// HelperFunctions
//------------------------------------------------------------------------------
#once

// CreateManifest
//  - Generate a .manifest file for embedding into a Windows executable
//------------------------------------------------------------------------------
#if __WINDOWS__
    function CreateManifest( .Alias
                             .ManifestFile )
    {
        TextFile( .Alias )
        {
            .TextFileOutput             = .ManifestFile
            .TextFileInputStrings       = {
                                            '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
                                            '<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">'
                                            '  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">'
                                            '    <security>'
                                            '      <requestedPrivileges>'
                                            '        <requestedExecutionLevel level="asInvoker" uiAccess="false"/>'
                                            '      </requestedPrivileges>'
                                            '    </security>'
                                            '  </trustInfo>'

                                            // Long Path support
                                            '  <application xmlns="urn:schemas-microsoft-com:asm.v3">'
                                            '    <windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">'
                                            '        <ws2:longPathAware>true</ws2:longPathAware>'
                                            '    </windowsSettings>'
                                            '  </application>'

                                            '</assembly>'
                                          }
        }
    }
#endif

// CreateCommonAliases
//  - Generate common aliases for projects
//------------------------------------------------------------------------------
function CreateCommonAliases( .ProjectName )
{
    // Per-Config
    #if __WINDOWS__
        Alias( '$ProjectName$-Debug' )           { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64Clang-Debug' } }
        Alias( '$ProjectName$-Analyze' )         { .Targets = { '$ProjectName$-X64-Analyze' } }
        Alias( '$ProjectName$-Profile' )         { .Targets = { '$ProjectName$-X64-Profile', '$ProjectName$-X64Clang-Profile' } }
        Alias( '$ProjectName$-Release' )         { .Targets = { '$ProjectName$-X64-Release', '$ProjectName$-X64Clang-Release' } }
    #endif
    #if __LINUX__
        Alias( '$ProjectName$-Debug' )           { .Targets = { '$ProjectName$-X64Linux-Debug',   '$ProjectName$-X64ClangLinux-Debug' } }
        Alias( '$ProjectName$-Profile' )         { .Targets = { '$ProjectName$-X64Linux-Profile', '$ProjectName$-X64ClangLinux-Profile' } }
        Alias( '$ProjectName$-Release' )         { .Targets = { '$ProjectName$-X64Linux-Release', '$ProjectName$-X64ClangLinux-Release' } }
        Alias( '$ProjectName$-ASan' )            { .Targets = { '$ProjectName$-X64Linux-ASan',    '$ProjectName$-X64ClangLinux-ASan' } }
        Alias( '$ProjectName$-MSan' )            { .Targets = { '$ProjectName$-X64ClangLinux-MSan' } }
        Alias( '$ProjectName$-TSan' )            { .Targets = { '$ProjectName$-X64Linux-TSan',    '$ProjectName$-X64ClangLinux-TSan' } }
    #endif
    #if __OSX__
        Alias( '$ProjectName$-Debug' )           { .Targets = { '$ProjectName$-X64OSX-Debug' } }
        Alias( '$ProjectName$-Profile' )         { .Targets = { '$ProjectName$-X64OSX-Profile' } }
        Alias( '$ProjectName$-Release' )         { .Targets = { '$ProjectName$-X64OSX-Release' } }
    #endif

    // Per-Platform
    Alias( '$ProjectName$-X64' )             { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Analyze', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }
    Alias( '$ProjectName$-X64Clang' )        { .Targets = { '$ProjectName$-X64Clang-Debug', '$ProjectName$-X64Clang-Release', '$ProjectName$-X64Clang-Profile' } }
    Alias( '$ProjectName$-X64Linux' )        { .Targets = { '$ProjectName$-X64Linux-Debug', '$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile', '$ProjectName$-X64Linux-ASan', '$ProjectName$-X64Linux-TSan' } }
    Alias( '$ProjectName$-X64ClangLinux' )   { .Targets = { '$ProjectName$-X64ClangLinux-Debug', '$ProjectName$-X64ClangLinux-Release', '$ProjectName$-X64ClangLinux-Profile', '$ProjectName$-X64ClangLinux-ASan', '$ProjectName$-X64ClangLinux-MSan', '$ProjectName$-X64ClangLinux-TSan' } }
    Alias( '$ProjectName$-X64OSX' )          { .Targets = { '$ProjectName$-X64OSX-Debug', '$ProjectName$-X64OSX-Release', '$ProjectName$-X64OSX-Profile' } }

    // All
    Alias( '$ProjectName$' )
    {
        .Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
        #if __LINUX__
            .Targets + { '$ProjectName$-ASan', '$ProjectName$-MSan' }
        #endif
    }
}

//------------------------------------------------------------------------------
