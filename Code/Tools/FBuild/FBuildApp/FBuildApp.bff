// FBuildApp
//------------------------------------------------------------------------------
{
	.ProjectName		= 'FBuildApp'
	.ProjectPath		= 'Tools\FBuild\FBuildApp'

	// Visual Studio Project Generation
	//--------------------------------------------------------------------------
	VCXProject( '$ProjectName$-proj' )
	{
		.ProjectOutput				= '$ProjectPath$\$ProjectName$.vcxproj'
		.ProjectInputPaths			= '$ProjectPath$\'
		.ProjectBasePath			= '$ProjectPath$\'

		.LocalDebuggerCommand		= '^$(SolutionDir)..\..\..\tmp\^$(Configuration)\Tools\FBuild\FBuildApp\FBuild.exe'
		.LocalDebuggerWorkingDirectory = '^$(SolutionDir)..\..\..\Code'
	}

    // Unity
    //--------------------------------------------------------------------------
    {
        // Common options
        .UnityInputPath             = '$ProjectPath$\'
        .UnityOutputPath            = '$OutputBase$\Unity\$ProjectPath$\'

        // Windows
        Unity( '$ProjectName$-Unity-Windows' )
        {
        }

        // Linux
        Unity( '$ProjectName$-Unity-Linux' )
        {
        }

        // OSX
        Unity( '$ProjectName$-Unity-OSX' )
        {
        }
    }       

	// Windows (MSVC)
	//--------------------------------------------------------------------------
	ForEach( .Config in .Configs_Windows_MSVC )
	{
		Using( .Config )
		.OutputBase + '\$Platform$-$Config$'

		// Objects
		ObjectList( '$ProjectName$-Lib-$Platform$-$Config$' )
		{
			// Input (Unity)
			.CompilerInputUnity			= '$ProjectName$-Unity-Windows'

			// Output
			.CompilerOutputPath			= '$OutputBase$\$ProjectName$\'
 			.LibrarianOutput 			= '$OutputBase$\$ProjectName$\$ProjectName$.lib'
		}

		// Executable
		Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
		{
			.Libraries					= { 'Core-Lib-$Platform$-$Config$',
											'FBuildCore-Lib-$Platform$-$Config$',
											'FBuildApp-Lib-$Platform$-$Config$',
											'LZ4-Lib-$Platform$-$Config$' }
			.LinkerOutput				= '$OutputBase$\Tools\FBuild\FBuildApp\FBuild.exe'
			.LinkerOptions				+ ' /SUBSYSTEM:CONSOLE'
										+ ' kernel32.lib'
										+ ' Ws2_32.lib'
										+ ' LIBCMT.LIB'
										+ ' User32.lib'
		}
		Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
	}

	// Windows (Clang)
	//--------------------------------------------------------------------------
	ForEach( .Config in .Configs_Windows_Clang )
	{
		Using( .Config )
		.OutputBase + '\$Platform$-$Config$'

		// Static Library
		Library( '$ProjectName$-Lib-$Platform$-$Config$' )
		{
			// Input (Unity)
			.CompilerInputUnity			= '$ProjectName$-Unity-Windows'

			// Output
			.CompilerOutputPath			= '$OutputBase$\$ProjectName$\'
 			.LibrarianOutput 			= '$OutputBase$\$ProjectName$\$ProjectName$.lib'
		}
		Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
	}
	
    // Linux (GCC)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_Linux_GCC )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-Linux'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.a'
        }

        // Executable
        Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
        {
            .Libraries                  = { 
                                            'FBuildApp-Lib-$Platform$-$Config$',
                                            'FBuildCore-Lib-$Platform$-$Config$',
                                            'Core-Lib-$Platform$-$Config$',
                                            'LZ4-Lib-$Platform$-$Config$' 
                                          }
            .LinkerOutput               = '$OutputBase$\Tools\FBuild\FBuildApp\fbuild'
            .LinkerOptions              + ' -pthread'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
    }	

    // OSX (Clang)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_OSX_Clang )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-OSX'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.a'
        }

        // Executable
        Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
        {
            .Libraries                  = { 
                                            'FBuildApp-Lib-$Platform$-$Config$',
                                            'FBuildCore-Lib-$Platform$-$Config$',
                                            'Core-Lib-$Platform$-$Config$',
                                            'LZ4-Lib-$Platform$-$Config$' 
                                          }
            .LinkerOutput               = '$OutputBase$\Tools\FBuild\FBuildApp\FBuild'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
    }	

	// Aliases
	//--------------------------------------------------------------------------
	// Per-Config
	Alias( '$ProjectName$-Debug' )		{ .Targets = { '$ProjectName$-X86-Debug',   '$ProjectName$-X64-Debug', '$ProjectName$-X86Clang-Debug' } }
	Alias( '$ProjectName$-Profile' )	{ .Targets = { '$ProjectName$-X86-Profile', '$ProjectName$-X64-Profile' } }
	Alias( '$ProjectName$-Release' )	{ .Targets = { '$ProjectName$-X86-Release', '$ProjectName$-X64-Release' } }

	// Per-Platform
	Alias( '$ProjectName$-X86' )		{ .Targets = { '$ProjectName$-X86-Debug', '$ProjectName$-X86-Release', '$ProjectName$-X86-Profile' } }
	Alias( '$ProjectName$-X64' )		{ .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }
	Alias( '$ProjectName$-X86Clang' )	{ .Targets = { '$ProjectName$-X86Clang-Debug' } }
    	Alias( '$ProjectName$-x64Linux' )   	{ .Targets = { '$ProjectName$-X64Linux-Debug', 	'$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile' } }
    	Alias( '$ProjectName$-x64OSX' )   	{ .Targets = { '$ProjectName$-X64OSX-Debug', 	'$ProjectName$-X64OSX-Release',   '$ProjectName$-X64OSX-Profile' } }

	// All
	Alias( '$ProjectName$' )
	{
		.Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
	}
}
