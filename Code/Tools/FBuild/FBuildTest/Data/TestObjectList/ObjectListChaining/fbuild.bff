//
// Chaining
//
// Chain the output of one ObjectList as the input of another
//
// This can be useful for custom "compilers" that are preprocessors
//
//------------------------------------------------------------------------------

// Use the standard test environment
//------------------------------------------------------------------------------
#include "../../testcommon.bff"
Using( .StandardEnvironment )
Settings {}

// ObjectList1
//------------------------------------------------------------------------------
ObjectList( 'ObjectList1' )
{
    // Build a cpp file. Using a directory list so that it's discovered dynamically
    .CompilerInputPath          = 'Tools/FBuild/FBuildTest/Data/TestObjectList/ObjectListChaining/'
    .CompilerInputPattern       = '*.1.cpp'
    .CompilerOutputPath         = '$Out$/Test/ObjectList/ObjectListChaining/1/'
}

// ObjectList2
//  - consume output of ObjectList1
//------------------------------------------------------------------------------
ObjectList( 'ObjectList2' )
{
    // Consume the output of 'ObjectList1'. This will generate a warning, as an .obj is
    // not a valid input for the compiler, but the dependency alone is enough for us
    .CompilerInputObjectLists   = 'ObjectList1'

    #if __OSX__
        .CompilerOptions        + ' -Wno-unused-command-line-argument'
    #endif

    .CompilerOutputPath         = '$Out$/Test/ObjectList/ObjectListChaining/2/'

    // Add a cpp to the command line manually so the compilation succeeds despite the warning for the .obj
    // We're not concerned that this dependency is invisible to FASTBuild
    .CompilerOptions            + ' Tools/FBuild/FBuildTest/Data/TestObjectList/ObjectListChaining/file.2.cpp'
}

//------------------------------------------------------------------------------
