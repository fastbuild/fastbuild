
#include "..\testcommon.bff"
Using( .StandardEnvironment )
Settings
{
    .Workers        = { "127.0.0.1" }
}

Library( "DistTest" )
{
    .LibrarianOutput    = "$Out$\Test\Distributed\dist.lib"
    .CompilerInputPath  = "Tools/FBuild/FBuildTest/Data/TestDistributed/"
    .CompilerInputPattern = "*_normal.cpp"
    .CompilerOutputPath = "$Out$\Test\Distributed\"
}

Library( "DistTestPCH" )
{
    #if __WINDOWS__
        .PCHInputFile               = "Tools/FBuild/FBuildTest/Data/TestDistributed/PrecompiledHeader.cpp"
        .PCHOutputFile              = "$Out$/Test/Distributed/PrecompiledHeader.pch"
    #endif
    #if __LINUX__
        .PCHInputFile               = "Tools/FBuild/FBuildTest/Data/TestDistributed/PrecompiledHeader.h"
        .PCHOutputFile              = "$Out$/Test/Distributed/PrecompiledHeader.h.gch"
        .CompilerInputExcludedFiles = 'PrecompiledHeader.cpp' // Don't need cpp compiled on Linux
    #endif
    #if __OSX__
        .PCHInputFile               = "Tools/FBuild/FBuildTest/Data/TestDistributed/PrecompiledHeader.h"
        .PCHOutputFile              = "$Out$/Test/Distributed/PrecompiledHeader.pch"
        .CompilerInputExcludedFiles = 'PrecompiledHeader.cpp' // Don't need cpp compiled on OS X
    #endif

    .LibrarianOutput    = "$Out$\Test\Distributed\distpch.lib"
    .CompilerInputPath  = "Tools/FBuild/FBuildTest/Data/TestDistributed/"
    .CompilerInputPattern = "*_pch.cpp"
    .CompilerOutputPath = "$Out$\Test\Distributed\"
    #if __WINDOWS__
        .CompilerOptions    + ' /Yu"PrecompiledHeader.h" /Fp"$PCHOutputFile$"'
                            + ' /I"."'
        .PCHOptions         + ' /I"."'
    #endif
    #if __LINUX__
        .CompilerOptions    + ' -Winvalid-pch -H'
                            + ' "-I$Out$/Test/Distributed"'
                            + ' "-ITools/FBuild/FBuildTest/Data/TestDistributed"'
    #endif
    #if __OSX__
        .CompilerOptions    + ' -include-pch "$PCHOutputFile$" -H'
                            + ' "-ITools/FBuild/FBuildTest/Data/TestDistributed"'
    #endif
}

// RegressionTest - Formatting errors with % in them caused a crash
ObjectList( "badcode" )
{
    .CompilerInputFiles = "Tools/FBuild/FBuildTest/Data/TestDistributed/BadCode/ErrorWithPercent.cpp"
    .CompilerOutputPath = "$Out$\Test\Distributed\"
}

// AnonymousNamespaces
Library( "AnonymousNamespaces" )
{
    .CompilerInputPath  = 'Tools/FBuild/FBuildTest/Data/TestDistributed/AnonymousNamespaces/'
    .CompilerOutputPath = '$Out$/Test/Distributed/AnonymousNamespaces/'
    .LibrarianOutput    = '$Out$/Test/Distributed/AnonymousNamespaces/AnonymousNamespaces.lib'
    #if __WINDOWS__
        .LibrarianOptions   + ' /IGNORE:4221' // Don't complain about empty object
    #endif
}

// ForceInclude - Ensure this is handled correctly
#if __WINDOWS__
    Library( "forceinclude" )
    {
        .CompilerOptions        + ' /FI"a.h"'
        .CompilerInputPath      = "Tools/FBuild/FBuildTest/Data/TestDistributed/ForceInclude/"
        .CompilerOutputPath     = "$Out$\Test\Distributed\ForceInclude\"
        .LibrarianOutput        = "$Out$\Test\Distributed\ForceInclude\ForceInclude.lib"
    }
#endif

// Check handling of Zi debug format
// Make sure we link to check that debug info is correctly retained
#if __WINDOWS__
    ObjectList( 'remoteZiLib' )
    {
        .CompilerOptions        = "%1 /Fo%2 /c /Zi /Od /nologo /Fd$Out$\Test\Distributed\Zi\RemoteZi_Lib.pdb"
        .CompilerInputPath      = "Tools/FBuild/FBuildTest/Data/TestDistributed/Zi/"
        .CompilerOutputPath     = "$Out$\Test\Distributed\Zi\"
    }
    DLL( 'remoteZi' )
    {
        .Libraries              = 'remoteZiLib'
        .LinkerOptions          + ' /DLL'
                                + ' /ENTRY:DllMain'
                                + ' /DEBUG'
                                + ' /PDB:$Out$\Test\Distributed\Zi\RemoteZi.pdb'
        .LinkerOutput           = '$Out$\Test\Distributed\Zi\RemoteZi.dll'
    }
#endif
