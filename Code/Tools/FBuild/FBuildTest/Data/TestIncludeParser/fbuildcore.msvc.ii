#line 1 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"


#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"




#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Sort.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"


#pragma once





#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"

typedef unsigned char		uint8_t;
typedef signed char			int8_t;
typedef unsigned short		uint16_t;
typedef signed short		int16_t;
typedef unsigned int		uint32_t;
typedef signed int			int32_t;

    typedef unsigned long long  uint64_t;
    typedef signed long long    int64_t;






#line 27 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"







    


#line 38 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"


    
    



#line 46 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"



#line 50 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"


	
		typedef int64_t		intptr_t;
		typedef uint64_t	uintptr_t;
	


#line 59 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"
#line 60 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"

    





#line 68 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"
#line 69 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"

	
		typedef uint64_t	size_t;
	

#line 75 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"
#line 76 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"



#line 80 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"





#line 86 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"


	typedef long long LONGLONG;
#line 90 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"



#line 94 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"




    

    




#line 106 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"




#line 111 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"
	
	
#line 114 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"

#line 116 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Types.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Sort.h"



class AscendingCompare
{
public:
	template < class T >
	inline bool operator () ( const T & a, const T & b ) const
	{
		return ( a < b );
	}
};



class AscendingCompareDeref
{
public:
	template < class T >
	inline bool operator () ( const T & a, const T & b ) const
	{
		return ( ( *a ) < ( *b ) );
	}
};



template < class T, class COMPARE >
void ShellSort( T * begin, T * end, const COMPARE & compare )
{
	size_t numItems = end - begin;
	size_t increment = 3;
	while ( increment > 0 )
	{
		for ( size_t i=0; i < numItems; i++ )
		{
			size_t j = i;
			T temp( begin[ i ] );
			while ( ( j >= increment ) && ( compare( temp, begin[ j - increment ]  ) ) )
			{
				begin[ j ] = begin[ j - increment ];
				j = j - increment;
			}
			begin[ j ] = temp;
		}
		if ( increment / 2 != 0 )
		{
			increment = increment / 2 ;
		}
		else if ( increment == 1 )
		{
			increment = 0;
		}
		else
		{
			increment = 1;
		}
	}    
}


#line 72 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Sort.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Assert.h"


#pragma once










    






#line 22 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Assert.h"



bool IsDebuggerAttached();




	

	
	












	
	












	
	

	
	





	template<bool> struct compile_time_assert_failure;
	template<> struct compile_time_assert_failure<true>{};

	class AssertHandler
	{
	public:
		static void SetThrowOnAssert( bool throwOnAssert )
		{
			s_ThrowOnAssert = throwOnAssert;
		}
		static bool Failure( const char * message, 
							 const char * file,  
							 const int line );
		static bool FailureM( const char * message, 
							 const char * file,  
							 const int line,
							 const char * msgFormat,
							 ... );

		static bool s_ThrowOnAssert;
	};

























#line 117 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Assert.h"


#line 120 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Assert.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Conversions.h"


#pragma once









namespace Math
{
	template <class T>
	static inline T RoundUp( T value, T alignment )
	{
		return ( value + alignment - 1) & ~( alignment - 1 );
	}
	template <class T>
	static inline T Max( T a, T b )
	{
		return ( a > b ) ? a : b;
	}
	template <class T>
	static inline T Min( T a, T b )
	{
		return ( a < b ) ? a : b;
	}
	template <class T>
	static inline T Clamp( T a, T b, T c )
	{
		return Min( Max( a, b ), c );
	}
	template <typename T>
	static inline bool IsPowerOf2( T value )
	{
		return ( ( ( value - 1 ) & value ) == 0 );
	}

};


#line 45 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Conversions.h"
#line 13 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"


#pragma once






	
		
	#line 13 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"
#line 14 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"







#line 22 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"
	
	
	
	#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Mutex.h"


#pragma once









#line 14 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Mutex.h"



class Mutex
{
public:
	Mutex();
	~Mutex();

	void Lock();
	void Unlock();

private:
	
	
		unsigned char m_CriticalSection[ 8 + 4 + 4 + 8 + 8 + 8 ]; 
	

#line 33 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Mutex.h"
	
    

#line 37 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Mutex.h"
};



class MutexHolder
{
public:
	MutexHolder( Mutex & mutex ) : m_Mutex( mutex )	
	{ 
		mutex.Lock();
	}
	~MutexHolder()
	{ 
		m_Mutex.Unlock();
	}
private:
	void operator = ( MutexHolder & ) {} 

	Mutex & m_Mutex;
};


#line 60 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Mutex.h"
#line 26 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"

	
	
	class MemPoolBlock;

	
	
	
	
	

	
	
	class MemTracker
	{
	public:
		static void Alloc( void * ptr, size_t size, const char * file, int line );
		static void Free( void * ptr );

		static void Reset();
		static void DumpAllocations();

		static inline uint32_t GetCurrentAllocationCount() { return s_AllocationCount; }

		struct Allocation
		{
			void *			m_Ptr;
			size_t			m_Size;
			Allocation *	m_Next;
			const char *	m_File;
			uint32_t		m_Line;
			uint32_t		m_Id;
		};
	private:
		static void Init();

		static Mutex & GetMutex() { return reinterpret_cast< Mutex & >( s_Mutex ); }

		static uint32_t			s_Id;
		static bool				s_Enabled;
		static bool				s_Initialized;
		static uint32_t			s_AllocationCount;
		static Allocation *		s_LastAllocation;
		static uint64_t			s_Mutex[ sizeof( Mutex ) / sizeof( uint64_t ) ];
		static Allocation **	s_AllocationHashTable;
		static MemPoolBlock *	s_Allocations;
	};

#line 75 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"


#line 78 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemTracker.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"




inline void * operator new( size_t, void * ptr ) { return ptr; }
inline void * operator new[]( size_t, void * ptr ) { return ptr; }
inline void operator delete( void *, void * ) {}
inline void operator delete[]( void *, void * ) {}




	
	
	
	

	
	








#line 39 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"



void * Alloc( size_t size );
void * Alloc( size_t size, size_t alignment );
void * AllocFileLine( size_t size, const char * file, int line );
void * AllocFileLine( size_t size, size_t alignment, const char * file, int line );
void Free( void * ptr );





#line 53 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"

#line 55 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"
	
		inline void * operator new( size_t size, const char * file, int line ) { return AllocFileLine( size, file, line ); }
		inline void * operator new[]( size_t size, const char * file, int line ) { return AllocFileLine( size, file, line ); }
		inline void operator delete( void * ptr, const char *, int ) { return Free( ptr ); }
		inline void operator delete[]( void * ptr, const char *, int ) { return Free( ptr ); }
	#line 61 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"
	inline void * operator new( size_t size ) { return Alloc( size ); }
	inline void * operator new[]( size_t size ) { return Alloc( size ); }
	inline void operator delete( void * ptr ) { Free( ptr ); }
	inline void operator delete[]( void * ptr ) { Free( ptr ); }
#line 66 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"


#line 69 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/Mem.h"
#line 14 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"



template < class T >
class Array
{
public:
	explicit Array();
	explicit Array( const Array< T > & other );
	explicit Array( const T * begin, const T * end );
	explicit Array( size_t initialCapacity, bool resizeable = false );
	~Array();

	void Destruct();

	
	typedef	T *			Iter;
	typedef const T *	ConstIter;
	Iter		Begin()	const	{ return m_Begin; }
	Iter		End() const		{ return m_End; }
	inline T &			operator [] ( size_t index )		{ do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( index < GetSize() ) ) { if ( AssertHandler::Failure( "index < GetSize()", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 34 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_Begin[ index ]; }
	inline const T &	operator [] ( size_t index ) const	{ do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( index < GetSize() ) ) { if ( AssertHandler::Failure( "index < GetSize()", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 35 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_Begin[ index ]; }
	inline T &			Top()		{ do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Begin < m_End ) ) { if ( AssertHandler::Failure( "m_Begin < m_End", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 36 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_End[ -1 ]; }
	inline const T &	Top() const	{ do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Begin < m_End ) ) { if ( AssertHandler::Failure( "m_Begin < m_End", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 37 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_End[ -1 ]; }

	
	void SetCapacity( size_t capacity );
	void SetSize( size_t size );
	void Clear();
	void Swap( Array< T > & other );

	
	void Sort() { ShellSort( m_Begin, m_End, AscendingCompare() ); }
	void SortDeref() { ShellSort( m_Begin, m_End, AscendingCompareDeref() ); }
	template < class COMPARER >
	void Sort( const COMPARER & comp ) { ShellSort( m_Begin, m_End, comp ); }

	
	template < class U >
	T * Find( const U & obj ) const;
	template < class U >
	T * FindDeref( const U & obj ) const;

	
	void Append( const T & item );
	template < class U >
	void Append( const Array< U > & other );
	template < class U >
	void Append( const U * begin, const U * end );
	void Pop();
	void PopFront(); 
	void Erase( T * const iter );
	inline void EraseIndex( size_t index ) { Erase( m_Begin + index ); }

	Array & operator = ( const Array< T > & other );

	
	inline bool		IsAtCapacity() const	{ return ( m_End == m_MaxEnd ) && ( m_Resizeable == false ); }
	inline size_t	GetCapacity() const		{ return ( m_MaxEnd - m_Begin ); }
	inline size_t	GetSize() const			{ return ( m_End - m_Begin ); }
	inline bool		IsEmpty() const			{ return ( m_Begin == m_End ); }

private:
	void Grow();
	inline T * Allocate( size_t numElements ) const;
	inline void Deallocate( T * ptr ) const;

	T * m_Begin;
	T * m_End;
	T * m_MaxEnd;
	bool m_Resizeable;
};



template < class T >
Array< T >::Array()
	: m_Begin( nullptr )
	, m_End( nullptr )
	, m_MaxEnd( nullptr )
	, m_Resizeable( true )
{
}



template < class T >
Array< T >::Array( const Array< T > & other )
{
	new (this) Array( other.GetSize(), true );
	*this = other;
}



template < class T >
Array< T >::Array( const T * begin, const T * end )
{
	const size_t size = ( end - begin );
	new (this) Array( size, true );
	Append( begin, end );
}



template < class T >
Array< T >::Array( size_t initialCapacity, bool resizeable )
{
	if ( initialCapacity )
	{
		
			m_Resizeable = true; 
		#line 127 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"
		m_Begin = Allocate( initialCapacity );
		m_End = m_Begin;
		m_MaxEnd = m_Begin + initialCapacity;
	}
	else
	{
		m_Begin = nullptr;
		m_End = nullptr;
		m_MaxEnd = nullptr;
	}
	m_Resizeable = resizeable;
}



template < class T >
Array< T >::~Array()
{
	Destruct();
}



template < class T >
void Array< T >::Destruct()
{
	T * iter = m_Begin;
	while ( iter < m_End )
	{
		iter->~T();
		iter++;
	}
	Deallocate( m_Begin );
	m_Begin = nullptr;
	m_End = nullptr;
	m_MaxEnd = nullptr;
}



template < class T >
void Array< T >::SetCapacity( size_t capacity )
{
	if ( capacity == GetCapacity() )
	{
		return;
	}

	T * newMem = Allocate( capacity );

	
	
	size_t itemsToKeep = Math::Min( capacity, GetSize() );
	T * src = m_Begin;
	T * dst = newMem;
	T * keepEnd = m_Begin + itemsToKeep;
	while ( src < m_End )
	{
		if ( src < keepEnd )
		{
			new ( dst ) T( *src );
		}
		src->~T();
		src++;
		dst++;
	}

	
	Deallocate( m_Begin );

	
	m_Begin = newMem;
	m_End = newMem + itemsToKeep;
	m_MaxEnd = newMem + capacity;
}



template < class T >
void Array< T >::SetSize( size_t size )
{
	size_t oldSize = GetSize();

	
	if ( oldSize == size )
	{
		return;
	}

	
	if ( size < oldSize )
	{
		
		T * item = m_Begin + size;
		T * end = m_End;
		while ( item < end )
		{
			item->~T();
			item++;
		}
		m_End = m_Begin + size;
		return;
	}

	

	
	if ( size > GetCapacity() )
	{
		SetCapacity( size );
	}

	
	T * item = m_End;
	T * newEnd = m_Begin + size;
	while( item < newEnd )
	{
		new ( item ) T;
		item++;
	}
	m_End = newEnd;
}



template < class T >
void Array< T >::Clear()
{
	
	T * src = m_Begin;
	while ( src < m_End )
	{
		src->~T();
		src++;
	}

	
	m_End = m_Begin;
}



template < class T >
void Array< T >::Swap( Array< T > & other )
{
	T * tmpBegin = m_Begin;
	T * tmpEnd = m_End;
	T * tmpMaxEnd = m_MaxEnd;
	bool tmpResizeable = m_Resizeable;
	m_Begin = other.m_Begin;
	m_End = other.m_End;
	m_MaxEnd = other.m_MaxEnd;
	m_Resizeable = other.m_Resizeable;
	other.m_Begin = tmpBegin;
	other.m_End = tmpEnd;
	other.m_MaxEnd = tmpMaxEnd;
	other.m_Resizeable = tmpResizeable;
}



template < class T >
template < class U >
T * Array< T >::Find( const U & obj ) const
{
	T * pos = m_Begin;
	T * end = m_End;
	while ( pos < end )
	{
		if ( *pos == obj )
		{
			return pos;
		}
		pos++;
	}
	return nullptr;
}



template < class T >
template < class U >
T * Array< T >::FindDeref( const U & obj ) const
{
	T * pos = m_Begin;
	T * end = m_End;
	while ( pos < end )
	{
		if ( *(*pos) == obj )
		{
			return pos;
		}
		pos++;
	}
	return nullptr;
}



template < class T >
void Array< T >::Append( const T & item )
{
	if ( m_End == m_MaxEnd )
	{
		Grow();
	}
	new ( m_End ) T( item );
	m_End++;
}



template < class T >
template < class U >
void Array< T >::Append( const Array< U > & other  )
{
	U* end = other.End();
	for ( U* it = other.Begin(); it != end; ++it )
	{
		Append( *it );
	}	
}



template < class T >
template < class U >
void Array< T >::Append( const U * begin, const U * end )
{
	for ( const U* it = begin; it != end; ++it )
	{
		Append( *it );
	}	
}



template < class T >
void Array< T >::Pop()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Begin < m_End ) ) { if ( AssertHandler::Failure( "m_Begin < m_End", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 367 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	T * it = --m_End;
	it->~T();
	(void)it; 
}



template < class T >
void Array< T >::PopFront()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Begin < m_End ) ) { if ( AssertHandler::Failure( "m_Begin < m_End", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 379 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	T * dst = m_Begin;
	T * src = m_Begin + 1;
	while ( src < m_End )
	{
		*dst = *src;
		dst++;
		src++;
	}

	
	dst->~T();

	m_End--;
}



template < class T >
void Array< T >::Erase( T * const iter )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( iter < m_End ) ) { if ( AssertHandler::Failure( "iter < m_End", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 402 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	T * dst = iter;
	T * last = ( m_End - 1 );
	while ( dst < last )
	{
		*dst = *(dst + 1);
		dst++;
	}
	dst->~T();
	m_End = last;
}



template < class T >
Array< T > & Array< T >::operator = ( const Array< T > & other )
{
	Clear();

	
	const size_t otherSize = other.GetSize();
	if ( GetCapacity() < otherSize )
	{
		Deallocate( m_Begin );
		m_Begin = Allocate( otherSize );
		m_MaxEnd = m_Begin + otherSize;
	}

	m_End = m_Begin + otherSize;
	T * dst = m_Begin;
	T * src = other.m_Begin;
	const T * end = m_End;
	while ( dst < end )
	{
		new ( dst ) T( *src );
		dst++;
		src++;
	}
	
	return *this;
}



template < class T >
void Array< T >::Grow()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Resizeable ) ) { if ( AssertHandler::Failure( "m_Resizeable", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 450 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	size_t currentCapacity = GetCapacity();
	size_t size = GetSize();
	size_t newCapacity = ( currentCapacity + ( currentCapacity >> 1 ) + 1 );
	T * newMem = Allocate( newCapacity );

	T * src = m_Begin;
	T * dst = newMem;
	while ( src < m_End )
	{
		new ( dst ) T( *src );
		src->~T();
		dst++;
		src++;
	}
	Deallocate( m_Begin );
	m_Begin = newMem;
	m_End = ( newMem ) + size;
	m_MaxEnd = ( newMem ) + newCapacity;
}



template < class T >
T * Array< T >::Allocate( size_t numElements ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Resizeable == true ) ) { if ( AssertHandler::Failure( "m_Resizeable == true", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 478 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
    const size_t align = __alignof( T ) > sizeof( void * ) ? __alignof( T ) : sizeof( void * );
	return static_cast< T * >( ::AllocFileLine( sizeof( T ) * numElements, align, "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h", 480 ) );
}



template < class T >
void Array< T >::Deallocate( T * ptr ) const
{
	::Free( ptr );
}


#line 493 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Array.h"
#line 6 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileIO.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h"


#pragma once












    
        typedef char * va_list; 
    

#line 21 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h"
#line 22 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h"



class AString
{
public:
	explicit AString();
	explicit AString( uint32_t reserve );
	explicit AString( const AString & string );
	explicit AString( const char * string );
	explicit AString( const char * start, const char * end );
	~AString();

	inline uint32_t		GetLength() const	{ return m_Length; }
	inline uint32_t		GetReserved() const { return ( m_ReservedAndFlags & RESERVED_MASK ); }
	inline bool			IsEmpty() const		{ return ( m_Length == 0 ); }

	
	inline char *		Get()				{ return m_Contents; }
	inline const char * Get() const			{ return m_Contents; }
	inline char *		GetEnd()			{ return ( m_Contents + m_Length ); }
	inline const char *	GetEnd() const		{ return ( m_Contents + m_Length ); }
	inline char &		operator [] ( size_t index )		{ do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( index < m_Length ) ) { if ( AssertHandler::Failure( "index < m_Length", "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h", 44 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_Contents[ index ]; }
	inline const char & operator [] ( size_t index )  const { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( index < m_Length ) ) { if ( AssertHandler::Failure( "index < m_Length", "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h", 45 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_Contents[ index ]; }

	
	static const AString & GetEmpty() { return s_EmptyAString; }

	
	inline AString & operator = ( const char * string ) { Assign( string ); return *this; }
	inline AString & operator = ( const AString & string ) { Assign( string ); return *this; }
	void Assign( const char * string );
	void Assign( const char * start, const char * end );
	void Assign( const AString & string );
	void Clear();
	void SetReserved( size_t capacity );

	
	void SetLength( uint32_t len );

	
	AString & operator += ( char c );
	AString & operator += ( const char * string );
	AString & operator += ( const AString & string );
	void Append( const char * string, size_t len );

	
	bool operator == ( const char * other ) const;
	bool operator == ( const AString & other ) const;
	inline bool operator != ( const char * other ) const { return !(*this == other ); }
	inline bool operator != ( const AString & other ) const { return !(*this == other ); }
	int32_t CompareI( const AString & other ) const;
	inline bool operator < ( const AString & other ) const { return ( CompareI( other ) < 0 ); }

	inline bool MemoryMustBeFreed() const { return ( ( m_ReservedAndFlags & MEM_MUST_BE_FREED_FLAG ) == MEM_MUST_BE_FREED_FLAG ); }

	void Format( const char * fmtString, ... );
	void VFormat( const char * fmtString, va_list arg );

	void Tokenize( Array< AString > & tokens, char splitChar = ' ' ) const;

	
	uint32_t Replace( char from, char to, uint32_t maxReplaces = 0 );
	uint32_t Replace( const char * from, const char * to, uint32_t maxReplaces = 0 );
	void ToLower();

	
	const char *	Find( char c, const char * startPos = nullptr ) const;
	char *			Find( char c, char * startPos = nullptr ) { return const_cast< char *>( ((const AString *)this)->Find( c, startPos ) ); }
	const char *	Find( const char * subString ) const;
	char *			Find( const char * subString ) { return const_cast< char *>( ((const AString *)this)->Find( subString ) ); }
	const char *	FindI( const char * subString ) const;
	const char *	FindLast( char c ) const;
	char *			FindLast( char c ) { return const_cast< char *>( ((const AString *)this)->FindLast( c ) ); }
	bool			EndsWith( char c ) const;
	bool			EndsWith( const char * string ) const;
	bool			EndsWithI( const char * other ) const;
	bool			EndsWithI( const AString & other ) const;
	bool			BeginsWith( char c ) const;
	bool			BeginsWith( const char * string ) const;
	bool			BeginsWith( const AString & string ) const;
	bool			BeginsWithI( const char * string ) const;
	bool			BeginsWithI( const AString & string ) const;

	
	static bool		Match( const char * pattern, const char * string );
	inline bool		Matches( const char * pattern ) const { return Match( pattern, m_Contents ); }
	static bool		MatchI( const char * pattern, const char * string );
	inline bool		MatchesI( const char * pattern ) const { return MatchI( pattern, m_Contents ); }

	
	static void Copy( const char * src, char * dst, size_t len );
	static size_t StrLen( const char * string );
	static int32_t StrNCmp( const char * a, const char * b, size_t num );
	static int32_t StrNCmpI( const char * a, const char * b, size_t num );

protected:
	enum { MEM_MUST_BE_FREED_FLAG	= 0x00000001 };
	enum { RESERVED_MASK			= 0xFFFFFFFE };

	inline void SetReserved( uint32_t reserved, bool mustFreeMemory )
	{ 
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( reserved & MEM_MUST_BE_FREED_FLAG ) == 0 ) ) { if ( AssertHandler::Failure( "( reserved & MEM_MUST_BE_FREED_FLAG ) == 0", "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h", 124 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		m_ReservedAndFlags = ( reserved ^ ( mustFreeMemory ? MEM_MUST_BE_FREED_FLAG : 0 ) );
	}
	__declspec( noinline ) void Grow( uint32_t newLen );		
	__declspec( noinline ) void GrowNoCopy( uint32_t newLen ); 

	char *		m_Contents;			
	uint32_t	m_Length;			
	uint32_t	m_ReservedAndFlags;	

	static const char * const   s_EmptyString;
	static const AString	s_EmptyAString;
};


#line 140 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AString.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileIO.h"







class FileIO
{
public:
	static bool FileExists( const char * fileName );
	static bool FileDelete( const char * fileName );
	static bool FileCopy( const char * srcFileName, const char * dstFileName, bool allowOverwrite = true );
	static bool FileMove( const AString & srcFileName, const AString & dstFileName );

	
	static bool GetFiles( const AString & path,
						  const AString & wildCard,
						  bool recurse,
						  Array< AString > * results );
	struct FileInfo
	{
		AString		m_Name;
		uint32_t	m_Attributes;
		uint64_t	m_LastWriteTime;
		uint64_t	m_Size;

		bool		IsReadOnly() const;
	};
	static bool GetFilesEx( const AString & path,
							const AString & wildCard,
							bool recurse,
							Array< FileInfo > * results );
	static bool GetFileInfo( const AString & fileName, FileInfo & info );

	static bool GetCurrentDir( AString & output );
	static bool SetCurrentDir( const AString & dir );
	static bool GetTempDir( AString & output );
	static bool DirectoryCreate( const AString & path );
	static bool DirectoryExists( const AString & path );
	static bool EnsurePathExists( const AString & path );

	static bool CreateTempPath( const char * tempPrefix, AString & path );

	static uint64_t GetFileLastWriteTime( const AString & fileName );
	static bool		SetFileLastWriteTime( const AString & fileName, uint64_t fileTime );

	static bool		SetReadOnly( const char * fileName, bool readOnly );
    static bool     GetReadOnly( const char * fileName );
	static inline bool GetReadOnly( const AString & fileName ) { return GetReadOnly( fileName.Get() ); }

    
        static void		WorkAroundForWindowsFilePermissionProblem( const AString & fileName );
    

#line 67 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileIO.h"

private:
	static void GetFilesRecurse( AString & path, 
								 const AString & wildCard,
								 Array< AString > * results );
	static void GetFilesNoRecurse( const char * path, 
								   const char * wildCard,
								   Array< AString > * results );
	static void GetFilesRecurseEx( AString & path, 
								 const AString & wildCard,
								 Array< FileInfo > * results );
	static void GetFilesNoRecurseEx( const char * path, 
								   const char * wildCard,
								   Array< FileInfo > * results );
};


#line 85 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileIO.h"
#line 8 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileStream.h"


#pragma once




#line 1 "c:\\users\\franta\\p4\\code\\core\\fileio\\IOStream.h"


#pragma once










class AString;



class IOStream
{
public:
	explicit inline IOStream() {}
	inline virtual ~IOStream() {}

	
	virtual uint64_t ReadBuffer( void * buffer, uint64_t bytesToRead ) = 0;
	virtual uint64_t WriteBuffer( const void * buffer, uint64_t bytesToWrite ) = 0;
	virtual void Flush() = 0;

	
	virtual uint64_t Tell() const = 0;
	virtual bool Seek( uint64_t pos ) const = 0;
	virtual uint64_t GetFileSize() const = 0;

	
	inline uint64_t Read( void * b, size_t s ) { return ReadBuffer( b, s ); }
	inline bool Read( bool & b )		{ return ( ReadBuffer( &b, sizeof( b ) ) == sizeof( b ) ); }
	inline bool Read( int8_t & i )		{ return ( ReadBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Read( int16_t & i )		{ return ( ReadBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Read( int32_t & i )		{ return ( ReadBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Read( int64_t & i )		{ return ( ReadBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Read( uint8_t & u )		{ return ( ReadBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Read( uint16_t & u )	{ return ( ReadBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Read( uint32_t & u )	{ return ( ReadBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Read( uint64_t & u )	{ return ( ReadBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	bool Read( AString & string );
	template< class T > inline bool Read( Array< T > & a );

	
	inline uint64_t Write( const void * b, size_t s ) { return WriteBuffer( b, s ); }
	inline bool Write( const bool & b )		{ return ( WriteBuffer( &b, sizeof( b ) ) == sizeof( b ) ); }
	inline bool Write( const int8_t & i )	{ return ( WriteBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Write( const int16_t & i )	{ return ( WriteBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Write( const int32_t & i )	{ return ( WriteBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Write( const int64_t & i )	{ return ( WriteBuffer( &i, sizeof( i ) ) == sizeof( i ) ); }
	inline bool Write( const uint8_t & u )	{ return ( WriteBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Write( const uint16_t & u )	{ return ( WriteBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Write( const uint32_t & u )	{ return ( WriteBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	inline bool Write( const uint64_t & u )	{ return ( WriteBuffer( &u, sizeof( u ) ) == sizeof( u ) ); }
	bool Write( const AString & string );
	template< class T > inline bool Write( const Array< T > & a );

	
	void AlignRead( size_t alignment );
	void AlignWrite( size_t alignment );
};



template< class T >
bool IOStream::Read( Array< T > & a )
{
	uint32_t num = 0;
	if ( Read( num ) == false ) { return false; }
	a.SetSize( num );
	for ( uint32_t i=0; i<num; ++i )
	{
		if ( Read( a[ i ] ) == false ) { return false; }
	}
	return true;
}



template< class T >
bool IOStream::Write( const Array< T > & a )
{
	uint32_t num = (uint32_t)a.GetSize();
	if ( Write( num ) == false ) { return false; }
	for ( uint32_t i=0; i<num; ++i )
	{
		if ( Write( a[ i ] ) == false ) { return false; }
	}
	return true;
}


#line 98 "c:\\users\\franta\\p4\\code\\core\\fileio\\IOStream.h"
#line 9 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileStream.h"



class FileStream : public IOStream
{
public:
	explicit FileStream();
	~FileStream();

	enum FileMode
	{
		READ_ONLY		= 0x1,
		WRITE_ONLY		= 0x2,
		TEMP			= 0x4,
		DELETE_ON_CLOSE	= 0x8,
		SHARE_READ		= 0x10,
		SHARE_WRITE		= 0x20,
		SHARE_DELETE	= 0x40,
		NO_RETRY_ON_SHARING_VIOLATION = 0x80,
	};

	bool Open( const char * fileName, uint32_t mode = FileStream::READ_ONLY );
	void Close();

	bool IsOpen() const;

	
	virtual uint64_t ReadBuffer( void * buffer, uint64_t bytesToRead );
	virtual uint64_t WriteBuffer( const void * buffer, uint64_t bytesToWrite );
	virtual void Flush();

	
	virtual uint64_t Tell() const;
	virtual bool Seek( uint64_t pos ) const;
	virtual uint64_t GetFileSize() const;

	
	bool SetLastWriteTime( uint64_t lastWriteTime );

	
	inline void * GetHandle() const { return m_Handle; }

private:
	void * m_Handle;
};


#line 57 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/FileStream.h"
#line 9 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AStackString.h"


#pragma once









template <int RESERVED = 256 >
class AStackString : public AString
{
public:
	explicit AStackString();
	explicit AStackString( const AString & string );
	explicit AStackString( const AStackString & string );
	explicit AStackString( const char * string );
	explicit AStackString( const char * start, const char * end );
	inline ~AStackString() {}

	AStackString< RESERVED > & operator = ( const char * string ) { Assign( string ); return *this; }
	AStackString< RESERVED > & operator = ( const AString & string ) { Assign( string ); return *this; }

private:
	char m_Storage[ RESERVED + 1 ];
};



template < int RESERVED >
AStackString< RESERVED >::AStackString()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( ( RESERVED % 2 ) == 0 ) > (); } while ( false ); __pragma(warning(pop));
	m_Contents = m_Storage;
	SetReserved( RESERVED, false );
	m_Storage[ 0 ] = '\0';
}



template < int RESERVED >
AStackString< RESERVED >::AStackString( const AString & string )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( ( RESERVED % 2 ) == 0 ) > (); } while ( false ); __pragma(warning(pop));
	m_Contents = m_Storage;
	SetReserved( RESERVED, false );
	Assign( string );
}



template < int RESERVED >
AStackString< RESERVED >::AStackString( const AStackString & string )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( ( RESERVED % 2 ) == 0 ) > (); } while ( false ); __pragma(warning(pop));
	m_Contents = m_Storage;
	SetReserved( RESERVED, false );
	Assign( string );
}



template < int RESERVED >
AStackString< RESERVED >::AStackString( const char * string )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( ( RESERVED % 2 ) == 0 ) > (); } while ( false ); __pragma(warning(pop));
	m_Contents = m_Storage;
	SetReserved( RESERVED, false );
	Assign( string );
}



template < int RESERVED >
AStackString< RESERVED >::AStackString( const char * start, const char * end )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( ( RESERVED % 2 ) == 0 ) > (); } while ( false ); __pragma(warning(pop));
	m_Contents = m_Storage;
	SetReserved( RESERVED, false );
	Assign( start, end );
}


#line 88 "c:\\Users\\Franta\\p4\\Code\\Core/Strings/AStackString.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"














#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


















#line 20 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 26 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 27 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

























#line 53 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"










#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"













#pragma once







































































































































#line 151 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"



#line 155 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






































#line 194 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"


#line 197 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"

#line 199 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"





#line 205 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"



#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






#line 216 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"











#line 228 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"








#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
#line 238 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros




































































































































































































































































































































































































































































                                                




                                                

















































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1564 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






























#line 1595 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
























#line 1620 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"












#line 1633 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






































#line 1672 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"


























































































































#line 1795 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






































































































#line 1898 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"








































































































































































#line 2067 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"





































































































#line 2169 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"



















































































































































































































#line 2381 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
extern "C" {




#line 2387 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"



































































































































































































































#line 2615 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2654 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"









































































































































































































































#line 2888 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"









#line 2898 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"


    
    
#line 2903 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






#line 2910 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
#line 2911 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






#line 2918 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"
#line 2919 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"











#line 2931 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"

































#line 2965 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"






















}
#line 2989 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"
















































































































































































































































#line 265 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"



#line 269 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"


















































































#line 352 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"


}
#line 356 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"

#line 358 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ConcurrencySal.h"
#line 2991 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\sal.h"


#line 68 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#pragma pack(push,8)

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"












#pragma once






#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"







#pragma pack(push,8)


extern "C" {
#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"








#line 42 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"

#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"
#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"



typedef unsigned __int64    uintptr_t;


#line 52 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"

#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"





typedef char *  va_list;
#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"

#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"





#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"







#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"


#line 80 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"













#line 94 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"







#line 102 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"














#line 117 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"


extern void __cdecl __va_start(va_list *, ...);


















#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"


}
#line 143 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"

#pragma pack(pop)

#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\vadefs.h"
#line 75 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


extern "C" {
#line 79 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 85 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 90 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







#line 103 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



















#line 123 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 128 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 129 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 130 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




















#line 151 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"









#line 161 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 162 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 164 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"










#line 175 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 177 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 178 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 184 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 186 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 191 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 193 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 195 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 196 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 202 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 205 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 212 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 213 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 218 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 220 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
  
#line 222 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 223 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"










#line 234 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 235 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 242 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 243 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 250 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

















#line 268 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 273 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"








#line 282 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 289 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 290 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 296 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 303 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 304 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 311 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 312 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 317 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


#line 320 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 322 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 323 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 324 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 330 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"










#line 341 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 343 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 344 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 345 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"








#line 354 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 360 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 367 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 368 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 370 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
















#line 387 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 388 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 392 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 399 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 400 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 407 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 414 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 416 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 417 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




  




#line 427 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 428 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



  
  




#line 438 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 439 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




   


#line 447 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 452 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 453 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



  




#line 462 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 463 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



  




#line 472 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 473 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 477 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 483 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 488 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 490 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 491 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



typedef unsigned __int64    size_t;


#line 498 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 500 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



typedef size_t rsize_t;

#line 506 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 507 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



typedef __int64             intptr_t;


#line 514 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 516 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"












typedef __int64             ptrdiff_t;


#line 532 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 534 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 545 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


















typedef int errno_t;
#line 565 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


typedef  long __time32_t;   

#line 570 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


typedef __int64 __time64_t;     

#line 575 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





typedef __time64_t time_t;      
#line 582 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 584 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







#line 592 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 593 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 599 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 604 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 606 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 607 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"





#line 613 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 617 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"




#line 622 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 624 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 625 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"










  void __cdecl _invalid_parameter(  const wchar_t *,   const wchar_t *,   const wchar_t *, unsigned int, uintptr_t);



#line 640 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

 __declspec(noreturn)
void __cdecl _invoke_watson(  const wchar_t *,   const wchar_t *,   const wchar_t *, unsigned int, uintptr_t);



  
#line 648 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"












#line 661 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


































#line 696 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


































































































































































#line 859 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 860 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1926 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"















































































































































#line 2070 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"
#line 2071 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;

#line 2114 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"


}
#line 2118 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 2122 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 2124 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 2128 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 2130 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 2134 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 2136 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"






#line 2143 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"



#line 2147 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#pragma pack(pop)

#line 2151 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"

#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"


extern "C" {
#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"
















 void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
   const void *  __cdecl memchr(   const void * _Buf ,   int _Val,   size_t _MaxCount);
   int     __cdecl _memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
   int     __cdecl _memicmp_l(  const void * _Buf1,   const void * _Buf2,   size_t _Size,   _locale_t _Locale);
  int     __cdecl memcmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);

 

void *  __cdecl memcpy(  void * _Dst,   const void * _Src,   size_t _Size);

 errno_t  __cdecl memcpy_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);





















#line 74 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"










#line 85 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"
#line 86 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"
         
        
        void *  __cdecl memset(  void * _Dst,   int _Val,   size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(  void * _Dst,   const void * _Src,   int _Val,   size_t _Size);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))  int __cdecl memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"

#line 97 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"




extern "C++"   inline void * __cdecl memchr(   void * _Pv ,   int _C,   size_t _N)
        { return (void*)memchr((const void*)_Pv, _C, _N); }
#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"
#line 105 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"


}
#line 109 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"

#line 111 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\memory.h"
#line 13 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"

	#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"


















#pragma once
#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"





































#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"


























































#line 118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"










































 

















#line 179 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"

#line 181 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winapifamily.h"
#line 2 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"




















#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



















#pragma warning(push)
#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"
#pragma warning(disable:4001) 
#line 24 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#pragma once



































































































































































#line 190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"











#line 202 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"







#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"
#line 211 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"







#line 219 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"
#line 220 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"






#line 227 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 229 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 233 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 235 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 241 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"


#line 244 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"
#line 245 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"








#line 254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#line 258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#line 262 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#line 266 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#line 270 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#line 274 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 276 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"



#pragma warning(pop)


#line 283 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"
#line 284 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 286 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\sdkddkver.h"

#line 23 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"





#pragma once
#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#pragma region Application Family



















































#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"




















#line 105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 109 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 117 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"





#line 131 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"




#line 136 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 137 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"







#line 145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 146 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 153 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#pragma warning(push)
#line 156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 160 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"














#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"





#pragma pack(push,8)


extern "C" {
#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"




typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;


























struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct _DISPATCHER_CONTEXT;



 EXCEPTION_DISPOSITION __C_specific_handler (
      struct _EXCEPTION_RECORD * ExceptionRecord,
      void * EstablisherFrame,
      struct _CONTEXT * ContextRecord,
      struct _DISPATCHER_CONTEXT * DispatcherContext
);

#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"

#line 83 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"













unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);












































































}
#line 177 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"

#pragma pack(pop)

#line 181 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\excpt.h"
#line 161 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"














#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"



#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"




extern "C" {
#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"





void  __cdecl _vacopy(  va_list *,   va_list);



}
#line 42 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"

#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdarg.h"
#line 162 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 163 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"













#pragma once


extern "C" {
#line 19 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"











#pragma once

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"
















#pragma once
#line 19 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



 

#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"
  
 #line 27 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

 



  
 #line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

 
  
  
 #line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

#line 41 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



















#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"


extern "C" {
#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"




























#line 94 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"












#line 107 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"






































































































#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"
#line 211 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"





































#line 249 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



























#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"























































































#line 365 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



















#line 385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"





#line 391 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"


#line 394 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"




































































#line 463 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"










#line 474 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"








                                

}
#line 486 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



























#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"




























#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"





























































































































































#pragma once
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_undef.h"








































































































































































































































































































































































































































































#line 189 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"
































































#line 1130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"






















































#line 1185 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"
#line 1186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"
#line 1187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings_strict.h"

#line 514 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"
#line 515 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

















#line 533 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"




























































































































#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\sdv_driverspecs.h"





















#line 23 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\sdv_driverspecs.h"
#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"



#pragma once
#line 131 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"


extern "C" {
#line 135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"




































































































#line 236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"

    
    
    
    
    
    
    
    
    
    
    


#line 251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"

    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    


    
    


    
    


    
    



    
    









    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    


    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    


    




    
    
    
    
    

    


    
    
    
    
    


    


    
    
    
    
    
    

    


    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    

    
    
    
    

    

    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    

    
    


    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    


    
    
    
    
     
    

    
    
        
        
        
        
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
#line 665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"
    
#line 667 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"
    


    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    
    

    
    

    
    
    
    
    
    


    
    
    

    
	

    
    


    
    


    
    
    


    
    
    


    
    











































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

#line 853 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"

    
    
    

    
    
    


}
#line 865 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"

#line 867 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\driverspecs.h"


#line 535 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"












#line 548 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"

#line 550 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\specstrings.h"



#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#pragma region Application Family





#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#line 26 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"













#line 40 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"


extern "C" {
#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"







typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef   char *PSZ;
#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"








#line 68 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 73 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 85 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 89 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"












#line 102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"






#line 109 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"


























#line 141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"




#line 146 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"







#line 155 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;



#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





















#pragma warning(push)
#line 24 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 


extern "C" {
#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"













#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"


extern "C" {
#line 24 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"



#line 28 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
















#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

#line 47 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 48 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

 const unsigned short * __cdecl __pctype_func(void);

 extern const unsigned short *_pctype;


#line 55 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"





 extern const unsigned short _wctype[];
#line 64 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"









 const wctype_t * __cdecl __pwctype_func(void);

 extern const wctype_t *_pwctype;


#line 79 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 80 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
























                                













   int __cdecl _isctype(  int _C,   int _Type);
   int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
    int __cdecl isalpha(  int _C);
   int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
    int __cdecl isupper(  int _C);
   int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
    int __cdecl islower(  int _C);
   int __cdecl _islower_l(  int _C,   _locale_t _Locale);
    int __cdecl isdigit(  int _C);
   int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
   int __cdecl isxdigit(  int _C);
   int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);
    int __cdecl isspace(  int _C);
   int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
   int __cdecl ispunct(  int _C);
   int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
   int __cdecl isblank(  int _C);
   int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
    int __cdecl isalnum(  int _C);
   int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
   int __cdecl isprint(  int _C);
   int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
   int __cdecl isgraph(  int _C);
   int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
   int __cdecl iscntrl(  int _C);
   int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);
    int __cdecl toupper(  int _C);
    int __cdecl tolower(  int _C);
    int __cdecl _tolower(  int _C);
   int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
    int __cdecl _toupper(  int _C);
   int __cdecl _toupper_l(  int _C,   _locale_t _Locale);
   int __cdecl __isascii(  int _C);
   int __cdecl __toascii(  int _C);
   int __cdecl __iscsymf(  int _C);
   int __cdecl __iscsym(  int _C);

#line 157 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"







   int __cdecl iswalpha(  wint_t _C);
   int __cdecl _iswalpha_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswupper(  wint_t _C);
   int __cdecl _iswupper_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswlower(  wint_t _C);
   int __cdecl _iswlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswdigit(  wint_t _C);
   int __cdecl _iswdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswxdigit(  wint_t _C);
   int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswspace(  wint_t _C);
   int __cdecl _iswspace_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswpunct(  wint_t _C);
   int __cdecl _iswpunct_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswblank(  wint_t _C);
   int __cdecl _iswblank_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswalnum(  wint_t _C);
   int __cdecl _iswalnum_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswprint(  wint_t _C);
   int __cdecl _iswprint_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswgraph(  wint_t _C);
   int __cdecl _iswgraph_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswcntrl(  wint_t _C);
   int __cdecl _iswcntrl_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswascii(  wint_t _C);

   wint_t __cdecl towupper(  wint_t _C);
   wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
   wint_t __cdecl towlower(  wint_t _C);
   wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
   int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);

   int __cdecl __iswcsymf(  wint_t _C);
   int __cdecl _iswcsymf_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl __iswcsym(  wint_t _C);
   int __cdecl _iswcsym_l(  wint_t _C,   _locale_t _Locale);


   int __cdecl isleadbyte(  int _C);
   int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 207 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"


#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"




















#line 231 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

#line 233 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"


 extern int __mb_cur_max;


#line 239 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
 int __cdecl ___mb_cur_max_func(void);
 int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 242 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"





 int __cdecl _chvalidator(  int _Ch,   int _Mask);



#line 252 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"




























#line 281 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"


 int __cdecl _chvalidator_l(  _locale_t,   int _Ch,   int _Mask);



#line 288 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
































#line 321 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"




























#line 350 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

#line 352 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"













#line 366 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
















#line 383 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

#line 385 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"


}
#line 389 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"

#line 391 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\ctype.h"
#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

















#line 50 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"






































#pragma once
#line 41 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"


extern "C" {
#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"

    
    
    

    
    
    

    

#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"
    
    
    #line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"
    

#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"
    

#line 66 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    


    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    















}
#line 251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"

#line 253 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\kernelspecs.h"
#line 82 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 86 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 94 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








#line 103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 108 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"










#line 119 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









#line 129 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 133 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"













#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 153 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"














#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"






















 
 typedef unsigned __int64 POINTER_64_INT;
 
  
 

#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"













#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"





#line 50 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"







#line 58 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"





#pragma once
#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"


extern "C" {
#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"

typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;







#line 99 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"

















#line 117 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"



    typedef __int64 INT_PTR, *PINT_PTR;
    typedef unsigned __int64 UINT_PTR, *PUINT_PTR;

    typedef __int64 LONG_PTR, *PLONG_PTR;
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;

    










#line 138 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"
#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"











typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;


__inline
unsigned long
HandleToULong(
    const void *h
    )
{
    return((unsigned long) (ULONG_PTR) h );
}

__inline
long
HandleToLong(
    const void *h
    )
{
    return((long) (LONG_PTR) h );
}

__inline
void *
ULongToHandle(
    const unsigned long h
    )
{
    return((void *) (UINT_PTR) h );
}


__inline
void *
LongToHandle(
    const long h
    )
{
    return((void *) (INT_PTR) h );
}


__inline
unsigned long
PtrToUlong(
    const void  *p
    )
{
    return((unsigned long) (ULONG_PTR) p );
}

__inline
unsigned int
PtrToUint(
    const void  *p
    )
{
    return((unsigned int) (UINT_PTR) p );
}

__inline
unsigned short
PtrToUshort(
    const void  *p
    )
{
    return((unsigned short) (unsigned long) (ULONG_PTR) p );
}

__inline
long
PtrToLong(
    const void  *p
    )
{
    return((long) (LONG_PTR) p );
}

__inline
int
PtrToInt(
    const void  *p
    )
{
    return((int) (INT_PTR) p );
}

__inline
short
PtrToShort(
    const void  *p
    )
{
    return((short) (long) (LONG_PTR) p );
}

__inline
void *
IntToPtr(
    const int i
    )

{
    return( (void *)(INT_PTR)i );
}

__inline
void *
UIntToPtr(
    const unsigned int ui
    )

{
    return( (void *)(UINT_PTR)ui );
}

__inline
void *
LongToPtr(
    const long l
    )

{
    return( (void *)(LONG_PTR)l );
}

__inline
void *
ULongToPtr(
    const unsigned long ul
    )

{
    return( (void *)(ULONG_PTR)ul );
}






__inline
void *
Ptr32ToPtr(
    const void * __ptr32 p
    )
{
    return((void *) (ULONG_PTR) (unsigned long) p);
}

__inline
void *
Handle32ToHandle(
    const void * __ptr32 h
    )
{
    return((void *) (LONG_PTR) (long) h);
}

__inline
void * __ptr32
PtrToPtr32(
    const void *p
    )
{
    return((void * __ptr32) (unsigned long) (ULONG_PTR) p);
}



#line 323 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"




































































#line 392 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;









































#line 459 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}
#line 494 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"

#line 496 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\basetsd.h"
#line 170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 184 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 185 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 192 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 193 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 200 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 201 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 211 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 215 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 222 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 223 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 238 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 246 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 247 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 255 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 262 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#line 270 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 271 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"







#line 279 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 280 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








#line 289 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 290 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

























#line 316 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"














#line 332 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"







typedef void *PVOID;
typedef void * __ptr64 PVOID64;








#line 350 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
















#line 373 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 387 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 388 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






typedef wchar_t WCHAR;    



#line 399 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef   WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef   PWSTR *PZPWSTR;
typedef   const PWSTR *PCZPWSTR;
typedef   WCHAR __unaligned *LPUWSTR, *PUWSTR;
typedef   const WCHAR *LPCWSTR, *PCWSTR;
typedef   PCWSTR *PZPCWSTR;
typedef   const PCWSTR *PCZPCWSTR;
typedef   const WCHAR __unaligned *LPCUWSTR, *PCUWSTR;

typedef   WCHAR *PZZWSTR;
typedef   const WCHAR *PCZZWSTR;
typedef   WCHAR __unaligned *PUZZWSTR;
typedef   const WCHAR __unaligned *PCUZZWSTR;

typedef  WCHAR *PNZWCH;
typedef  const WCHAR *PCNZWCH;
typedef  WCHAR __unaligned *PUNZWCH;
typedef  const WCHAR __unaligned *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR __unaligned *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;



















typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR __unaligned *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR __unaligned *PCUUCSSTR;

typedef UCSCHAR __unaligned *PUUCSCHAR;
typedef const UCSCHAR __unaligned *PCUUCSCHAR;

#line 464 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef   CHAR *NPSTR, *LPSTR, *PSTR;
typedef   PSTR *PZPSTR;
typedef   const PSTR *PCZPSTR;
typedef   const CHAR *LPCSTR, *PCSTR;
typedef   PCSTR *PZPCSTR;
typedef   const PCSTR *PCZPCSTR;

typedef   CHAR *PZZSTR;
typedef   const CHAR *PCZZSTR;

typedef  CHAR *PNZCH;
typedef  const CHAR *PCNZCH;

































typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 521 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;


#line 534 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    








typedef struct _PROCESSOR_NUMBER {
    WORD   Group;
    BYTE  Number;
    BYTE  Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD   Group;
    WORD   Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;








typedef void *HANDLE;


#line 575 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 577 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 581 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
typedef HANDLE *PHANDLE;







typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;










typedef   long HRESULT;
#line 604 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




    


#line 613 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









#line 623 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"













#line 637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




























typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      








typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;

#line 683 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
























#line 708 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;


















#line 744 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;



#line 755 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;



#line 773 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 783 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;









typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;






























































































































#line 939 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






extern "C" {
#line 947 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








unsigned char
__cdecl
_rotl8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotl16 (
      unsigned short Value,
      unsigned char Shift
    );

unsigned char
__cdecl
_rotr8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotr16 (
      unsigned short Value,
      unsigned char Shift
    );

#pragma intrinsic(_rotl8)
#pragma intrinsic(_rotl16)
#pragma intrinsic(_rotr8)
#pragma intrinsic(_rotr16)

#line 989 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








unsigned int
__cdecl
_rotl (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
      unsigned __int64 Value,
      int Shift
    );

unsigned int
__cdecl
_rotr (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
      unsigned __int64 Value,
      int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)

#line 1031 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


}
#line 1035 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;








typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"




















#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"




































#line 67 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"







#line 112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"







#line 121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 122 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"







#line 130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 131 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"







#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 140 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"

#line 142 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"














#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"


extern "C" {
#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"




#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"









































































#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  errno_t __cdecl _strset_s(  char * _Dst,   size_t _DstSize,   int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Dest)[_Size],   int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
  char * __cdecl _strset( char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 111 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Dest)[_Size],   const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
  char * __cdecl strcpy( char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 116 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size],   const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }

  char * __cdecl strcat( char *_Dest,  const char * _Source);
#line 120 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
  int     __cdecl strcmp(  const char * _Str1,   const char * _Str2);
  size_t  __cdecl strlen(  const char * _Str);
  


size_t  __cdecl strnlen(  const char * _Str,   size_t _MaxCount);

  static __inline


size_t  __cdecl strnlen_s(  const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 135 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  errno_t __cdecl memmove_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 138 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  void *  __cdecl memmove(  void * _Dst,   const void * _Src,   size_t _Size);




#line 145 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

   char *  __cdecl _strdup(  const char * _Src);



#line 151 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

   const char *  __cdecl strchr(  const char * _Str,   int _Val);
   int     __cdecl _stricmp(   const char * _Str1,    const char * _Str2);
   int     __cdecl _strcmpi(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricmp_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl strcoll(   const char * _Str1,    const  char * _Str2);
   int     __cdecl _strcoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _stricoll(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _strncoll  (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strncoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int     __cdecl _strnicoll (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   size_t  __cdecl strcspn(   const char * _Str,    const char * _Control);
    char *  __cdecl _strerror(  const char * _ErrMsg);
  errno_t __cdecl _strerror_s(  char * _Buf,   size_t _SizeInBytes,   const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
    char *  __cdecl strerror(  int);

  errno_t __cdecl strerror_s(  char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 172 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
  errno_t __cdecl _strlwr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
  char * __cdecl _strlwr( char *_String);
  errno_t __cdecl _strlwr_s_l(  char * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
  char * __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);

  errno_t __cdecl strncat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 182 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

  char * __cdecl strncat(  char *_Dest,   const char * _Source,   size_t _Count);
#pragma warning(pop)
   int     __cdecl strncmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);

  errno_t __cdecl strncpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 194 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
  char * __cdecl strncpy(    char *_Dest,   const char * _Source,   size_t _Count);
  errno_t __cdecl _strnset_s(  char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Dest)[_Size],   int _Val,   size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
  char * __cdecl _strnset(  char *_Dest,   int _Val,   size_t _Count);
   const char *  __cdecl strpbrk(  const char * _Str,   const char * _Control);
   const char *  __cdecl strrchr(  const char * _Str,   int _Ch);
 char *  __cdecl _strrev(  char * _Str);
   size_t  __cdecl strspn(  const char * _Str,   const char * _Control);
     const char *  __cdecl strstr(  const char * _Str,   const char * _SubStr);
    char *  __cdecl strtok(  char * _Str,   const char * _Delim);

   char *  __cdecl strtok_s(  char * _Str,   const char * _Delim,     char ** _Context);
#line 208 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
  errno_t __cdecl _strupr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
  char * __cdecl _strupr( char *_String);
  errno_t __cdecl _strupr_s_l(  char * _Str,   size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
  char * __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
  size_t  __cdecl strxfrm (    char * _Dst,   const char * _Src,   size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(    char * _Dst,   const char * _Src,   size_t _MaxCount,   _locale_t _Locale);


extern "C++" {


  inline char * __cdecl strchr(  char * _Str,   int _Ch)
        { return (char*)strchr((const char*)_Str, _Ch); }
  inline char * __cdecl strpbrk(  char * _Str,   const char * _Control)
        { return (char*)strpbrk((const char*)_Str, _Control); }
  inline char * __cdecl strrchr(  char * _Str,   int _Ch)
        { return (char*)strrchr((const char*)_Str, _Ch); }
    inline char * __cdecl strstr(  char * _Str,   const char * _SubStr)
        { return (char*)strstr((const char*)_Str, _SubStr); }
#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"





}
#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"






#line 244 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details."))  char * __cdecl strdup(  const char * _Src);



#line 250 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details."))  int __cdecl strcmpi(  const char * _Str1,   const char * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details."))  int __cdecl stricmp(  const char * _Str1,   const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details."))  char * __cdecl strlwr(  char * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details."))  int __cdecl strnicmp(  const char * _Str1,   const char * _Str,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details."))  char * __cdecl strnset(  char * _Str,   int _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details."))  char * __cdecl strrev(  char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details."))         char * __cdecl strset(  char * _Str,   int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details."))  char * __cdecl strupr(  char * _Str);

#line 262 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"









#line 272 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

   wchar_t * __cdecl _wcsdup(  const wchar_t * _Str);



#line 278 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"


  errno_t __cdecl wcscat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 282 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }

  wchar_t * __cdecl wcscat( wchar_t *_Dest,  const wchar_t * _Source);
#line 286 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
 

 const wchar_t * __cdecl wcschr(  const wchar_t * _Str, wchar_t _Ch);
   int __cdecl wcscmp(  const wchar_t * _Str1,   const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 293 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
  wchar_t * __cdecl wcscpy( wchar_t *_Dest,  const wchar_t * _Source);
   size_t __cdecl wcscspn(  const wchar_t * _Str,   const wchar_t * _Control);
   size_t __cdecl wcslen(  const wchar_t * _Str);
  


size_t __cdecl wcsnlen(  const wchar_t * _Src,   size_t _MaxCount);

  static __inline


size_t __cdecl wcsnlen_s(  const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 310 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  errno_t __cdecl wcsncat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 313 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
  wchar_t * __cdecl wcsncat(  wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
#pragma warning(pop)
   int __cdecl wcsncmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 322 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
  wchar_t * __cdecl wcsncpy(    wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
   const wchar_t * __cdecl wcspbrk(  const wchar_t * _Str,   const wchar_t * _Control);
   const wchar_t * __cdecl wcsrchr(  const wchar_t * _Str,   wchar_t _Ch);
   size_t __cdecl wcsspn(  const wchar_t * _Str,   const wchar_t * _Control);
   

 const wchar_t * __cdecl wcsstr(  const wchar_t * _Str,   const wchar_t * _SubStr);
    wchar_t * __cdecl wcstok(  wchar_t * _Str,   const wchar_t * _Delim);

   wchar_t * __cdecl wcstok_s(  wchar_t * _Str,   const wchar_t * _Delim,     wchar_t ** _Context);
#line 334 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
    wchar_t * __cdecl _wcserror(  int _ErrNum);
  errno_t __cdecl _wcserror_s(  wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
    wchar_t * __cdecl __wcserror(  const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(  wchar_t * _Buffer,   size_t _SizeInWords,   const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

   int __cdecl _wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Dst)[_Size], wchar_t _Val,   size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
  wchar_t * __cdecl _wcsnset(  wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(  wchar_t * _Str);
  errno_t __cdecl _wcsset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
  wchar_t * __cdecl _wcsset(  wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(  wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
  wchar_t * __cdecl _wcslwr( wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(  wchar_t * _Str,   size_t _SizeInWords,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
  wchar_t * __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(  wchar_t * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
  wchar_t * __cdecl _wcsupr( wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(  wchar_t * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
  wchar_t * __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
  size_t __cdecl wcsxfrm(    wchar_t * _Dst,   const wchar_t * _Src,   size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(    wchar_t * _Dst,   const wchar_t *_Src,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl wcscoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcscoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicoll_l(  const wchar_t * _Str1,   const wchar_t *_Str2,   _locale_t _Locale);
   int __cdecl _wcsncoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsncoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl _wcsnicoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);




extern "C++" {
 

        inline wchar_t * __cdecl wcschr(  wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
  inline wchar_t * __cdecl wcspbrk(  wchar_t *_Str,   const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
  inline wchar_t * __cdecl wcsrchr(  wchar_t *_Str,   wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
   

        inline wchar_t * __cdecl wcsstr(  wchar_t *_Str,   const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 394 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"
#line 395 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"






#line 402 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details."))  wchar_t * __cdecl wcsdup(  const wchar_t * _Str);



#line 408 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"





  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details."))  int __cdecl wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details."))  int __cdecl wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details."))  wchar_t * __cdecl wcsnset(  wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details."))  wchar_t * __cdecl wcsrev(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details."))  wchar_t * __cdecl wcsset(  wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details."))  wchar_t * __cdecl wcslwr(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details."))  wchar_t * __cdecl wcsupr(  wchar_t * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details."))  int __cdecl wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);

#line 423 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"


#line 426 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"








}
#line 436 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

#line 438 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\string.h"

#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"



__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}











#line 175 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"

















__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 202 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 203 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 205 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\guiddef.h"
#line 1082 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1091 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"











































































#pragma region Application Family




extern "C++" 
template <typename T, size_t N>
char (*RtlpNumberOf( __unaligned T (&)[N] ))[N];



#line 1183 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion











































#line 1228 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 1234 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









































#line 1276 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




























typedef
 
 
EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
      struct _EXCEPTION_RECORD *ExceptionRecord,
      PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;

















































































































































































































































































































































































































































































































































































































































































































































































































#line 2103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


























#line 2130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"











extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };

    
    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}













#line 2186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"















  


























































#line 2261 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
  
#line 2263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 2264 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD   ControlWord;
    WORD   StatusWord;
    BYTE  TagWord;
    BYTE  Reserved1;
    WORD   ErrorOpcode;
    DWORD ErrorOffset;
    WORD   ErrorSelector;
    WORD   Reserved2;
    DWORD DataOffset;
    WORD   DataSelector;
    WORD   Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];



    M128A XmmRegisters[16];
    BYTE  Reserved4[96];






#line 2314 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
      PXSAVE_AREA Area;



#line 2338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    PVOID Buffer;



#line 2344 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;













extern "C" {
#line 2375 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



























 
BOOLEAN
_bittest (
      LONG const *Base,
      LONG Offset
    );

BOOLEAN
_bittestandcomplement (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandreset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_bittest64 (
      LONG64 const *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandcomplement64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandreset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandreset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)










 
BOOLEAN
_BitScanForward (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanReverse (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanForward64 (
      DWORD *Index,
      DWORD64 Mask
    );

 
BOOLEAN
_BitScanReverse64 (
      DWORD *Index,
      DWORD64 Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)













































































































SHORT
_InterlockedIncrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

LONG
_InterlockedAnd (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedOr (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedXor (
       LONG volatile *Destination,
      LONG Value
    );

LONG64
_InterlockedAnd64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedOr64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedXor64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG
_InterlockedIncrement (
       LONG volatile *Addend
    );

LONG
_InterlockedDecrement (
       LONG volatile *Addend
    );

LONG
_InterlockedExchange (
       LONG volatile *Target,
      LONG Value
    );

LONG
_InterlockedExchangeAdd (
       LONG volatile *Addend,
      LONG Value
    );



__forceinline
LONG
_InterlockedAdd (
       LONG volatile *Addend,
      LONG Value
    )

{
    return _InterlockedExchangeAdd(Addend, Value) + Value;
}

#line 2728 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

LONG
_InterlockedCompareExchange (
       LONG volatile *Destination,
      LONG ExChange,
      LONG Comperand
    );

LONG64
_InterlockedIncrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedDecrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedExchange64 (
       LONG64 volatile *Target,
      LONG64 Value
    );

LONG64
_InterlockedExchangeAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    );



__forceinline
LONG64
_InterlockedAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    )

{
    return _InterlockedExchangeAdd64(Addend, Value) + Value;
}

#line 2772 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

LONG64
_InterlockedCompareExchange64 (
       LONG64 volatile *Destination,
      LONG64 ExChange,
      LONG64 Comperand
    );

BOOLEAN
_InterlockedCompareExchange128 (
       LONG64 volatile *Destination,
      LONG64 ExchangeHigh,
      LONG64 ExchangeLow,
      LONG64 *ComparandResult
    );

  PVOID
_InterlockedCompareExchangePointer (
      
#line 2793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
     PVOID volatile *Destination,
      PVOID Exchange,
      PVOID Comperand
    );

  PVOID
_InterlockedExchangePointer(
      
#line 2803 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
     PVOID volatile *Target,
      PVOID Value
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)



#pragma intrinsic(_InterlockedCompareExchange128)

#line 2832 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)






CHAR
_InterlockedExchange8 (
       CHAR volatile *Target,
      CHAR Value
    );

SHORT
_InterlockedExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)

#line 2857 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"










char
_InterlockedAnd8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedOr8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedXor8 (
       char volatile *Destination,
      char Value
    );

SHORT
_InterlockedAnd16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedOr16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedXor16(
       SHORT volatile *Destination,
      SHORT Value
    );

#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)

#line 2911 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)









void
_mm_clflush (
      void const *Address
    );

#pragma intrinsic(_mm_clflush)



void
_ReadWriteBarrier (
    void
    );

#pragma intrinsic(_ReadWriteBarrier)















void
__faststorefence (
    void
    );



void
_mm_lfence (
    void
    );

void
_mm_mfence (
    void
    );

void
_mm_sfence (
    void
    );

void
_mm_pause (
    void
    );

void
_mm_prefetch (
      CHAR const *a,
      int sel
    );

void
_m_prefetchw (
      volatile const void *Source
    );












#pragma intrinsic(__faststorefence)



#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)























unsigned int
_mm_getcsr (
    void
    );

void
_mm_setcsr (
      unsigned int MxCsr
    );

#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)







unsigned __int32
__getcallerseflags (
    void
    );

#pragma intrinsic(__getcallerseflags)







DWORD
__segmentlimit (
      DWORD Selector
    );

#pragma intrinsic(__segmentlimit)







DWORD64
__readpmc (
      DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)





void
__movsb (
      PBYTE  Destination,
      BYTE  const *Source,
      SIZE_T Count
    );

void
__movsw (
      PWORD   Destination,
      WORD   const *Source,
      SIZE_T Count
    );

void
__movsd (
      PDWORD Destination,
      DWORD const *Source,
      SIZE_T Count
    );

void
__movsq (
      PDWORD64 Destination,
      DWORD64 const *Source,
      SIZE_T Count
    );

#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)





void
__stosb (
      PBYTE  Destination,
      BYTE  Value,
      SIZE_T Count
    );

void
__stosw (
      PWORD   Destination,
      WORD   Value,
      SIZE_T Count
    );

void
__stosd (
      PDWORD Destination,
      DWORD Value,
      SIZE_T Count
    );

void
__stosq (
      PDWORD64 Destination,
      DWORD64 Value,
      SIZE_T Count
    );

#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)








LONGLONG
__mulh (
      LONG64 Multiplier,
      LONG64 Multiplicand
    );

ULONGLONG
__umulh (
      DWORD64 Multiplier,
      DWORD64 Multiplicand
    );

#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)







DWORD64
__popcnt64 (
      DWORD64 operand
    );



#pragma intrinsic(__popcnt64)

#line 3226 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








DWORD64
__shiftleft128 (
      DWORD64 LowPart,
      DWORD64 HighPart,
      BYTE  Shift
    );

DWORD64
__shiftright128 (
      DWORD64 LowPart,
      DWORD64 HighPart,
      BYTE  Shift
    );

#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)







LONG64
_mul128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      LONG64 *HighProduct
    );

#pragma intrinsic(_mul128)





DWORD64
_umul128 (
      DWORD64 Multiplier,
      DWORD64 Multiplicand,
      DWORD64 *HighProduct
    );

#pragma intrinsic(_umul128)

#line 3280 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

__forceinline
LONG64
MultiplyExtract128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      BYTE  Shift
    )

{

    LONG64 extractedProduct;
    LONG64 highProduct;
    LONG64 lowProduct;
    BOOLEAN negate;
    DWORD64 uhighProduct;
    DWORD64 ulowProduct;

    lowProduct = _mul128(Multiplier, Multiplicand, &highProduct);
    negate = 0;
    uhighProduct = (DWORD64)highProduct;
    ulowProduct = (DWORD64)lowProduct;
    if (highProduct < 0) {
        negate = 1;
        uhighProduct = (DWORD64)(-highProduct);
        ulowProduct = (DWORD64)(-lowProduct);
        if (ulowProduct != 0) {
            uhighProduct -= 1;
        }
    }

    extractedProduct = (LONG64)__shiftright128(ulowProduct, uhighProduct, Shift);
    if (negate != 0) {
        extractedProduct = -extractedProduct;
    }

    return extractedProduct;
}

__forceinline
DWORD64
UnsignedMultiplyExtract128 (
      DWORD64 Multiplier,
      DWORD64 Multiplicand,
      BYTE  Shift
    )

{

    DWORD64 extractedProduct;
    DWORD64 highProduct;
    DWORD64 lowProduct;

    lowProduct = _umul128(Multiplier, Multiplicand, &highProduct);
    extractedProduct = __shiftright128(lowProduct, highProduct, Shift);
    return extractedProduct;
}





BYTE 
__readgsbyte (
      DWORD Offset
    );

WORD  
__readgsword (
      DWORD Offset
    );

DWORD
__readgsdword (
      DWORD Offset
    );

DWORD64
__readgsqword (
      DWORD Offset
    );

void
__writegsbyte (
      DWORD Offset,
      BYTE  Data
    );

void
__writegsword (
      DWORD Offset,
      WORD   Data
    );

void
__writegsdword (
      DWORD Offset,
      DWORD Data
    );

void
__writegsqword (
      DWORD Offset,
      DWORD64 Data
    );

#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)



void
__incgsbyte (
      DWORD Offset
    );

void
__addgsbyte (
      DWORD Offset,
      BYTE  Value
    );

void
__incgsword (
      DWORD Offset
    );

void
__addgsword (
      DWORD Offset,
      WORD   Value
    );

void
__incgsdword (
      DWORD Offset
    );

void
__addgsdword (
      DWORD Offset,
      DWORD Value
    );

void
__incgsqword (
      DWORD Offset
    );

void
__addgsqword (
      DWORD Offset,
      DWORD64 Value
    );










#line 3451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 3453 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



}
#line 3458 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 3460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"













































#line 3506 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"












typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;




































typedef struct __declspec(align(16)) _CONTEXT {

    
    
    
    
    
    

    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;

    
    
    

    DWORD ContextFlags;
    DWORD MxCsr;

    
    
    

    WORD   SegCs;
    WORD   SegDs;
    WORD   SegEs;
    WORD   SegFs;
    WORD   SegGs;
    WORD   SegSs;
    DWORD EFlags;

    
    
    

    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;

    
    
    

    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;

    
    
    

    DWORD64 Rip;

    
    
    

    union {
        XMM_SAVE_AREA32 FltSave;
        struct {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        } ;
    } ;

    
    
    

    M128A VectorRegister[26];
    DWORD64 VectorControl;

    
    
    

    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;






typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, *PSCOPE_TABLE;




















typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY;

typedef struct _UNWIND_HISTORY_TABLE {
    DWORD Count;
    BYTE  LocalHint;
    BYTE  GlobalHint;
    BYTE  Search;
    BYTE  Once;
    DWORD64 LowAddress;
    DWORD64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE;





typedef
 
PRUNTIME_FUNCTION
GET_RUNTIME_FUNCTION_CALLBACK (
      DWORD64 ControlPc,
      PVOID Context
    );
typedef GET_RUNTIME_FUNCTION_CALLBACK *PGET_RUNTIME_FUNCTION_CALLBACK;

typedef
 
DWORD   
OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK (
      HANDLE Process,
      PVOID TableAddress,
      PDWORD Entries,
      PRUNTIME_FUNCTION* Functions
    );
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;








typedef struct _DISPATCHER_CONTEXT {
    DWORD64 ControlPc;
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    DWORD64 EstablisherFrame;
    DWORD64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    PUNWIND_HISTORY_TABLE HistoryTable;
    DWORD ScopeIndex;
    DWORD Fill0;
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;





struct _EXCEPTION_POINTERS;
typedef
LONG
(*PEXCEPTION_FILTER) (
    struct _EXCEPTION_POINTERS *ExceptionPointers,
    PVOID EstablisherFrame
    );

typedef
void
(*PTERMINATION_HANDLER) (
    BOOLEAN _abnormal_termination,
    PVOID EstablisherFrame
    );






typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    union {
        PM128A FloatingContext[16];
        struct {
            PM128A Xmm0;
            PM128A Xmm1;
            PM128A Xmm2;
            PM128A Xmm3;
            PM128A Xmm4;
            PM128A Xmm5;
            PM128A Xmm6;
            PM128A Xmm7;
            PM128A Xmm8;
            PM128A Xmm9;
            PM128A Xmm10;
            PM128A Xmm11;
            PM128A Xmm12;
            PM128A Xmm13;
            PM128A Xmm14;
            PM128A Xmm15;
        } ;
    } ;

    union {
        PDWORD64 IntegerContext[16];
        struct {
            PDWORD64 Rax;
            PDWORD64 Rcx;
            PDWORD64 Rdx;
            PDWORD64 Rbx;
            PDWORD64 Rsp;
            PDWORD64 Rbp;
            PDWORD64 Rsi;
            PDWORD64 Rdi;
            PDWORD64 R8;
            PDWORD64 R9;
            PDWORD64 R10;
            PDWORD64 R11;
            PDWORD64 R12;
            PDWORD64 R13;
            PDWORD64 R14;
            PDWORD64 R15;
        } ;
    } ;

} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;

#line 3834 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {
#line 4801 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


















#line 4820 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





void
__int2c (
    void
    );

#pragma intrinsic(__int2c)





#line 4837 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 4839 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"























































































#line 4927 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 4928 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


}
#line 4932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 6065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7267 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


























































































































































#line 7422 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
































































































































































































































































































































































































































































































































extern "C" {
#line 7936 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

__forceinline
CHAR
ReadAcquire8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
#line 8156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 8158 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





__forceinline
CHAR
ReadRaw8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
       LONG volatile *Destination,
      LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE 
ReadUCharAcquire (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharNoFence (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharRaw (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD  
ReadUShortAcquire (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortNoFence (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortRaw (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}















































































































#line 8674 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

__forceinline
PVOID
ReadPointerAcquire (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerRaw (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WritePointerRelease (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerRaw (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}

























#line 8772 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 8774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#line 8777 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


























#line 8804 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"
#line 34 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"
#line 8828 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"











typedef struct _WOW64_CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    WOW64_FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;

#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 8928 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef struct _WOW64_LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;






















typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;


















#line 9038 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     
typedef PVOID PCLAIMS_BLOB;     








































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 9161 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 9170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 9208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 9221 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
} SID, *PISID;
#line 9223 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





                                                



#line 9233 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;
#line 9254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;










































































































































































































































































































































































typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
    WinLocalAccountSid                          = 105,
    WinLocalAccountAndAdministratorSid          = 106,
    WinAccountProtectedUsersSid                 = 107,
} WELL_KNOWN_SID_TYPE;
































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;






















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;












































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;















typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

   
typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;             
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;



















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;


















































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
















typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone                    = 0x00000000,   

    
    
    
    
    
    AccessReasonAllowedAce                  = 0x00010000,   
    AccessReasonDeniedAce                   = 0x00020000,   

    AccessReasonAllowedParentAce            = 0x00030000,   
    AccessReasonDeniedParentAce             = 0x00040000,   

    AccessReasonNotGrantedByCape            = 0x00050000,   
    AccessReasonNotGrantedByParentCape      = 0x00060000,   

    AccessReasonNotGrantedToAppContainer    = 0x00070000,   

    AccessReasonMissingPrivilege            = 0x00100000,
    AccessReasonFromPrivilege               = 0x00200000,


    AccessReasonIntegrityLevel              = 0x00300000,

    AccessReasonOwnership                   = 0x00400000,

    AccessReasonNullDacl                    = 0x00500000,
    AccessReasonEmptyDacl                   = 0x00600000,

    AccessReasonNoSD                        = 0x00700000,
    AccessReasonNoGrant                     = 0x00800000,   

    AccessReasonTrustLabel                  = 0x00900000    
}
ACCESS_REASON_TYPE;

 












typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
























typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;      
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;  
    PACCESS_MASK GrantedAccess;
    PDWORD    AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;






























































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;












































#line 10707 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





















typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];
#line 10812 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;








typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE  PerUserPolicy[(((56)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;






























typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64             Version;
    PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;








typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;         
    DWORD   ValueLength;    
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;



































































typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {

    
    
    
    

    PWSTR   Name; 

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        PLONG64                                         pInt64;
        PDWORD64                                        pUint64;
        PWSTR                                           *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

    
    
    
    

    DWORD   Name;

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





















typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    
    
    

    WORD    Version;

    
    
    

    WORD    Reserved;

    DWORD   AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;





















typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;





















#line 11307 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









#line 11317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






















#line 11340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };


#line 11377 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };


#line 11399 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };



#line 11419 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;








typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {  
    DWORD UmsVersion;   
        PVOID UmsContext;   
        PVOID UmsCompletionList;   
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; 

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0   : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;               
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;             
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD  Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessReserved1Policy,
    ProcessSignaturePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;


typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
    };
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;




















































































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,  
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;






























typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE   Level;
    BYTE   Associativity;
    WORD   LineSize;
    DWORD  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE  Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE  Flags;
    BYTE  Reserved[21];
    WORD   GroupCount;
      GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE  Level;
    BYTE  Associativity;
    WORD   LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE  MaximumProcessorCount;
    BYTE  ActiveProcessorCount;
    BYTE  Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD   MaximumGroupCount;
    WORD   ActiveGroupCount;
    BYTE  Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

  struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;




























































































typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    
    DWORD64 EnabledFeatures;

    
    DWORD64 EnabledVolatileFeatures;

    
    DWORD Size;

    DWORD OptimizedSave : 1;

    
    XSTATE_FEATURE Features[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;

























#pragma region Desktop Family           





#line 12163 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion                       




















































































































































typedef struct _FILE_ID_128 {                               
    BYTE  Identifier[16];                                   
} FILE_ID_128, *PFILE_ID_128;                               





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;













































#line 12382 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"










typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;




























































































#line 12494 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _SCRUB_DATA_INPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    

    DWORD Flags;

    
    
    
    
    

    DWORD MaximumIos;

    
    
    

    DWORD Reserved[17];

    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {

    
    
    

    WORD   Size;

    
    
    

    WORD   Flags;

    
    
    

    WORD   NumberOfParityExtents;

    
    
    

    WORD   MaximumNumberOfParityExtents;

    
    
    

    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;

#line 12581 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _SCRUB_DATA_OUTPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    
    

    DWORD Flags;

    
    
    

    DWORD Status;

    
    
    
    

    ULONGLONG ErrorFileOffset;

    
    
    
    

    ULONGLONG ErrorLength;

    
    
    

    ULONGLONG NumberOfBytesRepaired;

    
    
    

    ULONGLONG NumberOfBytesFailed;

    
    
    

    ULONGLONG InternalFileReference;



    
    
    
    
    
    

    WORD   ResumeContextLength;

    
    
    
    
    

    WORD   ParityExtentDataOffset;

    
    
    

    DWORD Reserved[5];









#line 12672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;

#line 12691 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"












typedef enum _SharedVirtualDiskSupportType
{
    
    
    
    SharedVirtualDisksUnsupported = 0,

    
    
    
    SharedVirtualDisksSupported = 1
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{
    
    
    
    SharedVirtualDiskHandleStateNone = 0,

    
    
    
    
    SharedVirtualDiskHandleStateFileShared = 1,

    
    
    
    
    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
    
    
    
    
    SharedVirtualDiskSupportType SharedVirtualDiskSupport;

    
    
    
    
    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;







#line 12761 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
































extern "C" const GUID  GUID_MAX_POWER_SAVINGS;






extern "C" const GUID  GUID_MIN_POWER_SAVINGS;






extern "C" const GUID  GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID  NO_SUBGROUP_GUID;







extern "C" const GUID  ALL_POWERSCHEMES_GUID;




































extern "C" const GUID  GUID_POWERSCHEME_PERSONALITY;








extern "C" const GUID  GUID_ACTIVE_POWERSCHEME;














extern "C" const GUID  GUID_IDLE_RESILIENCY_SUBGROUP;





extern "C" const GUID  GUID_IDLE_RESILIENCY_PERIOD;






extern "C" const GUID  GUID_IDLE_RESILIENCY_PLATFORM_STATE;






extern "C" const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;












extern "C" const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;








extern "C" const GUID  GUID_VIDEO_SUBGROUP;





extern "C" const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID  GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID  GUID_MONITOR_POWER_ON;




extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern "C" const GUID  GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID  GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern "C" const GUID  GUID_DISK_SUBGROUP;





extern "C" const GUID  GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID  GUID_DISK_IDLE_TIMEOUT;








extern "C" const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;








extern "C" const GUID  GUID_SLEEP_SUBGROUP;







extern "C" const GUID  GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID  GUID_STANDBY_TIMEOUT;








extern "C" const GUID  GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_FASTS4_POLICY;








extern "C" const GUID  GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID  GUID_SYSTEM_AWAYMODE;





extern "C" const GUID  GUID_ALLOW_AWAYMODE;





extern "C" const GUID  GUID_VIDEO_FULLSCREEN_PLAYBACK;






extern "C" const GUID  GUID_AUDIO_PLAYBACK;







extern "C" const GUID  GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID  GUID_ALLOW_RTC_WAKE;







extern "C" const GUID  GUID_ALLOW_SYSTEM_REQUIRED;








extern "C" const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;


















extern "C" const GUID  GUID_POWERBUTTON_ACTION;





extern "C" const GUID  GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID  GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID  GUID_LIDCLOSE_ACTION;
extern "C" const GUID  GUID_LIDOPEN_POWERSTATE;








extern "C" const GUID  GUID_BATTERY_SUBGROUP;











extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;








extern "C" const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PROCESSOR_THROTTLE_POLICY;















extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID  GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID  GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 13368 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"










extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_MODE;
#line 13380 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"














extern "C" const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID  GUID_PROCESSOR_IDLE_DISABLE;








extern "C" const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM;








extern "C" const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK;








extern "C" const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;












extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;









extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern "C" const GUID  GUID_SYSTEM_COOLING_POLICY;









extern "C" const GUID  GUID_LOCK_CONSOLE_ON_WAKE;









extern "C" const GUID  GUID_DEVICE_IDLE_POLICY;




















extern "C" const GUID  GUID_ACDC_POWER_SOURCE;















extern "C" const GUID  GUID_LIDSWITCH_STATE_CHANGE;
















extern "C" const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID  GUID_GLOBAL_USER_PRESENCE;










extern "C" const GUID  GUID_SESSION_DISPLAY_STATUS;









extern "C" const GUID  GUID_SESSION_USER_PRESENCE;






extern "C" const GUID  GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID  GUID_APPLAUNCH_BUTTON;










extern "C" const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PCIEXPRESS_ASPM_POLICY;











extern "C" const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID  GUID_INTSTEER_SUBGROUP;
#line 13807 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_MODE;
#line 13811 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
#line 13815 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_TIME_UNPARK_TRIGGER;
#line 13819 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;









typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

















typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;




















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

#line 13937 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
	POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;  
    BOOLEAN Console;    
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;  
    DWORD LastInputTime; 
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId; 
    BOOLEAN Console; 
    BOOLEAN Locked; 
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {

    
    
    
    
    DWORD       Version;


    
    
    
    GUID        Guid;


    
    
    
    
    SYSTEM_POWER_CONDITION PowerCondition;

    
    
    
    DWORD       DataLength;

    
    
    
    BYTE    Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {

    
    
    
    
    LARGE_INTEGER       ActivationTime;

    
    
    
    DWORD               Flags;

    
    
    
    DWORD               ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer, 
    PlatformRoleSlate,             
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;

















#line 14232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
#line 14247 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



typedef struct {
    DWORD   Frequency;
    DWORD   Flags;
    DWORD   PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE  PromotePercent;
    BYTE  DemotePercent;
    BYTE  StateType;
    BYTE  Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;            
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;            
    DWORD Power;                
    BYTE  PercentFrequency;
    BYTE  IncreaseLevel;        
    BYTE  DecreaseLevel;        
    BYTE  Type;                 
    DWORD IncreaseTime;         
    DWORD DecreaseTime;         
    DWORD64 Control;            
    DWORD64 Status;             
    DWORD HitCount;
    DWORD Reserved1;            
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;   
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;     
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;




























































extern "C" const GUID  PPM_PERFSTATE_CHANGE_GUID;
#line 14469 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
#line 14473 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATE_CHANGE_GUID;
#line 14477 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATES_DATA_GUID;
#line 14481 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATES_DATA_GUID;
#line 14485 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_GUID;
#line 14489 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_EX_GUID;
#line 14493 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_THERMALCONSTRAINT_GUID;
#line 14497 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFMON_PERFSTATE_GUID;
#line 14501 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


extern "C" const GUID  PPM_THERMAL_POLICY_CHANGE_GUID;
#line 14505 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable:4121)

typedef struct {
    BYTE  Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
































typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;








typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    BYTE                    DynamicThrottle;
    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    DWORD                   Spare3;

    
    
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;










typedef struct {
    DWORD TimeCheck;
    BYTE  DemotePercent;
    BYTE  PromotePercent;
    BYTE  Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD   Revision;
    union {
        WORD   AsWORD  ;
        struct {
            WORD   AllowScaling : 1;
            WORD   Disabled : 1;
            WORD   Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;














typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       DisableCStates:1;
    DWORD                       Reserved:31;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE  MaxThrottle;
    BYTE  MinThrottle;
    BYTE  BusyAdjThreshold;
    union {
        BYTE  Spare;
        union {
            BYTE  AsBYTE ;
            struct {
                BYTE  NoDomainAccounting : 1;
                BYTE  IncreasePolicy: 2;
                BYTE  DecreasePolicy: 2;
                BYTE  Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;




#line 14803 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
    BYTE                ProcessorMaxThrottle;
    BOOLEAN             FastSystemS4;
    BOOLEAN             Hiberboot;
    BOOLEAN             WakeAlarmPresent;
    BOOLEAN             AoAc;
#line 14809 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    
    BOOLEAN             DiskSpinDown;
    BYTE                spare3[8];

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[3];

    BYTE                Tag;

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;










#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"
#line 34 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack4.h"
#line 14855 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"







#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"
#line 14863 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"









#line 14873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 14985 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 14986 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






















































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;






typedef IMAGE_OPTIONAL_HEADER64             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64            PIMAGE_OPTIONAL_HEADER;





#line 15170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;


typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64                 PIMAGE_NT_HEADERS;



#line 15195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



































































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
   
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;         
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  

    
    DWORD   NumberOfSections; 
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack2.h"
#line 15391 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 15392 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE     ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    LONG    SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX __unaligned *PIMAGE_SYMBOL_EX;
































































































#line 15529 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 15534 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 15540 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 15545 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 15549 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#line 15552 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 15554 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF __unaligned *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 15565 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
	BYTE    bReserved;
	SHORT   HighNumber;                     
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE  rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD   WeakDefaultSymIndex;                       
        DWORD   WeakSearchType;
        BYTE    rgbReserved[12];
    } Sym;
    struct {
        BYTE    Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
        BYTE    bReserved;
        SHORT   HighNumber;                     
        BYTE    rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE  rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE  rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX __unaligned *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;






















typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    } ;
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned *PIMAGE_RELOCATION;




























































































































                                                
                                                
                                                
                                                




















































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned *PIMAGE_LINENUMBER;


#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 16060 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 16061 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned * PIMAGE_BASE_RELOCATION;









































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack8.h"


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack8.h"
#line 34 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\pshpack8.h"
#line 16157 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 16169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;         
    ULONGLONG AddressOfCallBacks;     
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;




typedef IMAGE_THUNK_DATA64              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY64           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64          PIMAGE_TLS_DIRECTORY;








#line 16252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    } ;
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;             
            DWORD ReservedAttributes : 31;
        };
    } Attributes;

    DWORD DllNameRVA;                       
    DWORD ModuleHandleRVA;                  
    DWORD ImportAddressTableRVA;            
    DWORD ImportNameTableRVA;               
    DWORD BoundImportAddressTableRVA;       
    DWORD UnloadInformationTableRVA;        
    DWORD TimeDateStamp;                    
                                            

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD   Name;
        WORD    Id;
    } ;
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD   Size;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;                
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    DWORD   EditList;                       
    DWORD   SecurityCookie;                 
    DWORD   SEHandlerTable;                 
    DWORD   SEHandlerCount;
    DWORD   GuardCFCheckFunctionPointer;    
    DWORD   Reserved2;
    DWORD   GuardCFFunctionTable;           
    DWORD   GuardCFFunctionCount;
    DWORD   GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD      Size;
    DWORD      TimeDateStamp;
    WORD       MajorVersion;
    WORD       MinorVersion;
    DWORD      GlobalFlagsClear;
    DWORD      GlobalFlagsSet;
    DWORD      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;             
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD      ProcessHeapFlags;
    WORD       CSDVersion;
    WORD       Reserved1;
    ULONGLONG  EditList;                    
    ULONGLONG  SecurityCookie;              
    ULONGLONG  SEHandlerTable;              
    ULONGLONG  SEHandlerCount;
    ULONGLONG  GuardCFCheckFunctionPointer; 
    ULONGLONG  Reserved2;
    ULONGLONG  GuardCFFunctionTable;        
    ULONGLONG  GuardCFFunctionCount;
    DWORD      GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;


typedef IMAGE_LOAD_CONFIG_DIRECTORY64     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64    PIMAGE_LOAD_CONFIG_DIRECTORY;



#line 16475 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

















typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 16554 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 16559 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




#line 16564 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 16569 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;







#line 16720 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\users\\franta\\p4\\external\\sdk\\windows8.1\\include\\shared\\poppack.h"
#line 16748 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    } ;

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =5,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,  
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;

    
    IMAGE_DATA_DIRECTORY    MetaData;
    DWORD                   Flags;

    
    
    union {
        DWORD               EntryPointToken;
        DWORD               EntryPointRVA;
    } ;

    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 16870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apiset.h"








































































































#line 106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apiset.h"



#line 110 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apiset.h"









































































































































#line 248 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apiset.h"
#line 16876 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"







#pragma region Application Family






__declspec(dllimport)
 
WORD  
__stdcall
RtlCaptureStackBackTrace(
      DWORD FramesToSkip,
      DWORD FramesToCapture,
      PVOID * BackTrace,
      PDWORD BackTraceHash
    );


#line 16903 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 16905 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
      PCONTEXT ContextRecord
    );


#line 16923 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 16925 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion



#pragma region Application Family



__declspec(dllimport)
void
__stdcall
RtlUnwind(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue
    );


#line 16945 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion




#pragma region Desktop Family



__declspec(dllimport)
BOOLEAN
__cdecl
RtlAddFunctionTable(
      PRUNTIME_FUNCTION FunctionTable,
      DWORD EntryCount,
      DWORD64 BaseAddress
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlDeleteFunctionTable(
      PRUNTIME_FUNCTION FunctionTable
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlInstallFunctionTableCallback(
      DWORD64 TableIdentifier,
      DWORD64 BaseAddress,
      DWORD Length,
      PGET_RUNTIME_FUNCTION_CALLBACK Callback,
      PVOID Context,
      PCWSTR OutOfProcessCallbackDll
    );







__declspec(dllimport)
DWORD   
__stdcall
RtlAddGrowableFunctionTable(
      PVOID * DynamicTable,
      PRUNTIME_FUNCTION FunctionTable,
      DWORD EntryCount,
      DWORD MaximumEntryCount,
      ULONG_PTR RangeBase,
      ULONG_PTR RangeEnd
    );


__declspec(dllimport)
void
__stdcall
RtlGrowFunctionTable(
      PVOID DynamicTable,
      DWORD NewEntryCount
    );


__declspec(dllimport)
void
__stdcall
RtlDeleteGrowableFunctionTable(
      PVOID DynamicTable
    );


#line 17021 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 17025 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
PRUNTIME_FUNCTION
__stdcall
RtlLookupFunctionEntry(
      DWORD64 ControlPc,
      PDWORD64 ImageBase,
      PUNWIND_HISTORY_TABLE HistoryTable
    );


#line 17042 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__cdecl
RtlRestoreContext(
      PCONTEXT ContextRecord,
      struct _EXCEPTION_RECORD * ExceptionRecord
    );


#line 17058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
RtlUnwindEx(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue,
      PCONTEXT ContextRecord,
      PUNWIND_HISTORY_TABLE HistoryTable
    );


#line 17078 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
PEXCEPTION_ROUTINE
__stdcall
RtlVirtualUnwind(
      DWORD HandlerType,
      DWORD64 ImageBase,
      DWORD64 ControlPc,
      PRUNTIME_FUNCTION FunctionEntry,
      PCONTEXT ContextRecord,
      PVOID * HandlerData,
      PDWORD64 EstablisherFrame,
      PKNONVOLATILE_CONTEXT_POINTERS ContextPointers
    );


#line 17100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion

#line 17103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





























































































































































#line 17261 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




































































































#line 17362 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

























#line 17388 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#pragma region Application Family






__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
      PVOID PcValue,
      PVOID * BaseOfImage
    );


#line 17407 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17409 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion


#pragma region Desktop Family








 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
      const void * Source1,
      const void * Source2,
      SIZE_T Length
    );


#line 17433 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17435 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17437 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion










#line 17449 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
















#pragma warning(push)
#pragma warning(disable:4324)   

typedef struct __declspec(align(16)) _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;

#pragma warning(pop)





#line 17479 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



typedef union __declspec(align(16)) _SLIST_HEADER {
    struct {  
        ULONGLONG Alignment;
        ULONGLONG Region;
    } ;
    struct {  
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60; 
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;























#line 17518 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17520 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
      PSLIST_HEADER ListHead
    );

 
__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
      const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
      PSLIST_HEADER ListHead
    );

#line 17580 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion


























typedef union _RTL_RUN_ONCE {       
    PVOID Ptr;                      
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     

#line 17612 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _RTL_BARRIER {                       
            DWORD Reserved1;                        
            DWORD Reserved2;                        
            ULONG_PTR Reserved3[2];                 
            DWORD Reserved4;                        
            DWORD Reserved5;                        
} RTL_BARRIER, *PRTL_BARRIER;                       































__declspec(noreturn)
void
__fastfail(
      unsigned int Code
    );

#pragma intrinsic(__fastfail)

#line 17660 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"















#pragma region Desktop Family


__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
      DWORD TagBase,
      DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
#line 17689 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#line 17690 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion






















































#line 17746 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"











__forceinline
PVOID
RtlSecureZeroMemory(
      PVOID ptr,
      SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;



    __stosb((PBYTE )((DWORD64)vptr), 0, cnt);



















#line 17789 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    return ptr;
}

#line 17794 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"




















typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 17859 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 17895 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"













































#pragma region Desktop Family


















__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      DWORD TypeMask,
      BYTE  Condition
    );

#line 17969 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17971 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 17973 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
       DWORD  OSMajorVersion,
       DWORD  OSMinorVersion,
       DWORD  SpMajorVersion,
       DWORD  SpMinorVersion,
      PDWORD ReturnedProductType
    );

#line 17996 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



#line 18000 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion



typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,              
    UmsThreadAffinity,              
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef
 
void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
      RTL_UMS_SCHEDULER_REASON Reason,
      ULONG_PTR ActivationPayload,
      PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
































#line 18065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 18067 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"










#line 18078 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"






#pragma region Desktop Family








__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
      const void *Buffer,
      size_t Size,
      DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
      const void *Buffer,
      size_t Size,
      ULONGLONG InitialCrc
    );



#line 18114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma endregion



#line 18119 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD   CreatorBackTraceIndexHigh;
    WORD   SpareWORD  ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




















#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {                            
        PVOID Ptr;                                       
} RTL_SRWLOCK, *PRTL_SRWLOCK;                            

typedef struct _RTL_CONDITION_VARIABLE {                    
        PVOID Ptr;                                       
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;      


typedef
void
(__stdcall *PAPCFUNC)(
      ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption


} HEAP_INFORMATION_CLASS;













typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
     PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
      PVOID Addr,
      SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    RunlevelInformationInActivationContext                  = 5,
    CompatibilityInformationInActivationContext             = 6,
    ActivationContextManifestResourceName                   = 7,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL  RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable:4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD   OsCount;
    WORD   MitigationExist;
    WORD   OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD   Size;
    BYTE  Version;
    BYTE  HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;














































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)
#line 18482 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
#pragma warning(disable : 4200) 

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD           ulSize;
    WCHAR           szLogicalLogFile[256];        
    DWORD           ulNumRecords;
    EVENTLOGRECORD  pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD               ulOffsets[];           
};

#line 18508 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#pragma warning(pop)


#line 18514 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





















































                                                    


                                                    


                                                    


                                                    
                                                    






























































                                                      


















                                            






























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;

































































typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;

#line 19058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"





extern "C" {
#line 19065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ktmtypes.h"






















extern "C" {
#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ktmtypes.h"


typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

















































typedef ULONG NOTIFICATION_MASK;






















































typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID   EnlistmentId;
    UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID  UOW;
    GUID  TmIdentity;
    ULONG BufferLength;
    
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG              VersionMajor;
    ULONG              VersionMinor;
    ULONG              NumProtocols;
    ULONG              Unused;        
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW                UOW;
    GUID               TmIdentity;
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    ULONG              Timeout;
    WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID    ProtocolId;
      ULONG StaticInfoLength;
    ULONG              TransactionIdInfoLength; 
    ULONG              Unused1;        
    ULONG              Unused2;        
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}
#line 206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ktmtypes.h"

#line 208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ktmtypes.h"
#line 19068 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"








































































































































































typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID    TransactionId;
    DWORD   State;
    DWORD   Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID    TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
      WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD              IsolationLevel;
    DWORD              IsolationFlags;
    LARGE_INTEGER      Timeout;
    DWORD              Outcome;
    DWORD              DescriptionLength;
    WCHAR              Description[1];            

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID   EnlistmentId;
    GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD                       NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID    ResourceManagerId;
    DWORD   DescriptionLength;
    WCHAR   Description[1];            
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE    IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation, 
    TransactionDTCPrivateInformation 
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID    EnlistmentId;
    GUID    TransactionId;
    GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID   CrmTransactionManagerId;
    GUID   CrmResourceManagerId;
    GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW    UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD   NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;









typedef struct _KTMOBJECT_CURSOR {

    
    
    

    GUID    LastQuery;

    
    
    

    DWORD   ObjectIdCount;

    
    
    

    GUID    ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}
#line 19448 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 19450 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
typedef DWORD TP_VERSION, *PTP_VERSION; 

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL; 

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP; 

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
      PVOID ObjectContext,
      PVOID CleanupContext
    );








typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION                         Version;
    PTP_POOL                           Pool;
    PTP_CLEANUP_GROUP                  CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
    PVOID                              RaceDll;
    struct _ACTIVATION_CONTEXT        *ActivationContext;
    PTP_SIMPLE_CALLBACK                FinalizationCallback;
    union {
        DWORD                          Flags;
        struct {
            DWORD                      LongFunction :  1;
            DWORD                      Persistent   :  1;
            DWORD                      Private      : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY               CallbackPriority;
    DWORD                              Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;























#line 19533 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"



__forceinline
void
TpInitializeCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;





#line 19552 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);

#line 19567 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

}

__forceinline
void
TpSetCallbackThreadpool(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_POOL             Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              CallbackEnviron,
          PTP_CLEANUP_GROUP                 CleanupGroup,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
       PTP_CALLBACK_ENVIRON CallbackEnviron,
      struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1; 
}

__forceinline
void
TpSetCallbackLongFunction(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PVOID                DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_SIMPLE_CALLBACK  FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}

#line 19653 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

__forceinline
void
TpSetCallbackPersistent(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    
    
    
    
    

    (CallbackEnviron);
}

#line 19680 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WORK              Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_TIMER             Timer
    );

typedef DWORD    TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WAIT              Wait,
             TP_WAIT_RESULT        WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;



__forceinline
struct _TEB *
NtCurrentTeb (
    void
    )

{
    return (struct _TEB *)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->Self)));
}

__forceinline
PVOID
GetCurrentFiber (
    void
    )

{

    return (PVOID)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->FiberData)));
}

__forceinline
PVOID
GetFiberData (
    void
    )

{

    return *(PVOID *)GetCurrentFiber();
}

#line 19746 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"
































#line 19779 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"












#line 19792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"













#line 19806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


}
#line 19810 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#pragma warning(pop)



#line 19817 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"

#line 19819 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnt.h"


#line 183 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#line 184 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"


typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;





#line 195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"



#line 199 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"

#line 201 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"








typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;



typedef INT_PTR ( __stdcall *FARPROC)();
typedef INT_PTR ( __stdcall *NEARPROC)();
typedef INT_PTR (__stdcall *PROC)();




#line 226 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"




#line 231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"




#line 236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"

typedef WORD                ATOM;   

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;


#line 258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
#line 272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"

#line 274 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"
#pragma endregion

#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\minwindef.h"

#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"







#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"



#pragma region Application Family


struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;

#line 43 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion












#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#pragma region Application Family




typedef void * HGDIOBJ;


#line 67 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#line 68 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"


struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;
#line 72 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;
#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 79 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

struct HDC__{int unused;}; typedef struct HDC__ *HDC;
#line 82 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;          
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;
#line 88 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;
#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;
#line 96 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"


struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#line 102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion




#pragma region Application Family


struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;

#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion

#line 116 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#pragma region Desktop Family


struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;

#line 123 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion

#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#pragma region Application Family



typedef HICON HCURSOR;      


#line 135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

typedef DWORD   COLORREF;

#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion

#pragma region Desktop Family


typedef DWORD   *LPCOLORREF;



#line 149 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion

#pragma region Application Family


typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;

#line 207 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"
#pragma endregion

































}
#line 243 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#line 245 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\windef.h"

#line 165 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"















#pragma once
#line 18 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma warning(push)
#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma warning(disable:4001) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
















#line 18 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 19 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 26 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 27 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"








#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"







#line 53 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 68 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 85 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"






#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 93 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"

#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\apisetcconv.h"
#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"







#pragma once




#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 17 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

#pragma warning(push)
#line 20 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 24 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"





extern "C" {
#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"














typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;


















typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      CHAR   cFileName[ 260 ];
      CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      WCHAR  cFileName[ 260 ];
      WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"



typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
#line 163 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo, 
    FileAlignmentInfo,    
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
#line 194 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
#line 197 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
         DWORD dwErrorCode,
         DWORD dwNumberOfBytesTransfered,
      LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;








typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;














typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
#line 360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

























































}
#line 419 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"





#pragma warning(pop)





#line 431 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"
#line 432 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

#line 434 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\minwinbase.h"

#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"




















#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"


extern "C" {
#line 40 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"




#pragma region Desktop Family





__declspec(dllimport)
 
LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)
 
LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );






#line 73 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
         LPWCH NewEnvironment
    );





__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
         LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
         LPWCH penv
    );





#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
      DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
      DWORD nStdHandle,
      HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
      DWORD nStdHandle,
      HANDLE hHandle,
      PHANDLE phPrevValue
    );


#line 136 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"



#line 140 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"
#pragma endregion

#pragma region Application Family





__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );





#line 167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"



#line 171 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableA(
      LPCSTR lpName,
      LPSTR lpBuffer,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableW(
      LPCWSTR lpName,
      LPWSTR lpBuffer,
      DWORD nSize
    );





#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpValue
    );





#line 226 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsA(
      LPCSTR lpSrc,
      LPSTR lpDst,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsW(
      LPCWSTR lpSrc,
      LPWSTR lpDst,
      DWORD nSize
    );





#line 252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
      LPCWSTR lpPathName
    );





#line 272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );





#line 296 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
      LPCWSTR lpPath,
      LPCWSTR lpFileName,
      LPCWSTR lpExtension,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
      LPWSTR * lpFilePart
    );






#line 315 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"








__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
      LPCSTR lpPath,
      LPCSTR lpFileName,
      LPCSTR lpExtension,
      DWORD nBufferLength,
      LPSTR lpBuffer,
      LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
      LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
      LPCWSTR ExeName
    );





#line 358 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

#line 360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

#line 362 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"



#line 366 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"
#pragma endregion





}
#line 374 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"

#line 376 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processenv.h"


#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
 
 












#pragma once
#line 17 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"





















#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"


extern "C" {
#line 43 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#pragma region Application Family
















#line 62 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
      const FILETIME * lpFileTime1,
      const FILETIME * lpFileTime2
    );


#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
      LPCSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
      LPCWSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );





#line 111 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
      LPCSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );





#line 150 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
      DWORD dwFlags,
      LPCWSTR lpDeviceName,
      LPCWSTR lpTargetPath
    );






#line 166 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
      LPCWSTR lpFileName
    );





#line 191 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 193 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
      const FILETIME * lpFileTime,
      LPFILETIME lpLocalFileTime
    );


#line 221 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
FindClose(
      HANDLE hFindFile
    );


#line 239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
      HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
      LPCSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
      LPCWSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );





#line 276 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
      LPCSTR lpFileName,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
      LPCWSTR lpFileName,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
      LPCSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
      LPCWSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );





#line 338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 342 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
      HANDLE hChangeHandle
    );


#line 370 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 397 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 399 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
      HANDLE hFindVolume,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
      HANDLE hFindVolume
    );


#line 428 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
      HANDLE hFile
    );


#line 443 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
      LPCSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
      LPCWSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );





#line 476 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 478 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
      LPCSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
      LPCWSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );





#line 509 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 511 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
      LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
      LPCWSTR lpRootPathName
    );





#line 536 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
      LPCWSTR lpFileName
    );





#line 556 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

#line 574 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
      LPCSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
      LPCWSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );





#line 603 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
      HANDLE hFile,
      LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
      HANDLE hFile,
      LPDWORD lpFileSizeHigh
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
      HANDLE hFile,
      PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
      HANDLE hFile,
      LPFILETIME lpCreationTime,
      LPFILETIME lpLastAccessTime,
      LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
      HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
      HANDLE hFile,
      LPSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
      HANDLE hFile,
      LPWSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );





#line 698 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 700 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameA(
      LPCSTR lpFileName,
      DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR * lpFilePart
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameW(
      LPCWSTR lpFileName,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR * lpFilePart
    );





#line 728 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameA(
      LPCSTR lpszShortPath,
      LPSTR lpszLongPath,
      DWORD cchBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameW(
      LPCWSTR lpszShortPath,
      LPWSTR lpszLongPath,
      DWORD cchBuffer
    );





#line 775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameW(
      LPCWSTR lpszLongPath,
      LPWSTR lpszShortPath,
      DWORD cchBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
      LPCWSTR lpPathName,
      LPCWSTR lpPrefixString,
      UINT uUnique,
      LPWSTR lpTempFileName
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
      HANDLE hFile,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );


#line 825 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
      LPCWSTR lpRootPathName,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
      LPCWSTR lpszFileName,
      LPWSTR lpszVolumePathName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
      const FILETIME * lpLocalFileTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh
    );


#line 881 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
      HANDLE hFile,
      DWORD dwFlags,
      DWORD dwReserved,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh,
      LPOVERLAPPED lpOverlapped
    );


#line 901 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
      LPCWSTR lpDeviceName,
      LPWSTR lpTargetPath,
      DWORD ucchMax
    );






#line 922 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFile(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPDWORD lpNumberOfBytesRead,
      LPOVERLAPPED lpOverlapped
    );


#line 942 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFileEx(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadFileScatter(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToRead,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 975 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
      LPCWSTR lpPathName
    );





#line 1000 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
      HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
      LPCSTR lpFileName,
      DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
      LPCWSTR lpFileName,
      DWORD dwFileAttributes
    );





#line 1030 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"




__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
      HANDLE hFile,
      FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
      DWORD dwBufferSize
    );


#line 1046 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1048 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
      HANDLE hFile,
      LONG lDistanceToMove,
      PLONG lpDistanceToMoveHigh,
      DWORD dwMoveMethod
    );


#line 1066 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
      HANDLE hFile,
      LARGE_INTEGER liDistanceToMove,
      PLARGE_INTEGER lpNewFilePointer,
      DWORD dwMoveMethod
    );


#line 1084 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
      HANDLE hFile,
      const FILETIME * lpCreationTime,
      const FILETIME * lpLastAccessTime,
      const FILETIME * lpLastWriteTime
    );





__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
      HANDLE hFile,
      LONGLONG ValidDataLength
    );


#line 1114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh
    );


#line 1128 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
      HANDLE hFile,
      DWORD dwReserved,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpNumberOfBytesWritten,
      LPOVERLAPPED lpOverlapped
    );


#line 1159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 1190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
      LPCWSTR lpszVolumeName,
         LPWCH lpszVolumePathNames,
      DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );






#line 1249 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;   
    DWORD dwFileAttributes;
    DWORD dwFileFlags;   
    DWORD dwSecurityQosFlags;	
    LPSECURITY_ATTRIBUTES lpSecurityAttributes; 
    HANDLE hTemplateFile;      
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      DWORD dwCreationDisposition,
      LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );


#line 1282 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1284 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#line 1287 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"







#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
      HANDLE FileHandle,
      PUCHAR OverlappedRangeStart,
      ULONG Length
    );


#line 1312 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1314 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
      LPCSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
      LPCWSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );





#line 1344 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1346 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1348 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#pragma endregion

#line 1351 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"







}
#line 1360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"

#line 1362 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fileapi.h"
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"



















#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"






#pragma region Application Family





__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );

#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"

#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );


#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
      LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
      LPCWSTR lpOutputString
    );





#line 101 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"

#line 103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
      DWORD dwProcessId,
      DWORD dwThreadId,
      DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
      LPDEBUG_EVENT lpDebugEvent,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
      DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
      DWORD dwProcessId
    );




  
__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
      HANDLE hProcess,
      PBOOL pbDebuggerPresent
    );
  
  
#line 162 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"

#line 164 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"

#line 166 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"
#pragma endregion






}
#line 175 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"


#line 178 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\debugapi.h"


#line 40 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"
















#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"


extern "C" {
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"

#pragma region Application Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodePointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodePointer(
      PVOID Ptr
    );


#line 58 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
BOOL
__stdcall
Beep(
      DWORD dwFreq,
      DWORD dwDuration
    );


#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"
#pragma endregion


}
#line 97 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"

#line 99 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\utilapiset.h"
#line 41 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"
















#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"


extern "C" {
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"






#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
      HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
      HANDLE hSourceProcessHandle,
      HANDLE hSourceHandle,
      HANDLE hTargetProcessHandle,
     LPHANDLE lpTargetHandle,
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwOptions
    );


#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
      HANDLE hObject,
      LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
      HANDLE hObject,
      DWORD dwMask,
      DWORD dwFlags
    );


#line 96 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"
#pragma endregion


}
#line 101 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"

#line 103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\handleapi.h"
#line 42 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"


















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"






#pragma region Desktop Family







typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
      struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;





#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)

void
__stdcall
RaiseException(
      DWORD dwExceptionCode,
      DWORD dwExceptionFlags,
      DWORD nNumberOfArguments,
      const ULONG_PTR * lpArguments
    );


#line 82 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
      struct _EXCEPTION_POINTERS * ExceptionInfo
    );


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
      LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );


#line 106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family





__declspec(dllimport)
   
DWORD
__stdcall
GetLastError(
    void
    );


#line 124 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"

__declspec(dllimport)
void
__stdcall
SetLastError(
      DWORD dwErrCode
    );


#line 134 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );


#line 152 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"

__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
      UINT uMode
    );


#line 162 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion





#pragma region Desktop Family






__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredExceptionHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
      PVOID Handle
    );


__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredContinueHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
      PVOID Handle
    );


#line 212 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"























#line 236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"

#line 239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"

#line 241 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"
#pragma endregion







}
#line 251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"

#line 253 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\errhandlingapi.h"


#line 43 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"


















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"






#pragma region Application Family








#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"

__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
      PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
      DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
      DWORD dwFlsIndex,
      PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
      DWORD dwFlsIndex
    );


#line 89 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"

#line 91 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"
#pragma endregion





#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );


#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"

#line 115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"
#pragma endregion







}
#line 125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"

#line 127 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\fibersapi.h"


#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"
 
 










#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"



















#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"








__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
      PHANDLE hReadPipe,
      PHANDLE hWritePipe,
      LPSECURITY_ATTRIBUTES lpPipeAttributes,
      DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
      HANDLE hNamedPipe,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
      HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
      HANDLE hNamedPipe,
      LPDWORD lpMode,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpBuffer,
      DWORD nBufferSize,
      LPDWORD lpBytesRead,
      LPDWORD lpTotalBytesAvail,
      LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
      LPCWSTR lpName,
      DWORD dwOpenMode,
      DWORD dwPipeMode,
      DWORD nMaxInstances,
      DWORD nOutBufferSize,
      DWORD nInBufferSize,
      DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
      LPCWSTR lpNamedPipeName,
      DWORD nTimeOut
    );









__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
      HANDLE Pipe,
      LPWSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );


#line 159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"





#line 165 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"






__declspec(dllimport)
 
BOOL
__stdcall
ImpersonateNamedPipeClient(
      HANDLE hNamedPipe
    );
                               

#line 181 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"



}
#line 186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"

#line 188 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namedpipeapi.h"


#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"
















#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"


extern "C" {
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
      LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
      LARGE_INTEGER * lpFrequency
    );



}
#line 58 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"

#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\profileapi.h"
#line 46 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"



















#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"


extern "C" {
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"

#pragma region Desktop Family







typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
 
HANDLE
__stdcall
HeapCreate(
      DWORD flOptions,
      SIZE_T dwInitialSize,
      SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
      HANDLE hHeap
    );

    
#line 86 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
 
LPVOID
__stdcall
HeapAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
 
 
LPVOID
__stdcall
HeapReAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      LPVOID lpMem,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
BOOL
__stdcall
HeapFree(
      HANDLE hHeap,
      DWORD dwFlags,
        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


#line 140 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
      HANDLE hHeap,
      DWORD dwFlags
    );





BOOL
__stdcall
HeapSummary(
      HANDLE hHeap,
      DWORD dwFlags,
      LPHEAP_SUMMARY lpSummary
    );


#line 178 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"

#line 180 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );


#line 195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
      DWORD NumberOfHeaps,
      PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
      HANDLE hHeap,
      LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength,
      PSIZE_T ReturnLength
    );

    
#line 259 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#pragma endregion






}
#line 268 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"

#line 270 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\heapapi.h"
#line 47 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"



















#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"






#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      BOOL bWait
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateIoCompletionPort(
      HANDLE FileHandle,
      HANDLE ExistingCompletionPort,
      ULONG_PTR CompletionKey,
      DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
      HANDLE CompletionPort,
      LPDWORD lpNumberOfBytesTransferred,
      PULONG_PTR lpCompletionKey,
      LPOVERLAPPED * lpOverlapped,
      DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
      HANDLE CompletionPort,
      LPOVERLAPPED_ENTRY lpCompletionPortEntries,
      ULONG ulCount,
      PULONG ulNumEntriesRemoved,
      DWORD dwMilliseconds,
      BOOL fAlertable
    );


#line 101 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
      HANDLE CompletionPort,
      DWORD dwNumberOfBytesTransferred,
      ULONG_PTR dwCompletionKey,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
      HANDLE hDevice,
      DWORD dwIoControlCode,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped
    );


#line 141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"

#line 143 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"
#pragma endregion








#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CancelIo(
      HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
      HANDLE hThread
    );


#line 195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"

#line 197 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"
#pragma endregion

#line 200 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"







}
#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"

#line 211 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ioapiset.h"


#line 48 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
 
 











#pragma once
#line 16 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"



















#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"


extern "C" {
#line 40 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"







#pragma region Application Family









typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion






#pragma region Application Family






__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


#line 137 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family















#line 158 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 193 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );


#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount,
      DWORD Flags
    );


#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );


#line 248 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 266 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );










typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;


















typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
      PINIT_ONCE InitOnce,
      PVOID Parameter,
     PVOID *Context
    );




__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
      PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
      PINIT_ONCE InitOnce,
       PINIT_ONCE_FN InitFn,
      PVOID Parameter,
     LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      PBOOL fPending,
     LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      LPVOID lpContext
    );


#line 356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"





typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
















__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
      PCONDITION_VARIABLE ConditionVariable,
      PCRITICAL_SECTION CriticalSection,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
      PCONDITION_VARIABLE ConditionVariable,
      PSRWLOCK SRWLock,
      DWORD dwMilliseconds,
      ULONG Flags
    );


#line 424 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"





__declspec(dllimport)
BOOL
__stdcall
SetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
      HANDLE hSemaphore,
      LONG lReleaseCount,
      LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
      HANDLE hMutex
    );


#line 464 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
      HANDLE hHandle,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
DWORD
__stdcall
SleepEx(
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 489 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
      HANDLE hHandle,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE * lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );









#line 525 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCWSTR lpName
    );





#line 556 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






#line 580 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCWSTR lpName
    );





#line 613 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 615 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );





#line 646 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






#line 663 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion




#pragma region Desktop Family



typedef
void
(__stdcall *PTIMERAPCROUTINE)(
      LPVOID lpArgToCompletionRoutine,
          DWORD dwTimerLowValue,
          DWORD dwTimerHighValue
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpTimerName
    );









BOOL
__stdcall
SetWaitableTimerEx(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      PREASON_CONTEXT WakeContext,
      ULONG TolerableDelay
    );


#line 712 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
      HANDLE hTimer
    );


#line 735 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion




#pragma region Application Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 773 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"




__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 804 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
      LONG lInitialCount,
      LONG lMaximumCount,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );






#line 824 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCWSTR lpTimerName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );






#line 849 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#line 852 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 854 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"








#pragma region Desktop Family



typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      LONG lTotalThreads,
      LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier
    );


__declspec(dllimport)
void
__stdcall
Sleep(
      DWORD dwMilliseconds
    );


#line 907 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



BOOL
__stdcall
WaitOnAddress(
      volatile void * Address,
      PVOID CompareAddress,
      SIZE_T AddressSize,
      DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
      PVOID Address
    );


void
__stdcall
WakeByAddressAll(
      PVOID Address
    );

    
#line 938 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 958 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 960 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"
#pragma endregion

#line 963 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"






}
#line 971 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"

#line 973 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\synchapi.h"


#line 49 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"
 
 










#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"


















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"









__declspec(dllimport)
void
__stdcall
InitializeSListHead(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      ULONG Count
    );


#line 89 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
      PSLIST_HEADER ListHead
    );


#line 107 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"

#line 109 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"

#line 111 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"





}
#line 118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"

#line 120 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\interlockedapi.h"

#line 50 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
 












#pragma once
#line 16 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"





















#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"


extern "C" {
#line 42 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"







#pragma region Desktop Family



typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 107 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
      PAPCFUNC pfnAPC,
      HANDLE hThread,
      ULONG_PTR dwData
    );


#line 122 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
      HANDLE hProcess,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


#line 136 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );


#line 159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
      HANDLE hProcess,
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
      HANDLE hProcess,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateThread(
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
        LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThread(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );


#line 253 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenThread(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwThreadId
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
      HANDLE hThread,
      int nPriority
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
      HANDLE hThread,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
      HANDLE hThread,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
      HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
      DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
      HANDLE hThread,
      DWORD dwExitCode
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetExitCodeThread(
      HANDLE hThread,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
      HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
      HANDLE hThread
    );








 
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
      DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
      DWORD dwTlsIndex,
      LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
      DWORD dwTlsIndex
    );




__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
      LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCSTR lpCurrentDirectory,
      LPSTARTUPINFOA lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );





#line 428 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#line 430 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
      DWORD dwLevel,
      DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
      DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
      LPSTARTUPINFOW lpStartupInfo
    );





#line 460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
      HANDLE hToken,
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );






#line 493 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 496 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
SetThreadToken(
      PHANDLE Thread,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
      HANDLE ProcessHandle,
      DWORD DesiredAccess,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
      HANDLE ThreadHandle,
      DWORD DesiredAccess,
      BOOL OpenAsSelf,
     PHANDLE TokenHandle
    );


#line 533 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
      HANDLE hProcess,
      DWORD dwPriorityClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
      PULONG StackSizeInBytes
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
      HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
      DWORD dwProcessId,
      DWORD * pSessionId
    );






__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
      HANDLE Process
    );


#line 588 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
      HANDLE Thread
    );


#line 601 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"


typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

#line 606 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion




#pragma region Application Family



__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );


#line 624 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
      HANDLE Thread
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwAttributeCount,
      DWORD dwFlags,
      PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
      HANDLE hProcess,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
      HANDLE hProcess,
      LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwFlags,
      DWORD_PTR Attribute,
      PVOID lpValue,
      SIZE_T cbSize,
      PVOID lpPreviousValue,
      PSIZE_T lpReturnSize
    );


#line 695 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 698 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThreadEx(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      LPDWORD lpThreadId
    );


#line 720 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
      PULONG_PTR LowLimit,
      PULONG_PTR HighLimit
    );


#line 747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
      HANDLE hThread,
      LPCONTEXT lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
      HANDLE hThread,
      const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
      HANDLE hProcess,
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


#line 791 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#line 793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 796 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#line 797 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
      HANDLE hThread,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwProcessId
    );


#line 838 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



BOOL
__stdcall
IsProcessorFeaturePresent(
      DWORD ProcessorFeature
    );


#line 852 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 855 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
      HANDLE hProcess,
      PDWORD pdwHandleCount
    );


#line 873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 876 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );


#line 893 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor,
      PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
      PPROCESSOR_NUMBER ProcNumber
    );


#line 932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 935 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"







#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
      HANDLE hProcess,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
      HANDLE hProcess,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
      HANDLE hThread,
      PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
      PFILETIME lpIdleTime,
      PFILETIME lpKernelTime,
      PFILETIME lpUserTime
    );


#line 987 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"





typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;




__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );













typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

#line 1039 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"




__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
      HANDLE hProcess,
      PBOOL Critical
    );


#line 1053 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#line 1055 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 1058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"







}
#line 1067 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"

#line 1069 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processthreadsapi.h"



#line 51 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
 
 












#pragma once
#line 17 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"











#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"


#pragma warning(push)
#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 40 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"













#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"





#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"


extern "C" {
#line 64 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"







#pragma region Application Family



typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion





#pragma region Desktop Family



__declspec(deprecated)
__declspec(dllimport)
 
DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
      LPMEMORYSTATUSEX lpBuffer
    );


#line 136 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
GetSystemTime(
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
      LPSYSTEMTIME lpSystemTime
    );


#line 167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
      const SYSTEMTIME * lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


#line 190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion




#pragma region Desktop Family



 
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );


#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );


#line 227 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 229 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetSystemTimeAdjustment(
      PDWORD lpTimeAdjustment,
      PDWORD lpTimeIncrement,
      PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 295 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 319 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion






#pragma region Desktop Family



typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;

#line 345 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExA(
      COMPUTER_NAME_FORMAT NameType,
      LPSTR lpBuffer,
      LPDWORD nSize
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPWSTR lpBuffer,
      LPDWORD nSize
    );





#line 381 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 383 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
      const SYSTEMTIME * lpSystemTime
    );


#line 417 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#line 420 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"




#pragma region Desktop Family



__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExA(
      LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExW(
      LPOSVERSIONINFOW lpVersionInformation
    );





#line 451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
      PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
      PDWORD ReturnedLength
    );


#line 475 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 477 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion







#pragma region Application Family






__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


#line 501 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 503 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
      DWORD dwOSMajorVersion,
      DWORD dwOSMinorVersion,
      DWORD dwSpMajorVersion,
      DWORD dwSpMinorVersion,
      PDWORD pdwReturnedProductType
    );


#line 525 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"




__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      ULONG TypeMask,
      UCHAR Condition
    );


#line 540 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"




__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
      PDWORD Flags
    );


#line 553 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
      DWORD FirmwareTableProviderSignature,
      PVOID pFirmwareTableEnumBuffer,
      DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
      DWORD FirmwareTableProviderSignature,
      DWORD FirmwareTableID,
      PVOID pFirmwareTableBuffer,
      DWORD BufferSize
    );


#line 584 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#line 587 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"







#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameExW(
      LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
      PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
      COMPUTER_NAME_FORMAT NameType,
      DWORD Flags,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
 
BOOL
__stdcall
SetSystemTimeAdjustment(
      DWORD dwTimeAdjustment,
      BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
      HANDLE ELAMFile
    );


#line 653 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#pragma endregion

#line 656 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"







}
#line 665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"





#pragma warning(pop)





#line 677 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"
#line 678 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"

#line 680 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\sysinfoapi.h"




#line 52 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
 












#pragma once
#line 16 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"





















#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"



extern "C" {
#line 43 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"

#pragma region Application Family










#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family





#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family






#line 75 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAlloc(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );



#line 100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"


#line 103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"


#line 106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
 
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtect(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


#line 130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAllocEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );



#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"


#line 171 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"


#line 174 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"


#line 177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
 
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
      HANDLE hProcess,
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtectEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
      HANDLE hProcess,
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadProcessMemory(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      LPVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)
 
BOOL
__stdcall
WriteProcessMemory(
      HANDLE hProcess,
      LPVOID lpBaseAddress,
      LPCVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenFileMappingW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFile(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFileEx(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress
    );


#line 300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
      LPCVOID lpBaseAddress,
      SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
      LPCVOID lpBaseAddress
    );


#line 324 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize,
      PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize,
      DWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
 
UINT
__stdcall
GetWriteWatch(
      DWORD dwFlags,
      PVOID lpBaseAddress,
      SIZE_T dwRegionSize,
      PVOID * lpAddresses,
      ULONG_PTR * lpdwCount,
      LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
      LPVOID lpBaseAddress,
      SIZE_T dwRegionSize
    );





typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMemoryResourceNotification(
      MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)
 
BOOL
__stdcall
QueryMemoryResourceNotification(
      HANDLE ResourceNotificationHandle,
      PBOOL ResourceState
    );


#line 436 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"










__declspec(dllimport)
 
BOOL
__stdcall
GetSystemFileCacheSize(
      PSIZE_T lpMinimumFileCacheSize,
      PSIZE_T lpMaximumFileCacheSize,
      PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
      SIZE_T MinimumFileCacheSize,
      SIZE_T MaximumFileCacheSize,
      DWORD Flags
    );


#line 468 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"




__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName,
      DWORD nndPreferred
    );






#line 492 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"




typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
      HANDLE hProcess,
      ULONG_PTR NumberOfEntries,
      PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
      PVOID BaseAddress,
      ULONG UnmapFlags
    );


#line 522 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"

#line 524 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingFromApp(
      HANDLE hFile,
      PSECURITY_ATTRIBUTES SecurityAttributes,
      ULONG PageProtection,
      ULONG64 MaximumSize,
      PCWSTR Name
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFileFromApp(
      HANDLE hFileMappingObject,
      ULONG DesiredAccess,
      ULONG64 FileOffset,
      SIZE_T NumberOfBytesToMap
    );


#line 559 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"

#line 561 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#line 564 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"







#pragma region Desktop Family






__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
FreeUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
MapUserPhysicalPages(
      PVOID VirtualAddress,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


#line 612 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"




__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray,
      DWORD nndPreferred
    );


__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAllocExNuma(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect,
      DWORD nndPreferred
    );


#line 643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"






__declspec(dllimport)
 
BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
      PULONG Capabilities
    );


 
typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)
 
PVOID
__stdcall
RegisterBadMemoryNotification(
      PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterBadMemoryNotification(
      PVOID RegistrationHandle
    );


#line 687 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"

#line 689 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"
#pragma endregion

#line 692 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"







}
#line 701 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"

#line 703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\memoryapi.h"



#line 53 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
      LPTHREAD_START_ROUTINE Function,
      PVOID Context,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWaitEx(
      HANDLE WaitHandle,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
     PHANDLE phNewTimer,
      HANDLE TimerQueue,
      WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
      DWORD DueTime,
      DWORD Period,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
ChangeTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      ULONG DueTime,
      ULONG Period
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueEx(
      HANDLE TimerQueue,
      HANDLE CompletionEvent
    );


#line 121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"
#pragma endregion


}
#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"

#line 128 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoollegacyapiset.h"
#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"
 
 









#pragma once
#line 14 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"



















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"





#pragma region Desktop Family



typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
      PVOID                 Overlapped,
             ULONG                 IoResult,
             ULONG_PTR             NumberOfBytesTransferred,
          PTP_IO                Io
    );




__declspec(dllimport)
 
PTP_POOL
__stdcall
CreateThreadpool(
      PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
      PTP_POOL ptpp,
      DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
      PTP_POOL ptpp,
      DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
      PTP_POOL ptpp
    );


__declspec(dllimport)
 
PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
      PTP_CLEANUP_GROUP ptpcg,
      BOOL fCancelPendingCallbacks,
      PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
      PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE sem,
      DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
 
BOOL
__stdcall
TrySubmitThreadpoolCallback(
      PTP_SIMPLE_CALLBACK pfns,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
 
PTP_WORK
__stdcall
CreateThreadpoolWork(
      PTP_WORK_CALLBACK pfnwk,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
      PTP_WORK pwk,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
 
PTP_TIMER
__stdcall
CreateThreadpoolTimer(
      PTP_TIMER_CALLBACK pfnti,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
      PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
      PTP_TIMER pti,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
      PTP_TIMER pti
    );


__declspec(dllimport)
 
PTP_WAIT
__stdcall
CreateThreadpoolWait(
      PTP_WAIT_CALLBACK pfnwa,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
      PTP_WAIT pwa,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
      PTP_WAIT pwa
    );


__declspec(dllimport)
 
PTP_IO
__stdcall
CreateThreadpoolIo(
      HANDLE fl,
      PTP_WIN32_IO_CALLBACK pfnio,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
      PTP_IO pio,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
      PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout,
      PVOID Reserved
    );


#line 406 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"


#line 409 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"

#line 411 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"
#pragma endregion


}
#line 416 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"

#line 418 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\threadpoolapiset.h"
#line 55 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"

#pragma region Desktop Family






typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;

typedef struct _BEM_REFERENCE BEM_REFERENCE;

typedef void (__stdcall* BEM_FREE_INTERFACE_CALLBACK)(  void* interfaceInstance);

HRESULT
__stdcall
BemCreateReference(
      const GUID & iid,
      void * interfaceInstance,
      BEM_FREE_INTERFACE_CALLBACK freeCallback,
     BEM_REFERENCE ** reference
    );


HRESULT
__stdcall
BemCreateContractFrom(
      LPCWSTR dllPath,
      const GUID & extensionId,
      const CONTRACT_DESCRIPTION * contractDescription,
      void * hostContract,
     void ** contract
    );


HRESULT
__stdcall
BemCopyReference(
      BEM_REFERENCE * reference,
     BEM_REFERENCE ** copiedReference
    );

        
void
__stdcall
BemFreeReference(
      BEM_REFERENCE * reference
    );

    
void
__stdcall
BemFreeContract(
      void * contract
    );

    
#line 93 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"

#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"
#pragma endregion


}
#line 100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"

#line 102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\bemapiset.h"
#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
      HANDLE ProcessHandle,
      HANDLE JobHandle,
      PBOOL Result
    );


#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"

#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"
#pragma endregion


}
#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"

#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\jobapi.h"
#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"

#pragma region Desktop Family









__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
      PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
      PVOID OlValue
    );


#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"

#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"




__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
      HANDLE hProcess,
      PBOOL Wow64Process
    );


#line 79 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"

#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"
#pragma endregion


}
#line 86 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"

#line 88 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wow64apiset.h"
#line 58 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
 
 











#pragma once
#line 16 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"





















#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"


extern "C" {
#line 42 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#pragma region Desktop Family















typedef struct tagENUMUILANG {
    ULONG  NumOfEnumUILang;    
    ULONG  SizeOfEnumUIBuffer; 
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);




#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPSTR lpName,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPWSTR lpName,
      LONG_PTR lParam);




#line 100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
      HMODULE hModule,
      LPSTR lpType,
      LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
      HMODULE hModule,
      LPWSTR lpType,
      LONG_PTR lParam
    );




#line 116 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

























#line 142 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion





#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
      HMODULE hLibModule
    );


#line 163 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage
    );






#line 186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
      DWORD dwFindStringOrdinalFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      BOOL bIgnoreCase
    );


#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
      HMODULE hLibModule
    );


#line 219 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
      HMODULE hLibModule,
      DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameA(
      HMODULE hModule,
      LPSTR lpFilename,
      DWORD nSize
    );

__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameW(
      HMODULE hModule,
      LPWSTR lpFilename,
      DWORD nSize
    );





#line 270 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
      LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
      LPCWSTR lpModuleName
    );





#line 294 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"








typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
             DWORD        dwFlags,
         LPCSTR     lpModuleName,
     HMODULE*    phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
             DWORD        dwFlags,
         LPCWSTR     lpModuleName,
     HMODULE*    phModule
    );




#line 323 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
      DWORD dwFlags,
      LPCSTR lpModuleName,
      HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
      DWORD dwFlags,
      LPCWSTR lpModuleName,
      HMODULE * phModule
    );





#line 347 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 349 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 351 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
      HMODULE hModule,
      LPCSTR lpProcName
    );


#line 367 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExA(
      LPCSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExW(
      LPCWSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );





#line 398 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"















__declspec(dllimport)
 
HGLOBAL
__stdcall
LoadResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 424 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
LoadStringA(
      HINSTANCE hInstance,
      UINT uID,
      LPSTR lpBuffer,
      int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
      HINSTANCE hInstance,
      UINT uID,
      LPWSTR lpBuffer,
      int cchBufferMax
    );





#line 457 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 459 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
LPVOID
__stdcall
LockResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 485 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion



#pragma region Desktop Family



typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
      PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
      DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
      DWORD DirectoryFlags
    );


#line 520 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion






#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      ENUMRESLANGPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      ENUMRESLANGPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 565 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
      HMODULE hModule,
      LPCSTR lpType,
      ENUMRESNAMEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      ENUMRESNAMEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 595 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
      HMODULE hModule,
      ENUMRESTYPEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
      HMODULE hModule,
      ENUMRESTYPEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 623 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 625 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 627 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"
#pragma endregion

#line 630 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"






}
#line 638 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 640 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\libloaderapi.h"

#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"
 
 










#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"



















#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"



#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwStartingAceIndex,
      LPVOID pAceList,
      DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );





__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD MandatoryPolicy,
      PSID pLabelSid
    );


#line 353 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"






__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid,
      PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
      PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


#line 386 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"



__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
      HANDLE TokenHandle,
      BOOL ResetToDefault,
      PTOKEN_GROUPS NewState,
      DWORD BufferLength,
      PTOKEN_GROUPS PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
      HANDLE TokenHandle,
      BOOL DisableAllPrivileges,
      PTOKEN_PRIVILEGES NewState,
      DWORD BufferLength,
      PTOKEN_PRIVILEGES PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount,
      DWORD nSubAuthority0,
      DWORD nSubAuthority1,
      DWORD nSubAuthority2,
      DWORD nSubAuthority3,
      DWORD nSubAuthority4,
      DWORD nSubAuthority5,
      DWORD nSubAuthority6,
      DWORD nSubAuthority7,
     PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
      PLUID Luid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
      HANDLE TokenHandle,
      PSID SidToCheck,
      PBOOL IsMember
    );







__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
      HANDLE TokenHandle,
      PSID CapabilitySidToCheck,
      PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
      PACL Acl,
      DWORD StartingAceIndex,
     PVOID * AppContainerAce,
      DWORD * AppContainerAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
      HANDLE TokenHandle,
      PSID SidToCheck,
      DWORD Flags,
      PBOOL IsMember
    );


#line 507 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"



__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
     PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
      GUID * ObjectType,
      BOOLEAN IsDirectoryObject,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid(
      DWORD nDestinationSidLength,
      PSID pDestinationSid,
      PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      BOOL IsDirectoryObject,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID * ObjectType,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID ** ObjectTypes,
      ULONG GuidCount,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
      HANDLE ExistingTokenHandle,
      DWORD Flags,
      DWORD DisableSidCount,
      PSID_AND_ATTRIBUTES SidsToDisable,
      DWORD DeletePrivilegeCount,
      PLUID_AND_ATTRIBUTES PrivilegesToDelete,
      DWORD RestrictedSidCount,
      PSID_AND_ATTRIBUTES SidsToRestrict,
     PHANDLE NewTokenHandle
    );





__declspec(dllimport)
 
BOOL
__stdcall
CreateWellKnownSid(
      WELL_KNOWN_SID_TYPE WellKnownSidType,
      PSID DomainSid,
      PSID pSid,
      DWORD * cbSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
EqualDomainSid(
      PSID pSid1,
      PSID pSid2,
      BOOL * pfEqual
    );


#line 620 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
      PACL pAcl,
      DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
        PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
      HANDLE ExistingTokenHandle,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
      HANDLE hExistingToken,
      DWORD dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpTokenAttributes,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
      TOKEN_TYPE TokenType,
     PHANDLE phNewToken
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
      PACL pAcl,
     LPVOID * pAce
    );


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
      PACL pAcl,
      DWORD dwAceIndex,
     LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetLengthSid(
        PSID pSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ObjectDescriptor,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ResultantDescriptor,
      DWORD DescriptorLength,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSECURITY_DESCRIPTOR_CONTROL pControl,
      LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbDaclPresent,
     PACL * pDacl,
      LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pGroup,
      LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pOwner,
      LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbSaclPresent,
     PACL * pSacl,
      LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
      PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
      UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
      PSID pSid,
      DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength,
      PDWORD ReturnLength
    );





__declspec(dllimport)
 
BOOL
__stdcall
GetWindowsAccountDomainSid(
      PSID pSid,
      PSID pDomainSid,
      DWORD * cbDomainSid
    );


#line 897 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
      HANDLE ThreadHandle
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
      HANDLE hToken
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
      PACL pAcl,
      DWORD nAclLength,
      DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
      PSID Sid,
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
      HANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
      PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
      PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
      PSID pSid,
      WELL_KNOWN_SID_TYPE WellKnownSidType
    );


#line 998 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
MakeAbsoluteSD(
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      LPDWORD lpdwAbsoluteSecurityDescriptorSize,
      PACL pDacl,
      LPDWORD lpdwDaclSize,
      PACL pSacl,
      LPDWORD lpdwSaclSize,
      PSID pOwner,
      LPDWORD lpdwOwnerSize,
      PSID pPrimaryGroup,
      LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
MakeSelfRelativeSD(
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask(
      PDWORD AccessMask,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
      BOOL ObjectCreation,
      BOOL AccessGranted,
      LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
      HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
      LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
      LPCWSTR SubsystemName,
      LPCWSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );









__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      ULONG AutoInheritFlags,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1226 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bDaclPresent,
      PACL pDacl,
      BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pGroup,
      BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pOwner,
      BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bSaclPresent,
      PACL pSacl,
      BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength
    );







__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
      PHANDLE SourceFiles,
      ULONG SourceFileCount,
      ULONG Flags,
      HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
      HANDLE File,
      PULONG Flags,
      PULONG SigningLevel,
      PUCHAR Thumbprint,
      PULONG ThumbprintSize,
      PULONG ThumbprintAlgorithm
    );

    
#line 1329 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

#line 1331 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"
#pragma endregion




}
#line 1338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

#line 1340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securitybaseapi.h"

#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"

#pragma region Desktop Family





__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
      HANDLE Handle,
      ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
      LPCWSTR Name,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
      HANDLE BoundaryDescriptor
    );


#line 97 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"
#pragma endregion


}
#line 102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"

#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\namespaceapi.h"
#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"

















#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
      PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
      USHORT Node,
      PGROUP_AFFINITY ProcessorMask
    );


#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"

#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"
#pragma endregion


}
#line 68 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"

#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\systemtopologyapi.h"
#line 62 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"
 
 









#pragma once
#line 14 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"



















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
      HANDLE hProcess,
      PUSHORT GroupCount,
      PUSHORT GroupArray
    );


#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"

#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"
#pragma endregion


#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
      HANDLE hThread,
      PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
      HANDLE hThread,
      const GROUP_AFFINITY * GroupAffinity,
      PGROUP_AFFINITY PreviousGroupAffinity
    );


#line 89 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"

#line 91 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"
#pragma endregion


}
#line 96 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"

#line 98 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\processtopologyapi.h"
#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"



















#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"

#pragma region Desktop Family




extern "C" {
#line 41 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"








BOOL
__stdcall
GetAppContainerNamedObjectPath(
      HANDLE Token,
      PSID AppContainerSid,
      ULONG ObjectPathLength,
      LPWSTR ObjectPath,
      PULONG ReturnLength
    );


#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"


}
#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"

#line 67 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"
#pragma endregion

#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\securityappcontainer.h"
#line 64 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"
















#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"


extern "C" {
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
      HANDLE ThreadHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
      HANDLE ProcessHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );


#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"




__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
      USHORT Group,
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );

    
#line 85 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"

#line 87 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
      PULONGLONG UnbiasedTime
    );


#line 105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"

#line 107 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"
#pragma endregion


}
#line 112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"

#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\realtimeapiset.h"
#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


extern "C" {
#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Application Family












#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family






















































#line 150 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




































#line 187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"














#line 202 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"











#line 216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






























































typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
#line 289 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"










#line 300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
typedef LPVOID LPLDT_ENTRY;
#line 302 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;



























































































typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 663 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"














#line 678 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;






#line 890 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


int



#line 900 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
__stdcall
#line 902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#line 905 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
WinMain (
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPSTR lpCmdLine,
      int nShowCmd
    );

int


#line 916 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
__stdcall
#line 918 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
wWinMain(
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPWSTR lpCmdLine,
      int nShowCmd
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalAlloc(
      UINT uFlags,
      SIZE_T dwBytes
    );

__declspec(dllimport)
   
HGLOBAL
__stdcall
GlobalReAlloc (
      HGLOBAL hMem,
      SIZE_T dwBytes,
      UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
      HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
LPVOID
__stdcall
GlobalLock (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
HGLOBAL
__stdcall
GlobalHandle (
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
      HGLOBAL hMem
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalFree(
      HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
      DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
      HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
      HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
      HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
      HGLOBAL hMem
    );

 
__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
      LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalAlloc(
      UINT uFlags,
      SIZE_T uBytes
    );

__declspec(dllimport)
   
HLOCAL
__stdcall
LocalReAlloc(
      HLOCAL hMem,
      SIZE_T uBytes,
      UINT uFlags
    );

__declspec(dllimport)
 
LPVOID
__stdcall
LocalLock(
      HLOCAL hMem
    );

__declspec(dllimport)
 
HLOCAL
__stdcall
LocalHandle(
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
      HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
      HLOCAL hMem
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalFree(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
      HLOCAL hMem,
      UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
      UINT uMinFree
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
      USHORT Group,
      PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
      PDWORD ReturnedLength
    );

#line 1127 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"















#line 1143 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
       LPCSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
       LPCWSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );




#line 1163 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameA(
      LPCSTR lpszLongPath,
      LPSTR  lpszShortPath,
      DWORD cchBuffer
    );


#line 1176 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedA(
          LPCSTR lpszShortPath,
      LPSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedW(
          LPCWSTR lpszShortPath,
      LPWSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );




#line 1204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
       HANDLE hProcess,
      PDWORD_PTR lpProcessAffinityMask,
      PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
      HANDLE hProcess,
      DWORD_PTR dwProcessAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
       HANDLE hProcess,
      PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
       HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
      int ExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
         LPCH NewEnvironment
    );


#line 1267 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
      PEXCEPTION_RECORD pExceptionRecord,
      PCONTEXT pContextRecord,
      DWORD dwFlags
    );

#line 1284 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion







#pragma region Application Family




__declspec(dllimport)
void
__stdcall
SwitchToFiber(
      LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
      LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );

#line 1321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
 
PVOID
__stdcall
CalloutOnFiberStack(
      PVOID lpFiber,
      PFIBER_CALLOUT_ROUTINE lpStartAddress,
      PVOID lpParameter
    );

#line 1335 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiberEx(
          SIZE_T dwStackCommitSize,
          SIZE_T dwStackReserveSize,
          DWORD dwFlags,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiberEx(
      LPVOID lpParameter,
          DWORD dwFlags
    );

#line 1358 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiber(
          SIZE_T dwStackSize,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiber(
      LPVOID lpParameter
    );

#line 1382 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion









#pragma region Desktop Family






typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {

    
    
    
    ULONG UmsVersion;

    
    
    
    PUMS_COMPLETION_LIST CompletionList;

    
    
    
    
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;

    
    
    
    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;

 
__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
     PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
      PUMS_COMPLETION_LIST UmsCompletionList,
      DWORD WaitTimeOut,
      PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
      PUMS_COMPLETION_LIST UmsCompletionList,
      PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
      PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
      PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
      PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength,
      PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
     PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
      PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
      HANDLE ThreadHandle,
      PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );

#line 1556 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion





#line 1565 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Desktop Family


__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
      HANDLE hThread,
      DWORD_PTR dwThreadAffinityMask
    );


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
      HANDLE hThread,
      DWORD dwIdealProcessor
    );
#line 1586 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;



__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );

#line 1619 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
      HANDLE hProcess,
      LPDWORD lpFlags,
      PBOOL lpPermanent
    );

#line 1642 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
      LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
       HANDLE hThread,
       DWORD dwSelector,
      LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
      EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
      PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

#line 1705 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1707 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family






#line 1717 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


















#line 1739 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1740 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





















__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
      HANDLE FileHandle,
      UCHAR Flags
    );

#line 1770 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"










__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
      DWORD dwNewMode,
      LPDWORD lpOldMode
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
         HANDLE hThread,
      PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
      HANDLE hThread,
      const WOW64_CONTEXT *lpContext
    );

#line 1816 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
      HANDLE hThread,
      DWORD dwSelector,
      PWOW64_LDT_ENTRY lpSelectorEntry
    );

#line 1829 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1831 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
      HANDLE hThread
    );

#line 1842 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
      BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
      HANDLE Process
    );

#line 1858 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




#line 1866 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 1868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
      HANDLE hEvent
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
      DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
      UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
       HANDLE hDevice,
      BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
      HANDLE hMsgIndicator,
      ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
      HANDLE hFile,
      LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
      HANDLE hFile,
      LPCWSTR lpShortName
    );




#line 1968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
      LPCSTR lpModuleName,
      LPVOID lpParameterBlock
    );


 
__declspec(dllimport)
UINT
__stdcall
WinExec(
      LPCSTR lpCmdLine,
      UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
           HANDLE hFile,
      LPDWORD lpErrors,
      LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
      HANDLE hFile,
      DWORD dwInQueue,
      DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
      HANDLE hFile,
      DWORD dwFunc
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetCommConfig(
           HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
        LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
       HANDLE hFile,
      LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
         HANDLE hFile,
      LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
       HANDLE hFile,
      LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
       HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
       HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
      HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
      HANDLE hFile,
      DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
      HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
      HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
      HANDLE hFile,
      char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
             HANDLE hFile,
          LPDWORD lpEvtMask,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
      HANDLE hDevice,
      DWORD dwPositionMethod,
      DWORD dwPartition,
      DWORD dwOffsetLow,
      DWORD dwOffsetHigh,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
       HANDLE hDevice,
       DWORD dwPositionType,
      LPDWORD lpdwPartition,
      LPDWORD lpdwOffsetLow,
      LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
      HANDLE hDevice,
      DWORD dwOperation,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
      HANDLE hDevice,
      DWORD dwEraseType,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
      HANDLE hDevice,
      DWORD dwPartitionMethod,
      DWORD dwCount,
      DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
      HANDLE hDevice,
      DWORD dwTapemarkType,
      DWORD dwTapemarkCount,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
      HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
      LPDWORD lpdwSize,
      LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
      HANDLE hDevice,
      DWORD dwOperation,
      LPVOID lpTapeInformation
    );




#line 2235 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
MulDiv(
      int nNumber,
      int nNumerator,
      int nDenominator
    );

#line 2250 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );

#line 2273 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
      PDWORD pdwQuotaAllowed,
      PDWORD pdwQuotaUsed
    );

#line 2285 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
       const FILETIME *lpFileTime,
      LPWORD lpFatDate,
      LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
       WORD wFatDate,
       WORD wFatTime,
      LPFILETIME lpFileTime
    );

#line 2309 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion


#pragma region Application Family



__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageA(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );
__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageW(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPWSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );




#line 2347 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





























#line 2377 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 2378 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"








#line 2387 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
           HANDLE hNamedPipe,
      LPDWORD lpFlags,
      LPDWORD lpOutBufferSize,
      LPDWORD lpInBufferSize,
      LPDWORD lpMaxInstances
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
          LPCSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
          LPCWSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 2434 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
           HANDLE hMailslot,
      LPDWORD lpMaxMessageSize,
      LPDWORD lpNextSize,
      LPDWORD lpMessageCount,
      LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
      HANDLE hMailslot,
      DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
      LPCWSTR lpFileName
    );




#line 2475 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
            LPCSTR lpFileName,
      DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
            LPCWSTR lpFileName,
      DWORD dwReserved
    );




#line 2495 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
       LPCSTR lpFileName,
      LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
       LPCWSTR lpFileName,
      LPDWORD  lpStatus
    );




#line 2530 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"







typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
          ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
       PULONG ulLength
    );












__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
             LPCSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
             LPCWSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );




#line 2585 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
          PFE_EXPORT_FUNC pfExportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
          PFE_IMPORT_FUNC pfImportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
      PVOID           pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 2634 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 2654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
 
 
 
LPSTR
__stdcall
lstrcpynA(
      LPSTR lpString1,
      LPCSTR lpString2,
      int iMaxLength
    );
__declspec(dllimport)
 
 
 
 
LPWSTR
__stdcall
lstrcpynW(
      LPWSTR lpString1,
      LPCWSTR lpString2,
      int iMaxLength
    );




#line 2684 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#pragma warning(push)
#pragma warning(disable:4995)
#line 2689 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
      LPSTR lpString1, 
       LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
      LPWSTR lpString1, 
       LPCWSTR lpString2
    );




#line 2709 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
      LPSTR lpString1, 
         LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
      LPWSTR lpString1, 
         LPCWSTR lpString2
    );




#line 2729 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#pragma warning(pop)
#line 2733 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
      LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
      LPCWSTR lpString
    );




#line 2751 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HFILE
__stdcall
OpenFile(
         LPCSTR lpFileName,
      LPOFSTRUCT lpReOpenBuff,
         UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
      LPCSTR lpPathName,
      int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
      LPCSTR lpPathName,
      int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
      HFILE hFile,
      LPVOID lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
      HFILE hFile,
      LPVOID lpBuffer,
      long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
      HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
      HFILE hFile,
      LONG lOffset,
      int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
      const void* lpv,
             int iSize,
      LPINT lpiResult
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );
#line 2849 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToRead,
        LPDWORD lpNumberOfBytesRead,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
         HANDLE hFile,
         DWORD  dwLowBytesToSeek,
         DWORD  dwHighBytesToSeek,
        LPDWORD lpdwLowByteSeeked,
        LPDWORD lpdwHighByteSeeked,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToWrite,
        LPDWORD lpNumberOfBytesWritten,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
















































#line 2947 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
#line 2965 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 2967 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



#line 2971 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 2988 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreA(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCWSTR lpName
    );




#line 3014 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 3027 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCSTR lpTimerName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCWSTR lpTimerName
    );




#line 3053 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpTimerName
    );


#line 3066 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExA(
         LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
         LPCSTR lpName,
       DWORD dwFlags,
             DWORD dwDesiredAccess
    );


#line 3084 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCSTR lpTimerName,
          DWORD dwFlags,
          DWORD dwDesiredAccess
    );


#line 3098 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3100 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName
    );


#line 3118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName,
          DWORD nndPreferred
    );



#line 3138 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3140 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 3152 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetLogicalDriveStringsA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );


#line 3164 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryA(
      LPCSTR lpLibFileName
    );
__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryW(
      LPCWSTR lpLibFileName
    );




#line 3185 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




__declspec(dllimport)
 
HMODULE
__stdcall
LoadPackagedLibrary (
            LPCWSTR lpwLibFileName,
      DWORD Reserved
    );

#line 3204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
      HANDLE hProcess,
      DWORD dwFlags,
      LPSTR lpExeName,
      PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
      HANDLE hProcess,
      DWORD dwFlags,
      LPWSTR lpExeName,
      PDWORD lpdwSize
    );




#line 3238 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3240 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
















typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess        = 0,
    ProcThreadAttributeHandleList           = 2,

    ProcThreadAttributeGroupAffinity        = 3,
    ProcThreadAttributePreferredNode        = 4,
    ProcThreadAttributeIdealProcessor       = 5,
    ProcThreadAttributeUmsThread            = 6,
    ProcThreadAttributeMitigationPolicy     = 7,
#line 3266 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

    ProcThreadAttributeSecurityCapabilities = 9,
#line 3269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
    ProcThreadAttributeProtectionLevel      = 11,
} PROC_THREAD_ATTRIBUTE_NUM;
#line 3272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"












#line 3285 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"












#line 3298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




#line 3303 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"













#line 3317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

















































































































#line 3431 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 3432 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
      LPDWORD lpdwLevel,
      LPDWORD lpdwFlags
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
      UINT uAction,
      LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
      UINT uAction,
      LPCWSTR lpMessageText
    );




#line 3461 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
      LPSTARTUPINFOA lpStartupInfo
    );


#line 3471 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

































#line 3505 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



















#line 3525 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );




#line 3549 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );




#line 3577 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3579 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );




#line 3603 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );




#line 3631 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 3633 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
      PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
      PBOOL NativeVhdBoot
    );

#line 3652 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceA(
      HMODULE hModule,
          LPCSTR lpName,
          LPCSTR lpType
    );
__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceW(
      HMODULE hModule,
          LPCWSTR lpName,
          LPCWSTR lpType
    );




#line 3676 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          WORD    wLanguage
    );


#line 3690 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
      HMODULE hModule,
          ENUMRESTYPEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
      HMODULE hModule,
          ENUMRESTYPEPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 3712 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
      HMODULE hModule,
          LPCSTR lpType,
          ENUMRESNAMEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
      HMODULE hModule,
          LPCWSTR lpType,
          ENUMRESNAMEPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 3736 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          ENUMRESLANGPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
      HMODULE hModule,
          LPCWSTR lpType,
          LPCWSTR lpName,
          ENUMRESLANGPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 3762 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
      LPCSTR pFileName,
      BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
      LPCWSTR pFileName,
      BOOL bDeleteExistingResources
    );




#line 3782 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
      HANDLE hUpdate,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
      HANDLE hUpdate,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );




#line 3810 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
      HANDLE hUpdate,
      BOOL   fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
      HANDLE hUpdate,
      BOOL   fDiscard
    );




#line 3830 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
      LPCWSTR lpString
    );




#line 3850 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
      LPCSTR lpString,
      DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
      LPCWSTR lpString,
      DWORD Flags
    );




#line 3870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
      LPCWSTR lpString
    );




#line 3888 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 3910 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
      LPCWSTR lpString
    );




#line 3928 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
      LPCWSTR lpString
    );




#line 3946 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 3968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      INT nDefault
    );




#line 3990 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize
    );




#line 4016 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString
    );




#line 4038 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
      LPCSTR lpAppName,
      LPSTR lpReturnedString,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
      LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
      DWORD nSize
    );




#line 4060 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString
    );




#line 4080 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
          LPCSTR lpAppName,
          LPCSTR lpKeyName,
          INT nDefault,
      LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
          LPCWSTR lpAppName,
          LPCWSTR lpKeyName,
          INT nDefault,
      LPCWSTR lpFileName
    );




#line 4104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"























#line 4128 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



























#line 4184 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 4208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
          LPCSTR lpAppName,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
          LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"























#line 4256 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 4278 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
      LPSTR lpszReturnBuffer,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
      LPWSTR lpszReturnBuffer,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4301 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





















#line 4323 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 4349 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

























#line 4375 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 4401 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );


#line 4412 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
      LPCSTR lpPathName,
      LPCSTR lpPrefixString,
      UINT uUnique,
      LPSTR lpTempFileName
    );


#line 4425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"























#line 4449 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );
__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );




#line 4474 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
      BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)(  LPSTR lpBuffer,   UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)(  LPWSTR lpBuffer,   UINT uSize);





















#line 4509 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4511 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 4512 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

















#line 4530 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



















#line 4550 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
      LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
      LPCWSTR lpPathName
    );




#line 4570 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );




#line 4592 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4594 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
      DWORD Flags
    );

#line 4608 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




















#line 4632 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4634 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
          LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
          LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 4660 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
      LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
      LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );




#line 4686 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
      LPCSTR lpPathName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
      LPCWSTR lpPathName,
          HANDLE hTransaction
    );




#line 4706 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedA(
                 LPCSTR lpFileName,
                 DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR *lpFilePart,
                 HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedW(
                 LPCWSTR lpFileName,
                 DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR *lpFilePart,
                 HANDLE hTransaction
    );




#line 4734 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4736 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
          DWORD dwFlags,
          LPCSTR lpDeviceName,
      LPCSTR lpTargetPath
    );


#line 4754 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
      LPCSTR lpDeviceName,
      LPSTR lpTargetPath,
          DWORD ucchMax
    );


#line 4766 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
            LPCSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
            LPCWSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );




#line 4806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4808 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
      HANDLE  hOriginalFile,
      DWORD   dwDesiredAccess,
      DWORD   dwShareMode,
      DWORD   dwFlagsAndAttributes
    );

#line 4823 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
          LPCSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );




#line 4848 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
       LPCSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
       LPCWSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );




#line 4872 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
           LPCSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
           LPCWSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );




#line 4894 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
          LPCSTR lpFileName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
          LPCWSTR lpFileName,
          HANDLE hTransaction
    );




#line 4914 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4916 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4918 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


















#line 4940 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4942 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
           LPCSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
           LPCWSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );




#line 4974 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4976 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 4978 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
            LPCSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
            LPCWSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );




#line 5016 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5018 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5020 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#line 5023 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      BOOL bFailIfExists
    );




#line 5049 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





















#line 5071 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5073 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
          LARGE_INTEGER TotalFileSize,
          LARGE_INTEGER TotalBytesTransferred,
          LARGE_INTEGER StreamSize,
          LARGE_INTEGER StreamBytesTransferred,
          DWORD dwStreamNumber,
          DWORD dwCallbackReason,
          HANDLE hSourceFile,
          HANDLE hDestinationFile,
      LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );




#line 5123 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
          LPCSTR lpExistingFileName,
          LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
          LPCWSTR lpExistingFileName,
          LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );




#line 5155 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5157 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family








typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE  Type;
    DWORD                   dwPadding;

    union {

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } ChunkStarted;

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwFlags;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliStreamBytesTransferred; 
            ULARGE_INTEGER  uliTotalFileSize; 
            ULARGE_INTEGER  uliTotalBytesTransferred; 
        } ChunkFinished;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } StreamStarted;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize;
            ULARGE_INTEGER  uliStreamBytesTransferred;
            ULARGE_INTEGER  uliTotalFileSize;
            ULARGE_INTEGER  uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD           dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE    CopyPhase;
            DWORD                   dwStreamNumber;
            HRESULT                 hrFailure;
            DWORD                   dwReserved;
            ULARGE_INTEGER          uliChunkNumber;
            ULARGE_INTEGER          uliStreamSize;
            ULARGE_INTEGER          uliStreamBytesTransferred;
            ULARGE_INTEGER          uliTotalFileSize;
            ULARGE_INTEGER          uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
         const COPYFILE2_MESSAGE     *pMessage,
     PVOID                       pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD                         dwSize;
  DWORD                         dwCopyFlags;
  BOOL                          *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE   pProgressRoutine;
  PVOID                         pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
         PCWSTR                          pwszExistingFileName,
         PCWSTR                          pwszNewFileName,
     COPYFILE2_EXTENDED_PARAMETERS   *pExtendedParameters
);

#line 5298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#line 5303 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName
    );




#line 5326 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



















#line 5346 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5348 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
          DWORD    dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
          DWORD    dwFlags
    );




#line 5374 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5376 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );




#line 5407 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 5408 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 5437 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 5438 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5440 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family









#line 5453 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5455 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
            LPCSTR lpReplacedFileName,
            LPCSTR lpReplacementFileName,
        LPCSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
            LPCWSTR lpReplacedFileName,
            LPCWSTR lpReplacementFileName,
        LPCWSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );




#line 5490 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 5491 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5519 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5521 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );




#line 5550 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 5552 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"








typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags,
            HANDLE hTransaction
    );
#line 5596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
       HANDLE hFindStream,
      LPVOID lpFindStreamData
    );
#line 5605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
         LPCWSTR lpFileName,
         DWORD dwFlags,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
         HANDLE hFindStream,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
          LPCWSTR lpFileName,
          DWORD dwFlags,
       LPDWORD StringLength,
      PWSTR LinkName,
      HANDLE hTransaction
    );

#line 5639 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
          LPCSTR lpName,
          DWORD dwOpenMode,
          DWORD dwPipeMode,
          DWORD nMaxInstances,
          DWORD nOutBufferSize,
          DWORD nInBufferSize,
          DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );


#line 5656 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPSTR lpUserName,
           DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPWSTR lpUserName,
           DWORD nMaxUserNameSize
    );




#line 5686 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
       LPCSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
       LPCWSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );




#line 5716 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
      LPCSTR lpNamedPipeName,
      DWORD nTimeOut
    );


#line 5727 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
      HANDLE Pipe,
       LPSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );



#line 5743 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
      HANDLE Pipe,
      PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
      HANDLE Pipe,
      PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
      HANDLE Pipe,
      PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
      HANDLE Pipe,
      PULONG ServerSessionId
    );

#line 5777 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
      LPCSTR lpRootPathName,
      LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
      LPCWSTR lpRootPathName,
      LPCWSTR lpVolumeName
    );




#line 5797 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
       LPCSTR lpRootPathName,
      LPSTR lpVolumeNameBuffer,
           DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPSTR lpFileSystemNameBuffer,
           DWORD nFileSystemNameSize
    );



#line 5830 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
       HANDLE  hFile,
       DWORD   nPeriodMilliseconds,
       DWORD   nBytesPerPeriod,
       BOOL    bDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
       HANDLE  hFile,
      LPDWORD lpPeriodMilliseconds,
      LPDWORD lpBytesPerPeriod,
      LPBOOL  pDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

#line 5858 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
          HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
          HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 5882 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
      HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
      HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 5902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
      HANDLE  hEventLog,
      HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
       HANDLE hEventLog,
      PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
       HANDLE hEventLog,
      PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 5960 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 5980 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpFileName
    );




#line 6000 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );




#line 6030 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCSTR *lpStrings,
      LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCWSTR *lpStrings,
      LPVOID lpRawData
    );




#line 6064 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
       HANDLE     hEventLog,
       DWORD      dwInfoLevel,
      LPVOID lpBuffer,
       DWORD      cbBufSize,
      LPDWORD    pcbBytesNeeded
    );








typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
      OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
      OPERATION_END_PARAMETERS* OperationEndParams
    );

#line 6133 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
          LPCSTR SubsystemName,
      LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
          DWORD DesiredAccess,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 6159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 6186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 6211 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          HANDLE ClientToken,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 6237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 6238 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          HANDLE ClientToken,
          DWORD DesiredAccess,
          DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
          BOOL ObjectCreation,
          BOOL AccessGranted,
         LPBOOL GenerateOnClose
    );


#line 6259 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 6274 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 6286 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 6298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
      LPCSTR SubsystemName,
      LPCSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 6312 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
      PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         UCHAR AceType,
         DWORD AccessMask,
         PSID pSid,
        PWCHAR ConditionStr,
      DWORD *ReturnLength
    );
#line 6328 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
      LPCSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


#line 6340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
       LPCSTR lpFileName,
       SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
       DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


#line 6354 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
             HANDLE hDirectory,
      LPVOID lpBuffer,
             DWORD nBufferLength,
             BOOL bWatchSubtree,
             DWORD dwNotifyFilter,
        LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 6370 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
  
LPVOID
__stdcall
MapViewOfFileExNuma(
          HANDLE hFileMappingObject,
          DWORD dwDesiredAccess,
          DWORD dwFileOffsetHigh,
          DWORD dwFileOffsetLow,
          SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress,
          DWORD nndPreferred
    );

#line 6388 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
      FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
      LPCSTR lpsz,
          UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
      LPCWSTR lpsz,
          UINT_PTR ucchMax
    );




#line 6447 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidA(
      LPCSTR lpSystemName,
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidW(
      LPCWSTR lpSystemName,
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 6477 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameA(
      LPCSTR lpSystemName,
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 6507 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalA(
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalW(
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 6537 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalA(
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalW(
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 6565 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"























#line 6589 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
         PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
         PLUID   lpLuid
    );




#line 6611 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameA(
      LPCSTR lpSystemName,
          PLUID   lpLuid,
      LPSTR lpName,
       LPDWORD cchName
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameW(
      LPCWSTR lpSystemName,
          PLUID   lpLuid,
      LPWSTR lpName,
       LPDWORD cchName
    );




#line 6635 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
      LPSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
      LPWSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );




#line 6661 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
       LPCSTR lpDef,
      LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
       LPCWSTR lpDef,
      LPDCB lpDCB
    );




#line 6681 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
       LPCSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
       LPCWSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 6703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
          LPCSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
          LPCWSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );




#line 6725 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
         LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
         LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );




#line 6747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
      LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
      LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );




#line 6769 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





#line 6775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameA (
      LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameW (
      LPWSTR lpBuffer,
      LPDWORD nSize
    );




#line 6797 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
      LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
      LPCWSTR lpComputerName
    );




#line 6815 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
      COMPUTER_NAME_FORMAT NameType,
      LPCSTR lpBuffer
    );


#line 6829 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameA (
         LPCSTR Hostname,
      LPSTR ComputerName,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameW (
         LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );




#line 6854 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 6856 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
      LPSTR lpBuffer,
      LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
      LPWSTR lpBuffer,
      LPDWORD pcbBuffer
    );




#line 6876 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"













#line 6890 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





#line 6896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#line 6899 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#line 6902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
             LPCSTR lpszUsername,
         LPCSTR lpszDomain,
         LPCSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
             LPCWSTR lpszUsername,
         LPCWSTR lpszDomain,
         LPCWSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );




#line 6932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                 LPCSTR lpszUsername,
             LPCSTR lpszDomain,
             LPCSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                 LPCWSTR lpszUsername,
             LPCWSTR lpszDomain,
             LPCWSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );




#line 6968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





#line 6974 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
         HANDLE hToken,
         LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
         LPSECURITY_ATTRIBUTES lpProcessAttributes,
         LPSECURITY_ATTRIBUTES lpThreadAttributes,
             BOOL bInheritHandles,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCSTR lpCurrentDirectory,
             LPSTARTUPINFOA lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
    );


#line 6994 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"











__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithLogonW(
             LPCWSTR lpUsername,
         LPCWSTR lpDomain,
             LPCWSTR lpPassword,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithTokenW(
             HANDLE hToken,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

#line 7038 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
      HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
     PHANDLE phNewWaitObject,
             HANDLE hObject,
             WAITORTIMERCALLBACK Callback,
         PVOID Context,
             ULONG dwMilliseconds,
             ULONG dwFlags
    );

__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWait(
      HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
      HANDLE FileHandle,
      LPOVERLAPPED_COMPLETION_ROUTINE Function,
      ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
      HANDLE TimerQueue,
          WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
          DWORD DueTime,
          DWORD Period,
          BOOL PreferIo
    );

__declspec(dllimport)
 
BOOL
__stdcall
CancelTimerQueueTimer(
      HANDLE TimerQueue,
          HANDLE Timer
    );

__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueue(
      HANDLE TimerQueue
    );





__forceinline
void
InitializeThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
      PTP_CALLBACK_ENVIRON pcbe,
         PTP_POOL             ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              pcbe,
          PTP_CLEANUP_GROUP                 ptpcg,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
      PTP_CALLBACK_ENVIRON pcbe,
         PVOID                mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
      PTP_CALLBACK_ENVIRON pcbe,
         TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}

#line 7176 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__forceinline
void
SetThreadpoolCallbackPersistent(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}

#line 7196 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





__declspec(dllimport)
 
HANDLE
__stdcall
CreatePrivateNamespaceA(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 7216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenPrivateNamespaceA(
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 7231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
 
HANDLE
__stdcall
CreateBoundaryDescriptorA(
      LPCSTR Name,
      ULONG Flags
    );





#line 7251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID IntegrityLabel
    );


#line 7263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 7265 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
#line 7298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
      LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
      LPHW_PROFILE_INFOW  lpHwProfileInfo
    );




#line 7317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 7318 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
      LPOSVERSIONINFOEXA lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
      LPOSVERSIONINFOEXW lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );




#line 7340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


#line 7343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"












#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22074 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 26217 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"


__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}


#line 26223 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"










































#line 26266 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"


























































































































































































#line 26453 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 45549 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 54611 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\winerror.h"

#line 7350 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"
 










#pragma once
#line 14 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"

















#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"


extern "C" {
#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"



#pragma region Application Family







typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
FileTimeToSystemTime(
      const FILETIME * lpFileTime,
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToFileTime(
      const SYSTEMTIME * lpSystemTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetTimeZoneInformation(
      LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );


#line 121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );


#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"

#line 149 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformation(
      PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );


#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"




 
BOOL
__stdcall
GetTimeZoneInformationForYear(
      USHORT wYear,
      PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
      LPTIME_ZONE_INFORMATION ptzi
    );


#line 183 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"






__declspec(dllimport)
 
DWORD
__stdcall
EnumDynamicTimeZoneInformation(
      const DWORD dwIndex,
      PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
      const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
      LPDWORD FirstYear,
      LPDWORD LastYear
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


#line 233 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"

#line 235 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"
#pragma endregion




}
#line 242 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"

#line 244 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\timezoneapi.h"

#line 7351 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Desktop Family






























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
      LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
      BOOL fSuspend,
      BOOL fForce
    );

#line 7408 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
      PVOID *VirtualAddresses,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectA(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectW(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCWSTR lpName
    );




#line 7444 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );




#line 7468 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
      HANDLE hJob,
      HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
      HANDLE hJob,
      UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
       HANDLE hJob,
           JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
           DWORD cbJobObjectInformationLength,
      LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
      HANDLE hJob,
      JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
      DWORD cbJobObjectInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
      ULONG NumJob,
      PJOB_SET_ARRAY UserJobSet,
      ULONG Flags);

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );


#line 7524 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
      HANDLE hFindVolume,
      LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );


#line 7536 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
      LPCSTR lpszRootPathName,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
      LPCWSTR lpszRootPathName,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 7558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
      HANDLE hFindVolumeMountPoint,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
      HANDLE hFindVolumeMountPoint,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 7580 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
      HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPCWSTR lpszVolumeName
    );




#line 7607 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint
    );


#line 7617 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );


#line 7629 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
      LPCSTR lpszFileName,
      LPSTR lpszVolumePathName,
      DWORD cchBufferLength
    );


#line 7641 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 7643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
       LPCSTR lpszVolumeName,
         LPCH lpszVolumePathNames,
       DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );



#line 7659 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 7661 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"












typedef struct tagACTCTXA {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCSTR      lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCSTR      lpAssemblyDirectory;
    LPCSTR      lpResourceName;
    LPCSTR      lpApplicationName;
    HMODULE     hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCWSTR     lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCWSTR     lpAssemblyDirectory;
    LPCWSTR     lpResourceName;
    LPCWSTR     lpApplicationName;
    HMODULE     hModule;
} ACTCTXW, *PACTCTXW;




typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
#line 7702 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;



typedef PCACTCTXA PCACTCTX;
#line 7710 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
      PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
      PCACTCTXW pActCtx
    );




#line 7730 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
AddRefActCtx(
      HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
      HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
      HANDLE hActCtx
    );


 
__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
      HANDLE hActCtx,
        ULONG_PTR *lpCookie
    );




 
__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
      DWORD dwFlags,
      ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
     HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;







 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCWSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );




#line 7855 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
        const GUID *lpGuidToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE  hActCtx;
    DWORD   dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;



#line 7881 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 7882 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




































 
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

typedef   BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

#line 7943 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );

#line 7955 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
      WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
      WORD GroupNumber
    );

#line 7987 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
       UCHAR Processor,
      PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
       HANDLE hFile,
      PUSHORT NodeNumber
    );

#line 8011 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
       PPROCESSOR_NUMBER Processor,
      PUSHORT NodeNumber
    );

#line 8023 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
       UCHAR Node,
      PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
       UCHAR Node,
      PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
       USHORT Node,
      PULONGLONG AvailableBytes
    );

#line 8051 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
       ULONG ProximityId,
      PUCHAR NodeNumber
    );

#line 8063 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
       ULONG ProximityId,
      PUSHORT NodeNumber
    );

#line 8075 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);































__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
       APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
       PVOID pvParameter,
      DWORD dwPingInterval,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
      PCWSTR pwzCommandline,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
       HANDLE hProcess,
      APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
     PVOID* ppvParameter,
      PDWORD pdwPingInterval,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
      HANDLE hProcess,
      PWSTR pwzCommandline,
      PDWORD pcchSize,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
      PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
      BOOL bSuccess
    );

#line 8175 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 8177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion



#pragma region Application Family


typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;




















typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;

#line 8356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"












#line 8369 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"









#line 8379 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"










#line 8390 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    
    USHORT StructureVersion;     
    USHORT StructureSize;        

    ULONG  Protocol;             

    
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    
    ULONG  Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;

    





#line 8420 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;

#line 8440 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
       HANDLE hFile,
       FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
       DWORD dwBufferSize
);

#line 8454 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;  
    FILE_ID_TYPE Type; 
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;
#line 8475 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
          HANDLE hVolumeHint,
          LPFILE_ID_DESCRIPTOR lpFileId,
          DWORD dwDesiredAccess,
          DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          DWORD dwFlagsAndAttributes
    );

#line 8491 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#line 8494 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#pragma region Desktop Family












__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
      LPCSTR lpSymlinkFileName,
      LPCSTR lpTargetFileName,
      DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
      LPCWSTR lpSymlinkFileName,
      LPCWSTR lpTargetFileName,
      DWORD dwFlags
    );




#line 8529 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
          LPCSTR lpSymlinkFileName,
          LPCSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
          LPCWSTR lpSymlinkFileName,
          LPCWSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 8553 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 8555 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
           DWORD dwFlags,
           HANDLE hActCtx,
           PCWSTR settingsNameSpace,
               PCWSTR settingName,
      PWSTR pvBuffer,
           SIZE_T dwBuffer,
      SIZE_T *pdwWrittenOrRequired
    );

#line 8573 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
      PWSTR TargetPartition,
      PWSTR SparePartition,
      ULONG Flags
    );

#line 8586 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

#line 8605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 8607 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
      PCONTEXT Destination,
      DWORD ContextFlags,
      PCONTEXT Source
    );

#line 8625 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


 
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
      PVOID Buffer,
      DWORD ContextFlags,
      PCONTEXT* Context,
      PDWORD ContextLength
    );
#line 8641 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion



#pragma region Application Family


__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );

 
__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
      PCONTEXT Context,
      PDWORD64 FeatureMask
    );

 
__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
      PCONTEXT Context,
      DWORD FeatureId,
      PDWORD Length
    );

#line 8675 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
      PCONTEXT Context,
      DWORD64 FeatureMask
    );

#line 8690 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#line 8693 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 8695 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
      HANDLE ThreadHandle,
      DWORD Flags,
      DWORD64 HardwareCounters,
      HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
      HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
      HANDLE ThreadHandle,
      PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
      HANDLE PerformanceDataHandle,
      DWORD Flags,
      PPERFORMANCE_DATA PerformanceData
    );

#line 8736 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#pragma endregion

#line 8739 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"






#line 8746 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 8747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"


}
#line 8751 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



#pragma warning(pop)




#line 8760 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 8761 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



#line 8765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




























#pragma once
#line 8795 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"










#line 8806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"





extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
       unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedIncrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedIncrement64((volatile long long*) Addend);
}

#line 8843 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__forceinline
unsigned
_InterlockedDecrement(
       unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedDecrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedDecrement64((volatile long long*) Addend);
}

#line 8874 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"



__forceinline
unsigned
_InterlockedExchange(
       unsigned volatile *Target,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
       unsigned long volatile *Target,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
       unsigned __int64 volatile *Target,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchange64((volatile long long*) Target, (long long) Value);
}

#line 8910 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__forceinline
unsigned
_InterlockedExchangeAdd(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend,  (long long) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend,  - (long long) Value);
}

#line 8974 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

__forceinline
unsigned
_InterlockedCompareExchange(
       unsigned volatile *Destination,
      unsigned Exchange,
      unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
       unsigned long volatile *Destination,
      unsigned long Exchange,
      unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Exchange,
      unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile long long*) Destination, (long long) Exchange, (long long) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedAnd64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedOr64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedXor64((volatile long long*) Destination, (long long) Value);
}

#line 9041 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 9043 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

} 
#line 9046 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 9048 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"




#line 9053 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 9054 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 9055 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 9056 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 9057 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"
#line 9058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winbase.h"

#line 166 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"














#pragma once


#pragma warning(push)
#pragma warning(disable: 4201)      
#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"














#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"









#line 46 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


extern "C" {
#line 50 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
















































#line 99 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





#line 105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"






#line 112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"






























#line 143 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"













#line 157 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

















#line 175 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
















#line 192 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 198 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"














































































#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"








#pragma region Desktop Family



typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 296 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 301 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





































































































#line 403 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"











#pragma region Desktop Family






typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;

#line 432 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



































































#line 501 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family






typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;

#line 531 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



















































#pragma region Application Family


typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 609 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack1.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack1.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack1.h"
#line 612 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE,  *NPRGBTRIPLE,  *LPRGBTRIPLE;

#line 623 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 626 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;

#line 638 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef RGBQUAD * LPRGBQUAD;

#line 646 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion


















#pragma region Application Family


typedef LONG   LCSCSTYPE;



typedef LONG    LCSGAMUTMATCH;



























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;

#line 714 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZ   *LPCIEXYZ;

#line 722 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;

#line 735 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;

#line 743 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family







typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 784 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 786 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 789 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family



typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

#line 803 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

#line 823 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

#line 854 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion
#line 856 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#pragma region Desktop Family

typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

#line 889 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion




#line 895 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"









#line 905 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

#line 915 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 926 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 929 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

#line 942 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 945 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"






#pragma region Desktop Family


typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;

#line 968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion






#line 976 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

#line 988 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 991 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 992 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#pragma region Application Family




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;

#line 1013 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagMETARECORD __unaligned *PMETARECORD;

#line 1021 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagMETARECORD __unaligned  *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1037 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 1040 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER __unaligned *PMETAHEADER;
typedef struct tagMETAHEADER __unaligned  *LPMETAHEADER;

#line 1058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 1061 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family



typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 1102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

    SIZEL   szlMicrometers;     
#line 1105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 1109 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"









#pragma region Desktop Family








    typedef BYTE BCHAR;
#line 1132 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1134 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 1139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 1200 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1202 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 1205 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 1206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"















#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack4.h"
#line 1222 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1291 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1293 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 1296 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1319 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion
#line 1321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1323 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;

#line 1339 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR   lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

#line 1360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;

#line 1371 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

#line 1385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR   elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

#line 1401 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagEXTLOGPEN32 {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG       elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32,  *NPEXTLOGPEN32,  *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;
#line 1425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
      PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
#line 1435 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1485 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1487 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family



typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1515 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1538 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 1539 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1541 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion





















#line 1564 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"








#line 1573 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




#line 1578 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"






#line 1585 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"








































#line 1626 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




                                    

                                    

                                    



































#pragma region Application Family


typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1834 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 1836 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion
















































































#line 1918 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




#line 1923 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"







#line 1931 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


































































































                             

                             

                             





#line 2040 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"










































































#line 2115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





































#line 2153 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




























#pragma region Application Family



typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 2238 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2291 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 2292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 2304 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"












































































































#line 2413 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 2415 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion








#line 2425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"










#line 2436 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 2439 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"






















#line 2462 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 2465 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"













































































#line 2543 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




















































#line 2596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"







#line 2604 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"












































#line 2649 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
















#line 2666 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

















































#line 2716 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2745 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 2747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion








#line 2757 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 2760 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




#line 2765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#line 2769 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





#line 2775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




                                          
                                          

#pragma region Application Family


typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32    Numerator;
    UINT32    Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                   = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                    =  0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                  =  1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO         =  2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO         =  3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                     =  4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                    =  5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                    =  6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                   =  8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                     =  9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL    = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED    = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL            = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED            = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE              = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST                = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL                = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32            = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                 = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                 = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                  = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST  = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST  = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64                          pixelRate;
    DISPLAYCONFIG_RATIONAL          hSyncFreq;
    DISPLAYCONFIG_RATIONAL          vSyncFreq;
    DISPLAYCONFIG_2DREGION          activeSize;
    DISPLAYCONFIG_2DREGION          totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;

            
            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    };

    
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY                  = 1,
    DISPLAYCONFIG_SCALING_CENTERED                  = 2,
    DISPLAYCONFIG_SCALING_STRETCHED                 = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX    = 4,
    DISPLAYCONFIG_SCALING_CUSTOM                    = 5,
    DISPLAYCONFIG_SCALING_PREFERRED                 = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32              = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY     = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90     = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180    = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270    = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP          = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP         = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP         = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP         = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI        = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32  = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32                      width;
    UINT32                      height;
    DISPLAYCONFIG_PIXELFORMAT   pixelFormat;
    POINTL                      position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO   targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE    infoType;
    UINT32                          id;
    LUID                            adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE   targetMode;
        DISPLAYCONFIG_SOURCE_MODE   sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID    adapterId;
    UINT32  id;
    UINT32  modeInfoIdx;
    UINT32  statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID                                    adapterId;
    UINT32                                  id;
    UINT32                                  modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY   outputTechnology;
    DISPLAYCONFIG_ROTATION                  rotation;
    DISPLAYCONFIG_SCALING                   scaling;
    DISPLAYCONFIG_RATIONAL                  refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING         scanLineOrdering;
    BOOL                                    targetAvailable;
    UINT32                                  statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;










typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO  sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO  targetInfo;
    UINT32                          flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL       = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE          = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND         = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL       = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME             = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME             = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE   = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME            = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE      = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE        = 6,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;

#line 2992 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion


#pragma region Application Family


typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE  type;
    UINT32                          size;
    LUID                            adapterId;
    UINT32                          id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;

#line 3007 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    WCHAR                                       viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32  friendlyNameFromEdid : 1;
            UINT32  friendlyNameForced : 1;
            UINT32  edidIdsValid : 1;
            UINT32  reserved : 29;
        };
        UINT32  value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS      flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY       outputTechnology;
    UINT16                                      edidManufactureId;
    UINT16                                      edidProductCodeId;
    UINT32                                      connectorInstance;
    WCHAR                                       monitorFriendlyDeviceName[64];
    WCHAR                                       monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    UINT32                              width;
    UINT32                              height;
    DISPLAYCONFIG_TARGET_MODE           targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    WCHAR                               adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER      header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn    : 1;
            UINT32 reserved             : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;

#line 3079 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion
































#line 3113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





#pragma region Application Family


typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;

#line 3135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion






#pragma region Desktop Family


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;

#line 3158 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion







#pragma region Desktop Family


typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 3248 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 3250 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion





#line 3257 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 3292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 3294 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 3307 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;

#line 3328 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion













#line 3343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



#line 3347 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"







#pragma region Desktop Family


typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;

#line 3378 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion













































#pragma region Desktop Family


typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 3458 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 3460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion
#line 3462 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;

#line 3473 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion





#pragma region Application Family



typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

#line 3514 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion


































#pragma region Desktop Family





typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 3562 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"








#line 3571 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 3579 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 3594 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 3596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport) int __stdcall AddFontResourceA(  LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(  LPCWSTR);




#line 3610 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

 __declspec(dllimport) BOOL  __stdcall AnimatePalette(   HPALETTE hPal,   UINT iStartIndex,    UINT cEntries,   const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL  __stdcall Arc(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
 __declspec(dllimport) BOOL  __stdcall BitBlt(   HDC hdc,   int x,   int y,   int cx,   int cy,   HDC hdcSrc,   int x1,   int y1,   DWORD rop);
__declspec(dllimport) BOOL  __stdcall CancelDC(   HDC hdc);
 __declspec(dllimport) BOOL  __stdcall Chord(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(   HDC hdc,   const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(   HDC hdc);
__declspec(dllimport) int     __stdcall CombineRgn(   HRGN hrgnDst,   HRGN hrgnSrc1,   HRGN hrgnSrc2,   int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(   HMETAFILE,   LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(   HMETAFILE,   LPCWSTR);




#line 3626 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) HBITMAP __stdcall CreateBitmap(   int nWidth,   int nHeight,   UINT nPlanes,   UINT nBitCount,   const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(   const BITMAP *pbm);
 __declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(   const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(   HDC hdc);
__declspec(dllimport) HDC     __stdcall CreateDCA(   LPCSTR pwszDriver,   LPCSTR pwszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateDCW(   LPCWSTR pwszDriver,   LPCWSTR pwszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3639 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(   HDC hdc,   const BITMAPINFOHEADER *pbmih,   DWORD flInit,   const void *pjBits,   const BITMAPINFO *pbmi,   UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(   HGLOBAL h,   UINT iUsage);
 __declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(   const void *lpPackedDIB,   UINT iUsage);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(   const RECT *lprect);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(   const LOGFONTA *lplf);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(   const LOGFONTW *lplf);




#line 3651 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCSTR pszFaceName);
__declspec(dllimport) HFONT   __stdcall CreateFontW(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCWSTR pszFaceName);




#line 3662 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(   int iHatch,   COLORREF color);
__declspec(dllimport) HDC     __stdcall CreateICA(   LPCSTR pszDriver,   LPCSTR pszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateICW(   LPCWSTR pszDriver,   LPCWSTR pszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3671 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(   LPCSTR pszFile);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(   LPCWSTR pszFile);




#line 3678 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) HPALETTE __stdcall CreatePalette(   const LOGPALETTE * plpal);
__declspec(dllimport) HPEN    __stdcall CreatePen(   int iStyle,   int cWidth,   COLORREF color);
 __declspec(dllimport) HPEN    __stdcall CreatePenIndirect(   const LOGPEN *plpen);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(    const POINT *pptl,
                                                  const INT  *pc,
                                                  int cPoly,
                                                  int iMode);
 __declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(   HBITMAP hbm);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(   const RECT *lprect);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(   int x1,   int y1,   int x2,   int y2,   int w,   int h);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(   DWORD fdwHidden,   LPCSTR lpszFont,   LPCSTR lpszFile,   LPCSTR lpszPath);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(   DWORD fdwHidden,   LPCWSTR lpszFont,   LPCWSTR lpszFile,   LPCWSTR lpszPath);




#line 3696 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(   COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC(   HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject(   HGDIOBJ ho);
__declspec(dllimport) int  __stdcall DescribePixelFormat(    HDC hdc,
                                              int iPixelFormat,
                                              UINT nBytes,
                                              LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

#line 3715 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion






































#line 3755 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


















#line 3774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 3775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

















#line 3793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                     LPCSTR         pDevice,
                 LPCSTR         pPort,
                     WORD             fwCapability,
      LPSTR          pOutput,
                 const DEVMODEA   *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                     LPCWSTR         pDevice,
                 LPCWSTR         pPort,
                     WORD             fwCapability,
      LPWSTR          pOutput,
                 const DEVMODEW   *pDevMode
    );




#line 3822 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(     HDC    hdc,
                                      int    iEscape,
                                      int    cjIn,
                                      LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse(   HDC hdc,   int left,   int top,    int right,   int bottom);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(   HDC hdc,   LPLOGFONTA lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam,   DWORD dwFlags);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(   HDC hdc,   LPLOGFONTW lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam,   DWORD dwFlags);




#line 3838 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 3839 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(   HDC hdc,   LPCSTR lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(   HDC hdc,   LPCWSTR lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3847 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(   HDC hdc,   LPCSTR lpLogfont,    FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontsW(   HDC hdc,   LPCWSTR lpLogfont,    FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3854 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(   HDC hdc,   int nType,   GOBJENUMPROC lpFunc,   LPARAM lParam);


#line 3860 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(   HRGN hrgn1,   HRGN hrgn2);
 __declspec(dllimport) int  __stdcall Escape(     HDC hdc,
                                  int iEscape,
                                  int cjIn,
                                  LPCSTR pvIn,
                                  LPVOID pvOut);
__declspec(dllimport) int  __stdcall ExtEscape(      HDC hdc,
                                      int iEscape,
                                      int cjInput,
                                      LPCSTR lpInData,
                                      int cjOutput,
                                      LPSTR lpOutData);
 __declspec(dllimport) int  __stdcall ExcludeClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion(   const XFORM * lpx,   DWORD nCount,   const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill(   HDC hdc,   int x,   int y,   COLORREF color,   UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill(   HDC hdc,   int x,   int y,   COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr,   int w,   int h);
__declspec(dllimport) int  __stdcall GetROP2(   HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor(   HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor(   HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor(   HDC hdc);
#line 3888 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport)
int
__stdcall
GetBkMode(
      HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
      HBITMAP hbit,
      LONG cb,
      LPVOID lpvBits
    );

__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(   HBITMAP hbit,   LPSIZE lpsize);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(   HDC hdc,   LPRECT lprect,   UINT flags);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(   HDC hdc,   LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);




#line 3917 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);




#line 3924 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);




#line 3931 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);




#line 3945 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);




#line 3953 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(   HDC hdc,    LPRECT lprect);
__declspec(dllimport) int   __stdcall GetClipRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) int   __stdcall GetMetaRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(   HDC hdc,   UINT type);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(   HDC hdc,    LPPOINT lppt);
__declspec(dllimport) int   __stdcall GetDeviceCaps(   HDC hdc,   int index);
__declspec(dllimport) int   __stdcall GetDIBits(   HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,
      LPVOID lpvBits,  LPBITMAPINFO lpbmi,   UINT usage);  

 
__declspec(dllimport) DWORD __stdcall GetFontData (      HDC     hdc,
                                          DWORD   dwTable,
                                          DWORD   dwOffset,
                                          PVOID pvBuffer,
                                          DWORD   cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );




#line 3991 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) int   __stdcall GetGraphicsMode(   HDC hdc);
__declspec(dllimport) int   __stdcall GetMapMode(   HDC hdc);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(  HMETAFILE hMF,   UINT cbBuffer,   LPVOID lpData);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(   LPCWSTR lpName);




#line 4002 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(   HDC hdc,   COLORREF color);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(   HPALETTE h,   COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType(   HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICW potm);




#line 4019 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 4021 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

 
__declspec(dllimport) UINT  __stdcall GetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel(   HDC hdc,   int x,   int y);
__declspec(dllimport) int   __stdcall GetPixelFormat(   HDC hdc);
__declspec(dllimport) int   __stdcall GetPolyFillMode(   HDC hdc);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(     LPRASTERIZER_STATUS lpraststat,
                                              UINT cjBytes);

__declspec(dllimport) int   __stdcall GetRandomRgn (  HDC hdc,   HRGN hrgn,   INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData(     HRGN hrgn,
                                          DWORD nCount,
                                          LPRGNDATA lpRgnData);
__declspec(dllimport) int   __stdcall GetRgnBox(   HRGN hrgn,    LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(   int i);
__declspec(dllimport) int   __stdcall GetStretchBltMode(  HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
      HDC  hdc,
      UINT iStart,
      UINT cEntries,
      LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(  HDC hdc);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(  HDC hdc);
__declspec(dllimport) UINT  __stdcall GetTextAlign(  HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor(  HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE lpsz
    );




#line 4078 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE psizl
    );




#line 4102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
      HDC hdc,
      LPCSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
      HDC hdc,
      LPCWSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );




#line 4132 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


__declspec(dllimport) int __stdcall GetTextCharset(   HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(   HDC hdc,   LPFONTSIGNATURE lpSig,   DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(   DWORD  *lpSrc,    LPCHARSETINFO lpCs,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(   HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(    HDC hdc,   LPCSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSA lpResults,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(    HDC hdc,   LPCWSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSW lpResults,   DWORD dwFlags);




#line 4145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 4146 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 4148 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagWCRANGE
{
    WCHAR  wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD    cbThis;
    DWORD    flAccel;
    DWORD    cGlyphsSupported;
    DWORD    cRanges;
    WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET,  *LPGLYPHSET;









__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges(   HDC hdc,   LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA(   HDC hdc,   LPCSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW(   HDC hdc,   LPCWSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);




#line 4187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointI(  HDC hdc,   LPWORD pgiIn,   int cgi,   LPSIZE psize);
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointI (    HDC hdc,
                                                  LPWORD lpwszString,
                                                  int cwchString,
                                                  int nMaxExtent,
                                                  LPINT lpnFit,
                                                  LPINT lpnDx,
                                                  LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL  __stdcall GetCharWidthI(     HDC hdc,
                                          UINT giFirst,
                                          UINT cgi,
                                          LPWORD pgi,
                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsI(     HDC    hdc,
                                              UINT   giFirst,
                                              UINT   cgi,
                                              LPWORD pgi,
                                              LPABC  pabc
                                        );








typedef struct tagDESIGNVECTOR
{
    DWORD  dvReserved;
    DWORD  dvNumAxes;
    LONG   dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR,  *LPDESIGNVECTOR;

__declspec(dllimport) int  __stdcall AddFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID res);
__declspec(dllimport) int  __stdcall AddFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID res);




#line 4232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID pdv);




#line 4239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx(     PVOID pFileView,
                                                  DWORD cjSize,
                                                  PVOID pvResrved,
                                                  DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx(   HANDLE h);









typedef struct tagAXISINFOA
{
    LONG   axMinValue;
    LONG   axMaxValue;
    BYTE   axAxisName[16];
} AXISINFOA, *PAXISINFOA,  *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG   axMinValue;
    LONG   axMaxValue;
    WCHAR  axAxisName[16];
} AXISINFOW, *PAXISINFOW,  *LPAXISINFOW;





typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
#line 4275 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

typedef struct tagAXESLISTA
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA,  *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW,  *LPAXESLISTW;





typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;
#line 4297 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA,  *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW,  *LPENUMLOGFONTEXDVW;





typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
#line 4321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExA(   const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExW(   const ENUMLOGFONTEXDVW *);




#line 4329 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA        etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA,  *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW        etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW,  *LPENUMTEXTMETRICW;





typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
#line 4350 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#line 4351 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 4353 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 4356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(   HDC hdc,   LPPOINT lppoint);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(   HDC hdc,   LPPOINT lppoint);

 __declspec(dllimport) int  __stdcall IntersectClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA(   int xStart,   int yStart,   int xEnd,   int yEnd,   LINEDDAPROC lpProc,   LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo(   HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall MaskBlt(   HDC hdcDest,   int xDest,   int yDest,   int width,   int height,
                HDC hdcSrc,   int xSrc,   int ySrc,   HBITMAP hbmMask,   int xMask,   int yMask,   DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt(   HDC hdcDest,   const POINT * lpPoint,   HDC hdcSrc,   int xSrc,   int ySrc,   int width,
                       int height,   HBITMAP hbmMask,   int xMask,   int yMask);

 __declspec(dllimport) int  __stdcall OffsetClipRgn(  HDC hdc,   int x,   int y);
__declspec(dllimport) int  __stdcall OffsetRgn(  HRGN hrgn,   int x,   int y);
 __declspec(dllimport) BOOL __stdcall PatBlt(  HDC hdc,   int x,   int y,   int w,   int h,   DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(  HDC hdc,   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn(  HDC hdc,   HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon(  HDC hdc,    const POINT *apt,    const INT *asz,    int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion(  HRGN hrgn,   int x,   int y);
__declspec(dllimport) BOOL __stdcall PtVisible(  HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall RectInRegion(  HRGN hrgn,   const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible(  HDC hdc,   const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle(  HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC(  HDC hdc,   int nSavedDC);
 __declspec(dllimport) HDC  __stdcall ResetDCA(  HDC hdc,   const DEVMODEA * lpdm);
 __declspec(dllimport) HDC  __stdcall ResetDCW(  HDC hdc,   const DEVMODEW * lpdm);




#line 4394 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) UINT __stdcall RealizePalette(  HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(  LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(  LPCWSTR lpFileName);




#line 4402 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall RoundRect(  HDC hdc,   int left,   int top,   int right,   int bottom,   int width,   int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette(  HPALETTE hpal,   UINT n);

 __declspec(dllimport) int  __stdcall SaveDC(  HDC hdc);
 __declspec(dllimport) int  __stdcall SelectClipRgn(  HDC hdc,   HRGN hrgn);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(  HDC hdc,   HRGN hrgn,   int mode);
__declspec(dllimport) int  __stdcall SetMetaRgn(  HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject(  HDC hdc,   HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette(  HDC hdc,   HPALETTE hPal,   BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor(  HDC hdc,   COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor(  HDC hdc,   COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor(  HDC hdc,   COLORREF color);
#line 4417 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

 __declspec(dllimport) int   __stdcall SetBkMode(  HDC hdc,   int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
      HBITMAP hbm,
      DWORD cb,
      const void *pvBits);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(  HDC hdc,   const RECT * lprect,   UINT flags);
__declspec(dllimport) int   __stdcall SetDIBits(  HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,   const void *lpBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) int   __stdcall SetDIBitsToDevice(  HDC hdc,   int xDest,   int yDest,   DWORD w,   DWORD h,   int xSrc,
          int ySrc,   UINT StartScan,   UINT cLines,   const void * lpvBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags(  HDC hdc,   DWORD flags);
__declspec(dllimport) int   __stdcall SetGraphicsMode(  HDC hdc,   int iMode);
 __declspec(dllimport) int   __stdcall SetMapMode(  HDC hdc,   int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout(  HDC hdc,   DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout(  HDC hdc);
#line 4439 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(  UINT cbBuffer,   const BYTE *lpData);
 __declspec(dllimport) UINT  __stdcall SetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL   __stdcall SetPixelV(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(  HDC hdc,   int format,   const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int   __stdcall SetPolyFillMode(  HDC hdc,   int mode);
 __declspec(dllimport) BOOL  __stdcall StretchBlt(  HDC hdcDest,   int xDest,   int yDest,   int wDest,   int hDest,   HDC hdcSrc,   int xSrc,   int ySrc,   int wSrc,   int hSrc,   DWORD rop);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(  HRGN hrgn,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) int   __stdcall StretchDIBits(  HDC hdc,   int xDest,   int yDest,   int DestWidth,   int DestHeight,   int xSrc,   int ySrc,   int SrcWidth,   int SrcHeight,
          const void * lpBits,   const BITMAPINFO * lpbmi,   UINT iUsage,   DWORD rop);
 __declspec(dllimport) int   __stdcall SetROP2(  HDC hdc,   int rop2);
 __declspec(dllimport) int   __stdcall SetStretchBltMode(  HDC hdc,   int mode);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(  HDC hdc,   UINT use);
 __declspec(dllimport) int   __stdcall SetTextCharacterExtra(  HDC hdc,   int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor(  HDC hdc,   COLORREF color);
 __declspec(dllimport) UINT  __stdcall SetTextAlign(  HDC hdc,   UINT align);
 __declspec(dllimport) BOOL  __stdcall SetTextJustification(  HDC hdc,   int extra,   int count);
__declspec(dllimport) BOOL  __stdcall UpdateColors(  HDC hdc);

#line 4463 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion












































#pragma region Application Family


typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

#line 4524 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

#line 4543 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;

#line 4557 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family















__declspec(dllimport) BOOL __stdcall AlphaBlend(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      UINT crTransparent);











__declspec(dllimport)
BOOL
__stdcall
GradientFill(
      HDC hdc,
      PTRIVERTEX pVertex,
      ULONG nVertex,
      PVOID pMesh,
      ULONG nMesh,
      ULONG ulMode
    );

#line 4624 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 4627 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family





__declspec(dllimport) BOOL  __stdcall GdiAlphaBlend(  HDC hdcDest,   int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,   int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   BLENDFUNCTION ftn);

__declspec(dllimport) BOOL  __stdcall GdiTransparentBlt(  HDC hdcDest,  int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,
                                             int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   UINT crTransparent);

__declspec(dllimport) BOOL  __stdcall GdiGradientFill(   HDC hdc,
                                          PTRIVERTEX pVertex,
                                          ULONG nVertex,
                                          PVOID pMesh,
                                          ULONG nCount,
                                          ULONG ulMode);

#line 4647 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(    HDC hdc,
                                              LPHANDLETABLE lpHandleTable,
                                              LPMETARECORD lpMR,
                                              UINT noObjs);

typedef int (__stdcall* MFENUMPROC)(   HDC hdc,   HANDLETABLE * lpht,   METARECORD * lpMR,   int nObj,   LPARAM param);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(   HDC hdc,   HMETAFILE hmf,   MFENUMPROC proc,   LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)(  HDC hdc,   HANDLETABLE * lpht,   const ENHMETARECORD * lpmr,   int nHandles,   LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(   HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(   HENHMETAFILE hEnh,   LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(   HENHMETAFILE hEnh,   LPCWSTR lpFileName);




#line 4672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(   HDC hdc,   LPCSTR lpFilename,   const RECT *lprc,   LPCSTR lpDesc);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(   HDC hdc,   LPCWSTR lpFilename,   const RECT *lprc,   LPCWSTR lpDesc);




#line 4679 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(   HENHMETAFILE hmf);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   ENHMFENUMPROC proc,
                                          LPVOID param,   const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(   LPCWSTR lpName);




#line 4689 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(    HENHMETAFILE hEMF,
                                              UINT nSize,
                                              LPBYTE lpData);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPSTR lpDescription);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPWSTR lpDescription);




#line 4703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(      HENHMETAFILE hemf,
                                                  UINT nSize,
                                                  LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(  HENHMETAFILE hemf,
                                                      UINT nNumEntries,
                                                      LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(     HENHMETAFILE hemf,
                                                      UINT cbBuffer,
                                                      PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(    HENHMETAFILE hemf,
                                              UINT cbData16,
                                              LPBYTE pData16,
                                              INT iMapMode,
                                              HDC hdcRef);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   const RECT * lprect);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(     HDC hdc,
                                                  LPHANDLETABLE pht,
                                                  const ENHMETARECORD *pmr,
                                                  UINT cht);

__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(    UINT nSize,
                                                      const BYTE * pb);

__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(    UINT nSize,
                                                      const BYTE *lpMeta16Data,
                                                      HDC hdcRef,
                                                      const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL  __stdcall GdiComment(  HDC hdc,   UINT nSize,   const BYTE *lpData);

#line 4734 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(   HDC hdc,   LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(   HDC hdc,   LPTEXTMETRICW lptm);




#line 4744 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



















#line 4764 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 4766 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP       dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc(   HDC hdc,   int x,   int y,   DWORD r,   FLOAT StartAngle,   FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline(  HDC hdc,   const POINT *apt,   const DWORD *asz,   DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(   HDC hdc,   LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(   HDC hdc,   const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(   HDC hdc,   const XFORM * lpxf,   DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform(   LPXFORM lpxfOut,   const XFORM *lpxf1,   const XFORM *lpxf2);






__declspec(dllimport)   HBITMAP __stdcall CreateDIBSection(
             HDC               hdc,
                 const BITMAPINFO *pbmi,
                 UINT              usage,
    
    
                    void            **ppvBits,
             HANDLE            hSection,
                 DWORD             offset);


 
__declspec(dllimport) UINT __stdcall GetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          const RGBQUAD *prgbq);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(   HDC hdc,   const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(   HDC hdc,   LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(   HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)(   HDC,   int);


#line 4870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 4879 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 4888 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 4896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




#line 4901 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

 __declspec(dllimport) int __stdcall StartDocA(  HDC hdc,   const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW(  HDC hdc,   const DOCINFOW *lpdi);




#line 4909 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) int __stdcall EndDoc(  HDC hdc);
 __declspec(dllimport) int __stdcall StartPage(  HDC hdc);
 __declspec(dllimport) int __stdcall EndPage(  HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc(  HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc(  HDC hdc,   ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure(  HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath(  HDC hdc);
__declspec(dllimport) int  __stdcall GetPath(  HDC hdc,   LPPOINT apt,   LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion(  HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw(  HDC hdc,   const POINT * apt,   const BYTE * aj,   int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath(  HDC hdc,   int mode);
__declspec(dllimport) int  __stdcall SetArcDirection(  HDC hdc,   int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(  HDC hdc,   FLOAT limit,   PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath(  HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(   DWORD iPenStyle,
                                      DWORD cWidth,
                                      const LOGBRUSH *plbrush,
                                      DWORD cStyle,
                                      const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(  HDC hdc,   PFLOAT plimit);
__declspec(dllimport) int  __stdcall GetArcDirection(  HDC hdc);

__declspec(dllimport) int   __stdcall GetObjectA(  HANDLE h,   int c,   LPVOID pv);
__declspec(dllimport) int   __stdcall GetObjectW(  HANDLE h,   int c,   LPVOID pv);




#line 4946 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




















#line 4967 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


 __declspec(dllimport) BOOL  __stdcall MoveToEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall TextOutA(   HDC hdc,   int x,   int y,   LPCSTR lpString,   int c);
 __declspec(dllimport) BOOL  __stdcall TextOutW(   HDC hdc,   int x,   int y,   LPCWSTR lpString,   int c);




#line 4977 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall ExtTextOutA(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCSTR lpString,   UINT c,   const INT * lpDx);
 __declspec(dllimport) BOOL  __stdcall ExtTextOutW(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCWSTR lpString,   UINT c,   const INT * lpDx);




#line 4984 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(  HDC hdc,   const POLYTEXTA * ppt,   int nstrings);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(  HDC hdc,   const POLYTEXTW * ppt,   int nstrings);




#line 4991 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(      const POINT *pptl,
                                              int cPoint,
                                              int iMode);
__declspec(dllimport) BOOL  __stdcall DPtoLP(   HDC hdc,   LPPOINT lppt,   int c);
__declspec(dllimport) BOOL  __stdcall LPtoDP(   HDC hdc,   LPPOINT lppt,   int c);
 __declspec(dllimport) BOOL  __stdcall Polygon(  HDC hdc,   const POINT *apt,   int cpt);
 __declspec(dllimport) BOOL  __stdcall Polyline(  HDC hdc,   const POINT *apt,   int cpt);

__declspec(dllimport) BOOL  __stdcall PolyBezier(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolylineTo(  HDC hdc,   const POINT * apt,   DWORD cpt);

 __declspec(dllimport) BOOL  __stdcall SetViewportExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall SetWindowExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

 __declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(   HDC hdc,   int xn,   int dx,   int yn,   int yd,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(   HDC hdc,   int xn,   int xd,   int yn,   int yd,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(   HBITMAP hbm,   int w,   int h,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

__declspec(dllimport) int   __stdcall GetTextFaceA(   HDC hdc,   int c,    LPSTR lpName);
__declspec(dllimport) int   __stdcall GetTextFaceW(   HDC hdc,   int c,    LPWSTR lpName);




#line 5023 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);




#line 5043 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(   HDC hdc,   LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(   HDC hdc,   int x,   int y,    LPPOINT ptl);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(   HGDIOBJ h);

__declspec(dllimport) BOOL  __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(   DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);








typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 5067 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(   HDC hdc,   int mode);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(      HDC hdc,
                                                      LPRGBTRIPLE lpRGBTriple,
                                                      LPVOID dlpBuffer,
                                                      DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(   HDC hdc);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEA lpBuffer,
                                                  DWORD nSize);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEW lpBuffer,
                                                  DWORD nSize);




#line 5086 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(   LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(   LPLOGCOLORSPACEW lplcs);




#line 5094 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(   HDC hdc,   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPSTR pszFilename);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPWSTR pszFilename);




#line 5107 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall SetICMProfileA(   HDC hdc,   LPSTR lpFileName);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(   HDC hdc,   LPWSTR lpFileName);




#line 5115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(   HDC hdc,   LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(   HDC hdc,    LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(   HDC hdc,   HDC hdcTarget,   DWORD action);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(   HDC hdc,   ICMENUMPROCA proc,   LPARAM param);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(   HDC hdc,   ICMENUMPROCW proc,   LPARAM param);




#line 5125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(   DWORD reserved,   LPSTR lpszCMID,   LPSTR lpszFileName,   UINT command);

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(   DWORD reserved,   LPWSTR lpszCMID,   LPWSTR lpszFileName,   UINT command);




#line 5134 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)

#line 5138 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(   HDC hdc,   HPALETTE hPal,   DWORD deFirst,   DWORD num);
#line 5142 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"









#line 5152 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




















































































































#line 5269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
















#line 5286 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"





#line 5292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"









#line 5302 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,
#line 5350 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN32 elp;            
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

#line 5933 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"



typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


#line 6058 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"










#line 6069 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 6089 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 6115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);

#line 6214 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 6216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion

#line 6219 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#pragma region Desktop Family



#line 6225 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"
#pragma endregion


}
#line 6230 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#pragma warning(pop)
#line 6234 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"

#line 6236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wingdi.h"


#line 167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#pragma once










#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






extern "C" {
#line 46 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 70 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 77 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Application Family


typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);

#line 91 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 117 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





































#line 156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family







typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 192 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 203 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 205 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#line 215 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




























#line 244 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 260 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma warning(push)
#pragma warning(disable:4995)
#line 268 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
wvsprintfA(
      LPSTR,
        LPCSTR,
      va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
      LPWSTR,
        LPCWSTR,
      va_list arglist);




#line 291 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__cdecl
wsprintfA(
      LPSTR,
        LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
      LPWSTR,
        LPCWSTR,
    ...);




#line 311 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma warning(pop)
#line 315 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




































#line 355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










































#line 398 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 414 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


























#line 441 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








































































































































































#line 610 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









































#line 652 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 659 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





































#line 697 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


















#line 716 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 722 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 727 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 734 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 737 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





























#pragma region Desktop Family





typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;

#line 803 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;

#line 821 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

















#line 840 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



























#line 868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 872 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 877 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 882 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





























































#line 944 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 948 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#line 960 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 1006 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 1008 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion














#pragma region Desktop Family





typedef struct tagKBDLLHOOKSTRUCT {
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;

#line 1049 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1052 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;






#line 1091 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 1092 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 1104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 1106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1109 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"














#line 1124 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 1129 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 1139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#pragma region Desktop Family


__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
      LPCSTR pwszKLID,
      UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
      LPCWSTR pwszKLID,
      UINT Flags);




#line 1165 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
      HKL hkl,
      UINT Flags);







#line 1182 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags,
      HKL dwhkl);
#line 1196 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
      HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
      LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
      LPWSTR pwszKLID);




#line 1218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
      int nBuff,
      HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
      DWORD idThread);

#line 1234 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 1237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;

#line 1252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
      UINT cbSize,
      LPMOUSEMOVEPOINT lppt,
      LPMOUSEMOVEPOINT lpptBuf,
      int nBufPoints,
      DWORD resolution);

#line 1274 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1328 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);




#line 1358 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 1360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1363 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 1364 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
      LPCSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
      LPCWSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1389 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
      HWINSTA hwinsta,
      DESKTOPENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
      HWINSTA hwinsta,
      DESKTOPENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1418 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
      HDESK hDesktop,
      WNDENUMPROC lpfn,
      LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
      HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
       HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
      HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
      DWORD dwThreadId);

#line 1454 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1457 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





























#pragma region Desktop Family


__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
      LPCSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
      LPCWSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1510 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
      LPCSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
      LPCWSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1530 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
      WINSTAENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
      WINSTAENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1548 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);

#line 1568 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1571 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);

#line 1596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#line 1606 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);




#line 1639 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);




#line 1661 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 1663 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 1666 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family



typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1714 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 1715 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1751 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
      HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1766 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 1768 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




#pragma region Application Family





typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;

#line 1792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion











#line 1805 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





















#line 1827 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 1851 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#line 1863 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 1873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



































#line 1909 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 1917 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"














#pragma region Desktop Family





typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

#line 1946 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



















#line 1967 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 1968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#pragma region Desktop Family





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
      PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
#line 2007 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2009 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






















#line 2033 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 2044 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#line 2062 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2067 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2071 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 2088 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 2095 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"












#line 2108 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"































#line 2140 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 2141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 2142 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 2145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 2169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2174 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 2187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 2197 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 2208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 2219 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

































#pragma region Desktop Family


typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;


#line 2263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 2266 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2268 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 2269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2271 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2275 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 2299 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2304 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 2321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 2331 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2334 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2347 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 2354 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2358 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
























#line 2383 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2387 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2391 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2396 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 2403 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2408 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2413 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 2422 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 2430 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




















#line 2451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




































#line 2488 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 2499 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2502 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2504 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2506 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 2523 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
      LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
      LPCWSTR lpString);




#line 2543 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2545 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family





typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

#line 2592 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




























#line 2622 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 2624 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 2634 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 2640 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
      LPTRACKMOUSEEVENT lpEventTrack);

#line 2660 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 2663 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2667 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 2668 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2671 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


































































#line 2738 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#line 2756 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2761 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 2766 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2770 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2778 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2781 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




















#line 2802 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 2806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
      HDC hdc,
      LPRECT qrc,
      UINT edge,
      UINT grfFlags);

#line 2874 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









#line 2885 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

































#line 2919 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
      HDC,
      LPRECT,
      UINT,
      UINT);


#line 2938 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion










#line 2950 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 2953 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
      HWND hwnd,
      HDC hdc,
      const RECT * lprect,
      UINT flags);


#line 2968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
      HWND hwnd,
      int idAni,
      const RECT *lprcFrom,
      const RECT *lprcTo);

#line 2986 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 2989 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
























#line 3014 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 3017 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 3025 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




















#line 3046 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#pragma region Desktop Family


typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 3069 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 3115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;





#line 3134 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3136 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Application Family


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;

#line 3151 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;

#line 3165 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion
#line 3167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#line 3179 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#line 3199 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 3206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 3207 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;

#line 3264 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);




#line 3296 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 3320 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
      const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
      const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
      const MSG *lpMsg);




#line 3343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#line 3361 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
      int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);




#line 3391 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3393 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion












#line 3407 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 3410 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
      HWND hWnd,
      int id,
      UINT fsModifiers,
      UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
      HWND hWnd,
      int id);

#line 3431 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#line 3440 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 3456 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 3460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 3463 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 3466 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 3475 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 3479 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#pragma region Desktop Family





#line 3491 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
      UINT uFlags,
      DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
      BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);
#line 3529 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);
#line 3537 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
      LPARAM lParam);
#line 3545 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);




#line 3567 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 3591 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);




#line 3621 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);




#line 3669 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


typedef struct {
    UINT  cbSize;
    HDESK hdesk;
    HWND  hwnd;
    LUID  luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);




#line 3703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 3704 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3706 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3737 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"












#line 3750 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3752 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




















#line 3774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 3778 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 3781 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family



typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;





#line 3796 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);




#line 3816 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
      HDEVNOTIFY Handle
    );







typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY   *PHPOWERNOTIFY;

#line 3834 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
     HANDLE hRecipient,
     LPCGUID PowerSettingGuid,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
     HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
     HANDLE hRecipient,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
     HPOWERNOTIFY Handle
    );


#line 3868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 3869 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3871 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3897 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3919 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 3921 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









#line 3932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 3941 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
      DWORD idAttach,
      DWORD idAttachTo,
      BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
      LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


#line 3968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
      HANDLE hProcess,
      DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 3985 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefWindowProcA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 3998 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefWindowProcW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4008 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
      int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4040 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



























#line 4068 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);

#line 4076 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
      LPVOID lpReserved);

#line 4090 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









#line 4101 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
      UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
      const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
      const WNDCLASSW *lpWndClass);




#line 4133 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
      LPCSTR lpClassName,
      HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
      LPCWSTR lpClassName,
      HINSTANCE hInstance);




#line 4151 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
      HINSTANCE hInstance,
      LPCSTR lpClassName,
      LPWNDCLASSA lpWndClass);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
      HINSTANCE hInstance,
      LPCWSTR lpClassName,
      LPWNDCLASSW lpWndClass);




#line 4173 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
      const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
      const WNDCLASSEXW *);




#line 4190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
      HINSTANCE hInstance,
      LPCSTR lpszClass,
      LPWNDCLASSEXA lpwcx);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
      HINSTANCE hInstance,
      LPCWSTR lpszClass,
      LPWNDCLASSEXW lpwcx);




#line 4212 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4214 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family



typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);
#line 4231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
      DWORD dwExStyle,
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
      DWORD dwExStyle,
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);




#line 4269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4271 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion













#line 4286 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
      HWND hWndParent,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
      HWND hWnd,
      int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
      HWND hWnd,
      DWORD dwTime,
      DWORD dwFlags);
#line 4333 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4335 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
      HWND hWnd,
      HDC hdcDst,
      POINT* pptDst,
      SIZE* psize,
      HDC hdcSrc,
      POINT* pptSrc,
      COLORREF crKey,
      BLENDFUNCTION* pblend,
      DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;




#line 4378 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
      HWND hWnd,
      const UPDATELAYEREDWINDOWINFO* pULWInfo);

#line 4386 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 4389 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF* pcrKey,
      BYTE* pbAlpha,
      DWORD* pdwFlags);





#line 4409 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
      HWND hwnd,
      HDC hdcBlt,
      UINT nFlags);

#line 4420 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 4423 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF crKey,
      BYTE bAlpha,
      DWORD dwFlags);

#line 4437 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion











#line 4450 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
       HWND hWnd,
       int nCmdShow);
#line 4464 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
       HWND hWnd,
       BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
      PFLASHWINFO pfwi);








#line 4495 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
       HWND hWnd,
       BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
      HWND hWnd,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
      HWND hWnd,
      HWND hWndInsertAfter,
      int X,
      int Y,
      int cx,
      int cy,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
      HWND hWnd,
      WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
      HWND hWnd,
      const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
      HWND hWnd,
      DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
      HWND hWnd,
      DWORD dwAffinity);

#line 4572 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4574 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
      int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
      HDWP hWinPosInfo,
      HWND hWnd,
      HWND hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
      HDWP hWinPosInfo);

#line 4608 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 4611 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
      HWND hWnd);

#line 4646 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






















#line 4670 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"














#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\pshpack2.h"
#line 4685 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Application Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;

#line 4703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 4715 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4717 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Application Family


typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 4729 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4731 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 4756 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 4763 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 4765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"


#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\poppack.h"
#line 4769 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4796 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4820 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 4830 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 4840 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4864 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4888 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 4898 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 4908 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
      HWND hDlg,
      INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
      HWND hDlg,
      int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      UINT uValue,
      BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      BOOL *lpTranslated,
      BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPCWSTR lpString);




#line 4960 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPSTR lpString,
      int cchMax);
 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPWSTR lpString,
      int cchMax);




#line 4984 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
      HWND hDlg,
      int nIDButton,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
      HWND hDlg,
      int nIDFirstButton,
      int nIDLastButton,
      int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
      HWND hDlg,
      int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5032 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
      HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall



#line 5068 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefDlgProcA(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 5081 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefDlgProcW(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5091 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5093 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#line 5103 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
      LPMSG lpMsg,
      int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
      LPMSG lpMsg,
      int nCode);




#line 5128 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
      HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);

#line 5159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
      HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
      HWND hWndRemove,
      HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
      UINT uFormat,
      HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
      UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
      LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
      LPCWSTR lpszFormat);




#line 5213 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
      UINT format,
      LPSTR lpszFormatName,
      int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
      UINT format,
      LPWSTR lpszFormatName,
      int cchMaxCount);




#line 5245 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
      UINT *paFormatPriorityList,
      int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
      PUINT lpuiFormats,
      UINT cFormats,
      PUINT pcFormatsOut);
#line 5292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5294 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
      LPCSTR pSrc,
      LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
      LPCWSTR pSrc,
      LPSTR pDst);




#line 5316 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
      LPCSTR pSrc,
      LPSTR pDst);
 
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
      LPCSTR pSrc,
      LPWSTR pDst);




#line 5336 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
      LPCWSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);




#line 5356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
      LPCSTR lpszSrc,
      LPWSTR lpszDst,
      DWORD cchDstLength);




#line 5376 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
      LPWSTR lpsz);




#line 5392 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5410 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
      LPWSTR lpsz);




#line 5426 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5444 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
      LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
      LPCWSTR lpsz);




#line 5460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
      LPCSTR lpszStart,
      LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
      LPCWSTR lpszStart,
      LPCWSTR lpszCurrent);




#line 5478 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
       WORD CodePage,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
       WORD CodePage,
       LPCSTR lpStart,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);
#line 5497 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5499 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion















#pragma region Desktop Family







__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
      WCHAR ch);




#line 5538 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
      WCHAR ch);




#line 5554 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
      WCHAR ch);




#line 5570 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
      WCHAR ch);




#line 5586 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 5588 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
      int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
      int vKey);

__declspec(dllimport)
 
BOOL
__stdcall
GetKeyboardState(
      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
      LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
      LONG lParam,
      LPSTR lpString,
      int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
      LONG lParam,
      LPWSTR lpString,
      int cchSize);




#line 5657 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
      int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags,
      HKL dwhkl);
#line 5686 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
      WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
      CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
      WCHAR ch);




#line 5719 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
      CHAR ch,
      HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
      WCHAR ch,
      HKL dwhkl);




#line 5738 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 5739 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 5745 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
void
__stdcall
keybd_event(
      BYTE bVk,
      BYTE bScan,
      DWORD dwFlags,
      ULONG_PTR dwExtraInfo);

#line 5756 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion













#line 5771 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 5774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
mouse_event(
      DWORD dwFlags,
      DWORD dx,
      DWORD dy,
      DWORD dwData,
      ULONG_PTR dwExtraInfo);

#line 5791 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD   type;

    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
      UINT cInputs,                     
      LPINPUT pInputs,  
      int cbSize);                      

#line 5845 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 5848 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family









struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;


#line 5879 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
      HTOUCHINPUT hTouchInput,               
      UINT cInputs,                          
      PTOUCHINPUT pInputs,  
      int cbSize);                           

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
      HTOUCHINPUT hTouchInput);                   


#line 5925 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



#line 5933 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
      HWND hwnd,
      ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
      HWND hwnd,
      PULONG pulFlags);

#line 5965 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 5968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


enum tagPOINTER_INPUT_TYPE {
    PT_POINTER  = 0x00000001,   
    PT_TOUCH    = 0x00000002,   
    PT_PEN      = 0x00000003,   
    PT_MOUSE    = 0x00000004,   

    PT_TOUCHPAD = 0x00000005,   
#line 5982 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
};
typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;

#line 5988 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




























#pragma region Desktop Family


typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE    pointerType;
    UINT32          pointerId;
    UINT32          frameId;
    POINTER_FLAGS   pointerFlags;
    HANDLE          sourceDevice;
    HWND            hwndTarget;
    POINT           ptPixelLocation;
    POINT           ptHimetricLocation;
    POINT           ptPixelLocationRaw;
    POINT           ptHimetricLocationRaw;
    DWORD           dwTime;
    UINT32          historyCount;
    INT32           InputData;
    DWORD           dwKeyStates;
    UINT64          PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO    pointerInfo;
    TOUCH_FLAGS     touchFlags;
    TOUCH_MASK      touchMask;
    RECT            rcContact;
    RECT            rcContactRaw;
    UINT32          orientation;
    UINT32          pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO    pointerInfo;
    PEN_FLAGS       penFlags;
    PEN_MASK        penMask;
    UINT32          pressure;
    UINT32          rotation;
    INT32           tiltX;
    INT32           tiltY;
} POINTER_PEN_INFO;

#line 6097 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion














































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
      UINT32 maxCount,
      DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
      UINT32 count,
      const POINTER_TOUCH_INFO *contacts);

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
      UINT32 pointerId,
      POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
      UINT32 pointerId,
      UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
      UINT32 pointerId,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
      UINT32 pointerId,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
      UINT32 pointerId,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
      UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
      BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);






__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
      HWND hwnd,
      ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
      const RECT *controlBoundingBox,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
      const POINT *controlPolygon,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION    = 2,
    FEEDBACK_PEN_TAP                    = 3,
    FEEDBACK_PEN_DOUBLETAP              = 4,
    FEEDBACK_PEN_PRESSANDHOLD           = 5,
    FEEDBACK_PEN_RIGHTTAP               = 6,
    FEEDBACK_TOUCH_TAP                  = 7,
    FEEDBACK_TOUCH_DOUBLETAP            = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD         = 9,
    FEEDBACK_TOUCH_RIGHTTAP             = 10,
    FEEDBACK_GESTURE_PRESSANDTAP        = 11,
    FEEDBACK_MAX                        = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32* pSize,
      void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32 size,
      const void* configuration);


#line 6404 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 6407 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family


typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float        _11, _12, _13, _14;
            float        _21, _22, _23, _24;
            float        _31, _32, _33, _34;
            float        _41, _42, _43, _44;
        };
        float m[4][4];
    };
} INPUT_TRANSFORM;


__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
      UINT32 pointerId,
      UINT32 historyCount,
      INPUT_TRANSFORM *inputTransform);

#line 6435 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 6438 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


#line 6443 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family



typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
      PLASTINPUTINFO plii);
#line 6460 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
      UINT uCode,
      UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
      UINT uCode,
      UINT uMapType);




#line 6478 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);




#line 6499 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 6505 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 6508 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
      UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *pHandles,
      BOOL fWaitAll,
      DWORD dwMilliseconds,
      DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE *pHandles,
      DWORD dwMilliseconds,
      DWORD dwWakeMask,
      DWORD dwFlags);


#line 6562 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




















#line 6584 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 6590 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





















#line 6612 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


















#pragma region Desktop Family






__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc);









__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc,
      ULONG uToleranceDelay);

#line 6665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
      HWND hWnd,
      UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
      HWND hWnd,
      BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
      HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
      HINSTANCE hInstance,
      LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
      HINSTANCE hInstance,
      LPCWSTR lpTableName);




#line 6709 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
      LPACCEL paccel,
      int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
      LPACCEL paccel,
      int cAccel);




#line 6727 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
      HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);




#line 6753 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);




#line 6775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6777 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6779 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

















































































#line 6862 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 6869 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 6873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 6881 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 6884 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 6888 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 6895 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 6900 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 6906 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 6910 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6912 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6914 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6916 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6918 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 6926 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 6930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 6934 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 6939 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 6941 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
      int nIndex);


#line 6954 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 6957 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
      HINSTANCE hInstance,
      LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
      HINSTANCE hInstance,
      LPCWSTR lpMenuName);




#line 6980 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
      const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
      const MENUTEMPLATEW *lpMenuTemplate);




#line 6996 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
      HWND hWnd,
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
      HMENU hMenu,
      UINT cmd,
      LPCSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
      HMENU hMenu,
      UINT cmd,
      LPCWSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);




#line 7033 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
      HWND hWnd,
      HMENU hMenu,
      UINT uIDHiliteItem,
      UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
      HMENU hMenu,
      UINT uIDItem,
      LPSTR lpString,
      int cchMax,
      UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
      HMENU hMenu,
      UINT uIDItem,
      LPWSTR lpString,
      int cchMax,
      UINT flags);




#line 7066 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
      HMENU hMenu,
      UINT uId,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
      HWND hWnd);




#line 7085 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
      HWND hWnd,
      BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
      HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
      HMENU hMenu,
      UINT uIDCheckItem,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
      HMENU hMenu,
      UINT uIDEnableItem,
      UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7172 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7194 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      HBITMAP hBitmapUnchecked,
      HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      int nReserved,
      HWND hWnd,
      const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      HWND hwnd,
      LPTPMPARAMS lptpm);
#line 7287 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
      const POINT *anchorPoint,
      const SIZE *windowSize,
      UINT  flags,
      RECT *excludeRect,
      RECT *popupWindowPosition);

#line 7300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
      HMENU,
      LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
      HMENU,
      LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;












#line 7376 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 7385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#line 7403 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7421 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7438 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 7446 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 7453 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOW lpmi);




#line 7476 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOW lpmii);




#line 7498 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOW lpmii);




#line 7520 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
      HMENU hMenu,
      UINT fByPos,
      UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
      HMENU hMenu,
      UINT uItem,
      UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
      HWND hWnd,
      HMENU hMenu,
      UINT uItem,
      LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
      HWND hWnd,
      HMENU hMenu,
      POINT ptScreen);
#line 7558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


















#line 7577 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 7586 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 7589 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 7590 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 7593 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 7596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 7598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family






typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

#line 7621 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
DragObject(
      HWND hwndParent,
      HWND hwndFrom,
      UINT fmt,
      ULONG_PTR data,
      HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
      HWND hwnd,
      POINT pt);

#line 7654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 7657 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
      HDC hDC,
      int X,
      int Y,
      HICON hIcon);

#line 7671 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


































#line 7707 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 7708 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;

#line 7722 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 7725 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family










__declspec(dllimport)
 
int
__stdcall
DrawTextA(
      HDC hdc,
    
    
    LPCSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);
__declspec(dllimport)
 
int
__stdcall
DrawTextW(
      HDC hdc,
    
    
    LPCWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);




#line 7767 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

























#line 7793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
 
int
__stdcall
DrawTextExA(
      HDC hdc,
    
    
    
    LPSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
 
int
__stdcall
DrawTextExW(
      HDC hdc,
    
    
    
    LPWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);




#line 7829 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 7830 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 7832 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 7835 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);




#line 7870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 7872 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


















#line 7892 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);




#line 7930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 7932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 7935 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
      HDC hdc,
      int x,
      int y,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
      HDC hdc,
      int x,
      int y,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);




#line 7968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
      HDC hdc,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
      HDC hdc,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);




#line 7992 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
      HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
      HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
      HWND hwnd,
      BOOL fUnknown);
#line 8026 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
      DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
      UINT uLockCode);




#line 8053 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
      HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
      HWND hWnd,
      HRGN hrgnClip,
      DWORD flags);

#line 8075 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


















#pragma region Desktop Family


__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
      HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
      HWND hWnd,
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
      HWND hWnd,
      LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
      HWND hWnd,
      const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
      HWND hWnd,
      LPRECT lpRect,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bRedraw);

#line 8149 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
      HWND hWnd,
      HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
      HWND hWnd,
      LPRECT lprc);

#line 8172 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
      HDC hDC,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
      HWND hWnd,
      const RECT *lpRect,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
      HWND hWnd,
      const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
      HWND hWnd,
      HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
      HWND hWnd,
      const RECT *lprcUpdate,
      HRGN hrgnUpdate,
      UINT flags);

#line 8221 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






















#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
      HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
      HWND hWnd,
      int XAmount,
      int YAmount,
      const RECT *lpRect,
      const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
      HDC hDC,
      int dx,
      int dy,
      const RECT *lprcScroll,
      const RECT *lprcClip,
      HRGN hrgnUpdate,
      LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
      HWND hWnd,
      int dx,
      int dy,
      const RECT *prcScroll,
      const RECT *prcClip,
      HRGN hrgnUpdate,
      LPRECT prcUpdate,
      UINT flags);

#line 8293 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






#line 8301 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
SetScrollPos(
      HWND hWnd,
      int nBar,
      int nPos,
      BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
      HWND hWnd,
      int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
      HWND hWnd,
      int nBar,
      int nMinPos,
      int nMaxPos,
      BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
      HWND hWnd,
      int nBar,
      LPINT lpMinPos,
      LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
      HWND hWnd,
      int wBar,
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
      HWND hWnd,
      UINT wSBflags,
      UINT wArrows);


















#line 8376 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
      HWND hWnd,
      LPCSTR lpString,
      HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
      HWND hWnd,
      LPCWSTR lpString,
      HANDLE hData);




#line 8396 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8414 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8432 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
      HWND hWnd,
      PROPENUMPROCEXA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
      HWND hWnd,
      PROPENUMPROCEXW lpEnumFunc,
      LPARAM lParam);




#line 8452 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
      HWND hWnd,
      PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
      HWND hWnd,
      PROPENUMPROCW lpEnumFunc);




#line 8470 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8488 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

 
__declspec(dllimport)
int
__stdcall
GetWindowTextA(
      HWND hWnd,
      LPSTR lpString,
      int nMaxCount);
 
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
      HWND hWnd,
      LPWSTR lpString,
      int nMaxCount);




#line 8510 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
      HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
      HWND hWnd);




#line 8526 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu,
      DWORD dwExStyle);


#line 8560 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
      HWND,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
      HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
      HMENU,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
      HMENU);

#line 8606 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 8609 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 8625 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#line 8637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 8647 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 8654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 8665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 8672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 8674 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
MessageBoxA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType);




#line 8705 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 8729 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType,
      WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType,
      WORD wLanguageId);




#line 8753 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 8793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
      const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
      const MSGBOXPARAMSW * lpmbp);




#line 8809 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 8810 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 8813 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
      UINT uType);

#line 8826 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 8829 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
ShowCursor(
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
      int X,
      int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
      int X,
      int Y);
#line 8855 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
      HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
      LPPOINT lpPoint);
#line 8875 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
      const RECT *lpRect);


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
      LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
      HWND hWnd,
      HBITMAP hBitmap,
      int nWidth,
      int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
      UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
      int X,
      int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
      HWND hWnd,
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

#line 8977 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);

#line 8994 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
      HWND hWndFrom,
      HWND hWndTo,
      LPPOINT lpPoints,
      UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
      POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
      POINT Point);
#line 9017 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
      HWND hWndParent,
      POINT Point);

#line 9026 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
      HWND hwnd,
      POINT pt,
      UINT flags);

#line 9046 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 9049 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










































#line 9092 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 9101 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 9102 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 9111 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
      int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
      int nIndex);


#line 9131 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
      int cElements,
      const INT * lpaElements,
      const COLORREF * lpaRgbValues);

#line 9141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 9144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
      HDC hDC,
      const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
      HDC hDC,
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
      LPRECT lprc,
      int xLeft,
      int yTop,
      int xRight,
      int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
      LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
      LPRECT lprcDst,
      const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
      const RECT *lprc1,
      const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
      const RECT *lprc,
      POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
      HWND hWnd,
      int nIndex);




#line 9295 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9315 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrW(
      HWND hWnd,
      int nIndex);




#line 9335 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrA(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);
__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrW(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);




#line 9355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#line 9375 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
      HWND hWnd,
      int nIndex);




#line 9408 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9428 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrW(
      HWND hWnd,
      int nIndex);




#line 9448 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrA(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);
__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrW(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);




#line 9468 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#line 9488 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 9490 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
      DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
      DWORD dwDefaultLayout);
#line 9504 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
      HWND hWndChild,
      HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
      HWND hWndParent,
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName);




#line 9551 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCSTR lpszClass,
      LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCWSTR lpszClass,
      LPCWSTR lpszWindow);




#line 9574 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);

#line 9582 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
      DWORD dwThreadId,
      WNDENUMPROC lpfn,
      LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
      HWND hWnd,
      LPSTR lpClassName,
      int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
      HWND hWnd,
      LPWSTR lpClassName,
      int nMaxCount
    );




#line 9635 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





















#line 9657 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
      HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
      HWND hWnd,
      LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
      BOOL bConvert);

#line 9685 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
      HWND hWnd);












#line 9708 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 9711 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
      HWND hWnd,
      UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
      int nFilterType,
      HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
      int nFilterType,
      HOOKPROC pfnFilterProc);




#line 9741 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





















#line 9763 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
      int nCode,
      HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);




#line 9792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
      HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
      HHOOK hhk,
      int nCode,
      WPARAM wParam,
      LPARAM lParam);










#line 9818 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 9819 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 9821 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








































#line 9863 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 9868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 9873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






















#line 9896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
      HMENU hmenu,
      UINT first,
      UINT last,
      UINT check,
      UINT flags);
#line 9913 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 9930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 9933 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



























#line 9961 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 9965 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 9975 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
      HINSTANCE hInstance,
      LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
      HINSTANCE hInstance,
      LPCWSTR lpBitmapName);




#line 10000 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
      HINSTANCE hInstance,
      LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
      HINSTANCE hInstance,
      LPCWSTR lpCursorName);




#line 10018 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
      LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
      LPCWSTR lpFileName);




#line 10034 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
      HINSTANCE hInst,
      int xHotSpot,
      int yHotSpot,
      int nWidth,
      int nHeight,
      const void *pvANDPlane,
      const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
      HCURSOR hCursor);









#line 10062 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10064 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



















#line 10085 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 10089 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
      HCURSOR hcur,
      DWORD id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
      HINSTANCE hInstance,
      LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
      HINSTANCE hInstance,
      LPCWSTR lpIconName);




#line 10126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
      LPCSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
      LPCWSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);




#line 10157 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIcon(
      HINSTANCE hInstance,
      int nWidth,
      int nHeight,
      BYTE cPlanes,
      BYTE cBitsPixel,
      const BYTE *lpbANDbits,
      const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
      HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
      PBYTE presbits,
      BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
      PBYTE presbits,
      BOOL fIcon,
      int cxDesired,
      int cyDesired,
      UINT Flags);
#line 10194 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer,
      int cxDesired,
      int cyDesired,
      UINT Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 10229 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
      HINSTANCE hInst,
      LPCSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
      HINSTANCE hInst,
      LPCWSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);




#line 10281 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
      HANDLE h,
      UINT type,
      int cx,
      int cy,
      UINT flags);








#line 10300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawIconEx(
      HDC hdc,
      int xLeft,
      int yTop,
      HICON hIcon,
      int cxWidth,
      int cyWidth,
      UINT istepIfAniCur,
      HBRUSH hbrFlickerFreeDraw,
      UINT diFlags);

#line 10313 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 10316 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
      PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
      HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
      HICON hIcon,
      PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    CHAR    szModName[260];
    CHAR    szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    WCHAR   szModName[260];
    WCHAR   szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
#line 10369 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
      HICON hicon,
      PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
      HICON hicon,
      PICONINFOEXW piconinfo);




#line 10387 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 10388 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 10393 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10395 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


















































































































#line 10511 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10514 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 10515 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 10521 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10524 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















































#line 10573 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 10578 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 10583 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 10584 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





























#line 10614 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10617 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 10634 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 10641 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 10651 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"













































#line 10697 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 10702 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10705 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









































#line 10747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 10764 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"













#line 10778 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10781 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 10789 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

























#line 10815 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 10818 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"












#line 10831 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 10848 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10850 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#line 10870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#pragma region Desktop Family








__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
      HWND hDlg,
      LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
      HWND hDlg,
      LPMSG lpMsg);




#line 10901 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10903 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
      HWND hDlg,
      LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);




#line 10934 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 10936 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
      HWND hwndDlg,
      LPSTR lpString,
      int chCount,
      int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int chCount,
      int idListBox);




#line 10976 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);




#line 11000 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
      HWND hwndDlg,
      LPSTR lpString,
      int cchOut,
      int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int cchOut,
      int idComboBox);




#line 11022 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11024 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

























#line 11051 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11055 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 11063 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


































                                  




























































#line 11159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 11162 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 11167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 11177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11179 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"























#line 11203 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 11209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"












































#line 11254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11256 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











































#line 11300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 11301 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11305 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#line 11315 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 11316 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




















#line 11337 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 11340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"














#line 11355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11359 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"









#pragma region Desktop Family


typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
      HWND hwnd,
      int nBar,
      LPCSCROLLINFO lpsi,
      BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
      HWND hwnd,
      int nBar,
      LPSCROLLINFO lpsi);


#line 11402 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion
#line 11404 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11406 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 11407 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 11424 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 11457 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11486 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 11495 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefMDIChildProcA(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 11508 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
DefMDIChildProcW(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11518 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
      HWND hWndClient,
      LPMSG lpMsg);

#line 11529 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);




#line 11569 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
WORD
__stdcall
TileWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

#line 11591 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11593 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 11596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family




typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 11613 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 11622 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 11634 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 11662 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





































#line 11700 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
      HWND hWndMain,
      LPCSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
      HWND hWndMain,
      LPCWSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);




#line 11724 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11726 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 11728 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





#line 11735 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11739 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11743 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
      HANDLE hProcess,
      DWORD uiFlags);
#line 11755 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 11758 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



#line 11766 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




















































































#line 11852 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 11868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 11874 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 11890 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 11894 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 11902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 11910 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




























#line 11939 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#pragma region Desktop Family


typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;       
    UINT dwSampleTime;    
    UINT bUseHWTimeStamp; 
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;










#line 11964 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion
















#line 11982 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"












































#line 12027 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"













#line 12041 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"








#line 12050 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


































#line 12085 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 12092 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



















#line 12112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





    
    

#line 12121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 12123 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"













#pragma region Desktop Family


typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int     iPaddedBorderWidth;
#line 12159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int     iPaddedBorderWidth;
#line 12180 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 12190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 12192 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 12195 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 12196 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#pragma region Desktop Family


typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 12250 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 12251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 12252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 12286 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 12312 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 12314 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






















#line 12338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\tvout.h"











#pragma once
#line 14 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\tvout.h"





#pragma region Desktop Family


typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        












































#line 95 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\tvout.h"
#pragma endregion

#line 98 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\tvout.h"
#line 12343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#line 12355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family





__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12379 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DEVMODEA* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DEVMODEW* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);




#line 12403 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode);




#line 12427 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
      LPCSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEA lpDisplayDevice,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
      LPCWSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEW lpDisplayDevice,
      DWORD dwFlags);




#line 12477 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 12482 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
      UINT32 flags,
      UINT32* numPathArrayElements,
      UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
      UINT32 numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32 numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
      UINT32 flags);

__declspec(dllimport)
  LONG
__stdcall
QueryDisplayConfig(
      UINT32 flags,
      UINT32* numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32* numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    
    
        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

#line 12529 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 12531 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 12532 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoA(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);
__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoW(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);




#line 12557 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 12560 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 12563 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;

#line 12581 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;

#line 12604 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion






























#line 12636 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;

#line 12652 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


















#line 12672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

#line 12684 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion
























#pragma region Desktop Family


typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 12749 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 12751 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);
#line 12769 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;

#line 12777 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family



typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;   
    BOOL Enabled;  
    LCID Locale;   
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;
#line 12799 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
      DWORD dwLevel);

#line 12812 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
      DWORD dwErrCode,
      DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
      HWND hWnd,
      LPWSTR pString,
      int cchMaxCount);










#line 12850 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);

#line 12858 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
      POINT pt,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
      LPCRECT lprc,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
      HWND hwnd,
      DWORD dwFlags);

#line 12896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 12931 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


















#line 12950 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);




#line 12968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
      HDC hdc,
      LPCRECT lprcClip,
      MONITORENUMPROC lpfnEnum,
      LPARAM dwData);

#line 12981 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
      DWORD event,
      HWND  hwnd,
      LONG  idObject,
      LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
      DWORD eventMin,
      DWORD eventMax,
      HMODULE hmodWinEventProc,
      WINEVENTPROC pfnWinEventProc,
      DWORD idProcess,
      DWORD idThread,
      DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
      DWORD event);
#line 13029 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 13031 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
      HWINEVENTHOOK hWinEventHook);

#line 13051 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion















































































































































































































#line 13260 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
















#line 13277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"















#line 13293 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"













#line 13307 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

















#line 13325 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 13332 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 13336 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






































































































































































































#line 13535 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#line 13539 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










































































#line 13614 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






#line 13621 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"






































#pragma region Desktop Family


typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;

#line 13676 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion











#line 13689 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 13690 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
      DWORD idThread,
      PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);

#line 13724 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
      HWND hwnd,
      LPSTR pszFileName,
      UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
      HWND hwnd,
      LPWSTR pszFileName,
      UINT cchFileNameMax);




#line 13744 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 13746 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


































#line 13782 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#pragma region Desktop Family





typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;




#line 13804 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
      PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
      HWND hwnd,
      PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
      HWND hwnd,
      PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
#line 13863 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;          
    HMENU hMenu;         
    HWND hwndMenu;       
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
      HWND hwnd,
      LONG idObject,
      LONG idItem,
      PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
      HWND hwnd,
      LONG idObject,
      PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
      HWND hwndCombo,
      PCOMBOBOXINFO pcbi);

#line 13930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
GetAncestor(
      HWND hwnd,
      UINT gaFlags);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
      HWND hwndParent,
      POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
      HWND hwnd,
      LPSTR ptszClassName,
      UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
      HWND hwnd,
      LPWSTR ptszClassName,
      UINT cchClassNameMax);




#line 13991 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPSTR pszItemText,
      UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPWSTR pszItemText,
      UINT cchItemText);




#line 14031 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
      HWND hwnd);

#line 14043 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 14046 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 14047 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);
#line 14059 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
      HANDLE hUserHandle,
      HANDLE hJob,
      BOOL   bGrant);

#line 14071 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 14073 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;

#line 14087 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion























#pragma region Desktop Family





typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;

#line 14125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family





typedef struct tagRAWMOUSE {
    


    USHORT usFlags;

    


    union {
        ULONG ulButtons;
        struct  {
            USHORT  usButtonFlags;
            USHORT  usButtonData;
        };
    };


    


    ULONG ulRawButtons;

    


    LONG lLastX;

    


    LONG lLastY;

    


    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;

#line 14181 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion







































#line 14222 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagRAWKEYBOARD {
    


    USHORT MakeCode;

    



    USHORT Flags;

    USHORT Reserved;

    


    USHORT VKey;
    UINT   Message;

    


    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;

#line 14258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

















#pragma region Desktop Family





typedef struct tagRAWHID {
    DWORD dwSizeHid;    
    DWORD dwCount;      
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;

#line 14289 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

#line 14308 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





#line 14315 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
      HRAWINPUT hRawInput,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize,
      UINT cbSizeHeader);

#line 14339 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL  fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;

    


    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);




#line 14410 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
      PRAWINPUT pData,
      PUINT pcbSize,
      UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage; 
    USHORT usUsage;     
    DWORD dwFlags;
    HWND hwndTarget;    
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;

#line 14436 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion












#line 14450 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"










#line 14461 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





#line 14467 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
      PCRAWINPUTDEVICE pRawInputDevices,
      UINT uiNumDevices,
      UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
      PRAWINPUTDEVICE pRawInputDevices,
      PUINT puiNumDevices,
      UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
      PRAWINPUTDEVICELIST pRawInputDeviceList,
      PUINT puiNumDevices,
      UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
      PRAWINPUT* paRawInput,
      INT nInput,
      UINT cbSizeHeader);

#line 14510 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 14513 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"





















#pragma region Desktop Family


typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD      = 0x00000004,
#line 14544 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
    POINTER_DEVICE_TYPE_MAX            = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN   = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP       = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER    = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX       = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
      UINT32* deviceCount,
      POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
      HANDLE device,
      POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
      HANDLE device,
      UINT32* propertyCount,
      POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
      HWND window,
      BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
      HANDLE device,
      RECT* pointerDeviceRect,
      RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
      HANDLE device,
      UINT32* cursorCount,
      POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
      UINT32 pointerId,
      UINT32 historyCount,
      UINT32 propertiesCount,
      POINTER_DEVICE_PROPERTY* pProperties,
      LONG* pValues);


#line 14637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 14640 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
      UINT message,
      DWORD dwFlag);

#line 14662 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 14665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"











#pragma region Desktop Family


typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;

#line 14685 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
      HWND hwnd,                                         
      UINT message,                                      
      DWORD action,                                      
      PCHANGEFILTERSTRUCT pChangeFilterStruct);   

#line 14707 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 14710 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


#line 14713 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#pragma region Desktop Family





struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;

#line 14729 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




















#pragma region Desktop Family










typedef struct tagGESTUREINFO {
    UINT cbSize;                    
    DWORD dwFlags;                  
    DWORD dwID;                     
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
    DWORD dwSequenceID;             
    ULONGLONG ullArguments;         
    UINT cbExtraArgs;               
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;









typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;                    
    DWORD dwFlags;                  
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;













__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
      HGESTUREINFO hGestureInfo,
      PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
      HGESTUREINFO hGestureInfo,
      UINT cbExtraArgs,
      PBYTE pExtraArgs);











__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
      HGESTUREINFO hGestureInfo);









typedef struct tagGESTURECONFIG {
    DWORD dwID;                     
    DWORD dwWant;                   
    DWORD dwBlock;                  
} GESTURECONFIG, *PGESTURECONFIG;

#line 14854 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion









































                                                        

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      UINT cIDs,                                     
      PGESTURECONFIG pGestureConfig,    
                                                        
      UINT cbSize);                                  



                                                        

__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      DWORD dwFlags,                                 
      PUINT pcIDs,                                   
                                                        
      PGESTURECONFIG pGestureConfig,
                                                        
      UINT cbSize);                                  

#line 14930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion


#line 14934 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"














#line 14949 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
      HWND hWnd,
      LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
      HWND hWnd,
      LPWSTR pwszBuff,
      DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
      HWND hWnd);

#line 14978 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family





typedef enum tagINPUT_MESSAGE_DEVICE_TYPE  {
     IMDT_UNAVAILABLE = 0x00000000,      
     IMDT_KEYBOARD    = 0x00000001,      
     IMDT_MOUSE       = 0x00000002,      
     IMDT_TOUCH       = 0x00000004,      
     IMDT_PEN         = 0x00000008,      

     IMDT_TOUCHPAD    = 0x00000010,      
#line 14998 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,  
     IMO_HARDWARE    = 0x00000001,  
     IMO_INJECTED    = 0x00000002,  
     IMO_SYSTEM      = 0x00000004,  
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID   originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

#line 15032 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 15035 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Application Family





typedef enum tagAR_STATE {
    AR_ENABLED        = 0x0,
    AR_DISABLED       = 0x1,
    AR_SUPPRESSED     = 0x2,
    AR_REMOTESESSION  = 0x4,
    AR_MULTIMON       = 0x8,
    AR_NOSENSOR       = 0x10,
    AR_NOT_SUPPORTED  = 0x20,
    AR_DOCKED         = 0x40,
    AR_LAPTOP         = 0x80
} AR_STATE, *PAR_STATE;

#line 15057 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion





extern "C++" { inline AR_STATE operator | (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator & (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator ~ (AR_STATE a) { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline AR_STATE operator ^ (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } };
#line 15065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#pragma region Desktop Family






typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE              = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x8
} ORIENTATION_PREFERENCE;





extern "C++" { inline ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } };
#line 15087 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
      PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
      DWORD dwProcessId,
      ORIENTATION_PREFERENCE *pOrientation,
      BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE orientation);

#line 15115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 15118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
      HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
      BOOL fEnableExemption);

#line 15138 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#pragma endregion

#line 15141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"







#line 15149 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"
#line 15150 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"


}
#line 15154 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"

#line 15156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winuser.h"




#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"























extern "C" {
#line 26 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"
 











#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"



















#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"






#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDateFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCSTR lpFormat,
      LPSTR lpDateStr,
      int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate
    );





#line 80 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"



__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCSTR lpFormat,
      LPSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );





#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"

#line 115 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"
#pragma endregion








#pragma region Application Family



__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate,
      LPCWSTR lpCalendar
    );


#line 156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"
#pragma endregion

#line 159 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"







}
#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"


#line 171 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\datetimeapi.h"




#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




#pragma region Application Family










#line 49 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
































































#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#line 118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


























































































#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"








#line 218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


















#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


































#line 272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#line 276 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"












































#line 321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"






































































































































































#line 488 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




#line 493 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"













#line 507 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#line 511 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"













#line 525 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"





















































































































#line 643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"










#line 654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




















#line 675 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



                                                   
                                                   
                                                   
                                                   









#line 692 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


#line 695 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 697 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"





















#line 719 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#line 723 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


























#line 750 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#line 754 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
























































#line 811 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"









#line 821 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




#line 826 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


#line 829 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




























































































#line 922 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"












typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 986 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 1015 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 1048 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"





enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;














typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFO, *LPNLSVERSIONINFO;













#line 1092 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER =     0x000C,
    GEO_PARENT      =       0x000D
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther  = 0,       
    NormalizationC      = 0x1,     
    NormalizationD      = 0x2,     
    NormalizationKC     = 0x5,     
                                   
    NormalizationKD     = 0x6      
                                   
} NORM_FORM;













#line 1172 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"







typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);


























#line 1228 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



























#line 1256 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"






typedef struct _FILEMUIINFO {
    DWORD       dwSize;                 
    DWORD       dwVersion;              
    DWORD       dwFileType;             
    BYTE        pChecksum[16];          
    BYTE        pServiceChecksum[16];   
    DWORD       dwLanguageNameOffset;   
    DWORD       dwTypeIDMainSize;       
    DWORD       dwTypeIDMainOffset;     
    DWORD       dwTypeNameMainOffset;   
    DWORD       dwTypeIDMUISize;        
    DWORD       dwTypeIDMUIOffset;      
    DWORD       dwTypeNameMUIOffset;    
    BYTE        abBuffer[8];             
} FILEMUIINFO, *PFILEMUIINFO;


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"







#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"









#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"


extern "C" {
#line 35 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"




#pragma region Application Family



__declspec(dllimport)
int
__stdcall
CompareStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwCmpFlags,
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      BOOL bIgnoreCase
    );


#line 72 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"
#pragma endregion

#line 75 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
CompareStringW(
      LCID Locale,
      DWORD dwCmpFlags,
      PCNZWCH lpString1,
      int cchCount1,
      PCNZWCH lpString2,
      int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
      DWORD dwMapFlags,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest
    );





#line 112 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
      LCID Locale,
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );







__declspec(dllimport)
 
         
int
__stdcall
MultiByteToWideChar(
      UINT CodePage,
      DWORD dwFlags,
      LPCCH lpMultiByteStr,
      int cbMultiByte,
      LPWSTR lpWideCharStr,
      int cchWideChar
    );


__declspec(dllimport)
 
         
int
__stdcall
WideCharToMultiByte(
      UINT CodePage,
      DWORD dwFlags,
      LPCWCH lpWideCharStr,
      int cchWideChar,
      LPSTR lpMultiByteStr,
      int cbMultiByte,
      LPCCH lpDefaultChar,
      LPBOOL lpUsedDefaultChar
    );


#line 182 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"
#pragma endregion


}
#line 187 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"


#line 190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\stringapiset.h"
#line 1280 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#line 1281 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
































































__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
      UINT  CodePage);

#line 1352 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

#line 1368 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
      UINT       CodePage,
      LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXW  lpCPInfoEx);




#line 1399 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 1401 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
int
__stdcall
CompareStringA(
      LCID     Locale,
      DWORD    dwCmpFlags,
      PCNZCH lpString1,
      int      cchCount1,
      PCNZCH  lpString2,
      int      cchCount2);



#line 1425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



























#line 1453 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
FindNLSString(
                         LCID Locale,
                         DWORD dwFindNLSStringFlags,
       LPCWSTR lpStringSource,
                         int cchSource,
        LPCWSTR lpStringValue,
                         int cchValue,
                    LPINT pcchFound);

#line 1470 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringW(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCWSTR  lpSrcStr,
      int      cchSrc,
      LPWSTR  lpDestStr,
      int      cchDest);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 1499 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPWSTR lpLCData,
      int      cchData);
    




__declspec(dllimport)
int 
__stdcall 
GetLocaleInfoA(
      LCID Locale,
      LCTYPE LCType,
      LPSTR lpLCData,
      int cchData
    );



#line 1528 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
      LCID     Locale,
      LCTYPE   LCType,
      LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPCWSTR  lpLCData);




#line 1548 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPWSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);




#line 1578 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCWSTR  lpCalData);




#line 1600 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#line 1601 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"










        
__declspec(dllimport)                                
BOOL                                      
__stdcall                                    
LoadStringByReference(                    
            DWORD   Flags,             
            PCWSTR  Language,      
            PCWSTR  SourceString,      
        PWSTR   Buffer,     
            ULONG  cchBuffer,                      
        PCWSTR  Directory,                     
       PULONG  pcchBufferOut                  
    );                                                
#line 1625 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)         
BOOL               
__stdcall             
IsDBCSLeadByte(    
      BYTE  TestChar 
    );

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
      UINT  CodePage,
      BYTE  TestChar
    );

#line 1643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
      LCID     Locale,
      LPWSTR  lpName,
      int      cchName,
      DWORD    dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
      LPCWSTR lpName,
      DWORD dwFlags);

#line 1666 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 1668 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDurationFormat(
      LCID             Locale,
      DWORD            dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR          lpFormat,
      LPWSTR          lpDurationStr,
      int              cchDuration);
#line 1687 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
      LCID             Locale,
      DWORD            dwFlags,
      LPCSTR          lpValue,
      const NUMBERFMTA *lpFormat,
      LPSTR          lpNumberStr,
      int              cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
      LCID             Locale,
      DWORD            dwFlags,
      LPCWSTR          lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR          lpNumberStr,
      int              cchNumber);




#line 1715 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
      LCID               Locale,
      DWORD              dwFlags,
      LPCSTR            lpValue,
      const CURRENCYFMTA *lpFormat,
      LPSTR            lpCurrencyStr,
      int                cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
      LCID               Locale,
      DWORD              dwFlags,
      LPCWSTR            lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR            lpCurrencyStr,
      int                cchCurrency);




#line 1743 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
      CALINFO_ENUMPROCA lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
      CALINFO_ENUMPROCW lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);




#line 1767 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
      CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
      CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);




#line 1792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#line 1793 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
      TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
      TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 1815 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
      DATEFMT_ENUMPROCA lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
      DATEFMT_ENUMPROCW lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 1837 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
      DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
      DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);




#line 1860 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#line 1861 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
      LGRPID  LanguageGroup,
      DWORD   dwFlags);
#line 1870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
         NLS_FUNCTION     Function,
         LCID             Locale,
      LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
      NLS_FUNCTION     Function,
      DWORD            dwFlags,
      LPNLSVERSIONINFO lpVersionInformation,
      LPCWSTR          lpString,
      INT              cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
      LCID   Locale,
      DWORD  dwFlags);

#line 1899 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPWSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);




#line 1927 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
      GEOCLASS        GeoClass,
      GEOID           ParentGeoId,
      GEO_ENUMPROC    lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
      GEOCLASS    GeoClass);

#line 1943 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
      GEOID       GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
      LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
      LCID  Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);
#line 1983 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage(  LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
 
BOOL
__stdcall
GetFileMUIInfo(
                        DWORD           dwFlags,
                     PCWSTR          pcwszFilePath,
      PFILEMUIINFO    pFileMUIInfo,
                  DWORD*          pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
      DWORD      dwFlags,
      PCWSTR     pcwszFilePath ,
        PWSTR pwszLanguage,
      PULONG  pcchLanguage,
      PWSTR pwszFileMUIPath,
              PULONG pcchFileMUIPath,
              PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
      DWORD dwFlags,
      PCZZWSTR pwmszLanguage,
      PZZWSTR pwszFallbackLanguages,
      PDWORD pcchFallbackLanguages,
      PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
             DWORD dwFlags,
             PCWSTR pcwstrNewLanguage,
         PCWSTR pcwstrPreviousLanguage,
             DWORD dwReserved,
        PDWORD pdwStatusRtrn
);

#line 2128 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                      LCID       Locale,
                      DWORD      dwInfoType,
       LPCSTR   lpSrcStr,
                      int        cchSrc,
      LPWORD     lpCharType);


#line 2145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
      LCID     Locale,
      DWORD    dwInfoType,
      LPCSTR   lpSrcStr,
      int      cchSrc,
      LPWORD  lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 2179 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
      LOCALE_ENUMPROCA lpLocaleEnumProc,
      DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
      LOCALE_ENUMPROCW lpLocaleEnumProc,
      DWORD            dwFlags);




#line 2199 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
      LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
      LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);




#line 2220 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
      LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
      LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);




#line 2242 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
      UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
      UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);




#line 2262 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#line 2263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 2265 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
      CODEPAGE_ENUMPROCA lpCodePageEnumProc,
      DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
      CODEPAGE_ENUMPROCW lpCodePageEnumProc,
      DWORD              dwFlags);




#line 2287 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"






__declspec(dllimport)
int
__stdcall NormalizeString(                            NORM_FORM NormForm,
                               LPCWSTR   lpSrcString,
                                                   int       cwSrcLength,
                          LPWSTR    lpDstString,
                                                   int       cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString(                     NORM_FORM NormForm,
                              LPCWSTR   lpString,
                                               int       cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii(                            DWORD    dwFlags,
                    	 LPCWSTR  lpUnicodeCharStr,
                                           	 int      cchUnicodeChar,
                    LPWSTR   lpASCIICharStr,
                                           	 int      cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode(                             	DWORD   dwFlags,
                                  	LPCWSTR lpUnicodeCharStr,
                                                         	int     cchUnicodeChar,
                                LPWSTR  lpNameprepCharStr,
                                                         	int     cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode(                          	 DWORD   dwFlags,
                         	 LPCWSTR lpASCIICharStr,
                                              	 int     cchASCIIChar,
                      LPWSTR  lpUnicodeCharStr,
                                              	 int     cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
         DWORD   dwFlags,            
         LPCWSTR lpLocaleScripts,    
         int     cchLocaleScripts,   
         LPCWSTR lpTestScripts,      
         int     cchTestScripts);    

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                  DWORD   dwFlags,        
                                  LPCWSTR lpString,       
                                  int     cchString,      
          LPWSTR  lpScripts,      
                                  int     cchScripts);    

#line 2353 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 2355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion



#pragma region Application Family










__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
      LPCWSTR lpLocaleName,
      LCTYPE LCType,
      LPWSTR lpLCData,
      int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPWSTR lpCalData,
      int cchData,
      LPDWORD lpValue
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR lpFormat,
      LPWSTR lpDurationStr,
      int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR lpNumberStr,
      int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR lpCurrencyStr,
      int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
     	    NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
     	    LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
             NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
             LPNLSVERSIONINFOEX lpVersionInformation
);
#line 2465 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwFindNLSStringFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      LPINT pcchFound,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);





#line 2487 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwMapFlags,
      LPCWSTR lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
      LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
      CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
      DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
      TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
      LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
      DWORD dwFlags,
      LPARAM lParam,
      LPVOID lpReserved
);

#line 2562 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#line 2565 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



#pragma region Application Family


__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                             LPCWSTR lpNameToResolve,
      LPWSTR  lpLocaleName,
                                 int     cchLocaleName
);

#line 2581 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#line 2584 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#pragma region Desktop Family


    
#line 2590 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"
#pragma endregion

#line 2593 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"



}
#line 2598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 2600 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnls.h"

#line 170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 171 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"


























#pragma once


extern "C" {
#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"



#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#pragma region Application Family


typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

#line 46 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

#line 59 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion

#pragma region Application Family


typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;




















#line 124 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;

#line 149 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion











#pragma region Desktop Family


typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;

#line 173 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion























#pragma region Desktop Family


typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
#line 240 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"



typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

#line 251 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion



#pragma region Desktop Family


typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;

#line 265 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion










#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#pragma region Application Family






typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
      DWORD CtrlType
    );

#line 292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion






























#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );




#line 366 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );




#line 392 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );




#line 418 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPWSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );




#line 444 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      LPWORD lpAttribute,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPCSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPCWSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );




#line 481 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      const WORD *lpAttribute,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      CHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      WCHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );




#line 518 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      WORD   wAttribute,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
#line 598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
      HANDLE hConsoleOutput,
      DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
      PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );

#line 627 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
      LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
      HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
      HANDLE hConsoleOutput,
      COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
      HANDLE hConsoleOutput,
      COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );




#line 698 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
      HANDLE hConsoleOutput,
      BOOL bAbsolute,
      const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
      HANDLE hConsoleOutput,
      WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
      DWORD dwCtrlEvent,
      DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
      DWORD dwProcessId);



#line 739 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize
    );




#line 759 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"


__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize);




#line 778 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#line 779 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
      LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
      LPCWSTR lpConsoleTitle
    );




#line 797 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#line 799 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion

#pragma region Application Family


typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

#line 812 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"
 









#pragma once
#line 13 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"


















#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"


extern "C" {
#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
      HANDLE hConsoleHandle,
      LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
      HANDLE hConsoleInput,
      LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );




#line 97 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleA(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleW(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );





#line 127 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );





#line 155 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
      PHANDLER_ROUTINE HandlerRoutine,
      BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
      HANDLE hConsoleHandle,
      DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );





#line 201 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

#line 203 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"
#pragma endregion


}
#line 208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"

#line 210 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\consoleapi.h"
#line 818 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#line 819 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      const SECURITY_ATTRIBUTES *lpSecurityAttributes,
      DWORD dwFlags,
      LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
      UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
      UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
      LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
      HANDLE hConsoleOutput,
      DWORD dwFlags,
      PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );

#line 877 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"



__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
      LPDWORD lpdwProcessList,
      DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
      LPSTR Source,
      LPSTR Target,
      LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
      LPWSTR Source,
      LPWSTR Target,
      LPWSTR ExeName);




#line 910 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
      LPSTR Source,
      LPSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
      LPWSTR Source,
      LPWSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPWSTR ExeName);




#line 932 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
      LPWSTR ExeName);




#line 948 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);




#line 964 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
      LPSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
      LPWSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPWSTR ExeName);




#line 984 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
      LPSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
      LPWSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);




#line 1002 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#line 1004 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#line 1006 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"
#pragma endregion



}
#line 1012 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#line 1014 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\wincon.h"

#line 173 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


















#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"












#pragma region Application Family












#line 27 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"




























































#line 88 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"
#pragma endregion

#pragma region Desktop Family










































extern "C" {
#line 135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"
    











typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;


}
#line 167 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"

#line 169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"

#line 171 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\verrsrc.h"
#pragma endregion

#line 20 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"



extern "C" {
#line 25 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

#pragma region Desktop Family







DWORD
__stdcall
VerFindFileA(
                                  DWORD uFlags,
                                  LPCSTR szFileName,
                              LPCSTR szWinDir,
                                  LPCSTR szAppDir,
            LPSTR szCurDir,
                               PUINT puCurDirLen,
           LPSTR szDestDir,
                               PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                  DWORD uFlags,
                                  LPCWSTR szFileName,
                              LPCWSTR szWinDir,
                                  LPCWSTR szAppDir,
            LPWSTR szCurDir,
                               PUINT puCurDirLen,
           LPWSTR szDestDir,
                               PUINT puDestDirLen
        );




#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

DWORD
__stdcall
VerInstallFileA(
                                  DWORD uFlags,
                                  LPCSTR szSrcFileName,
                                  LPCSTR szDestFileName,
                                  LPCSTR szSrcDir,
                                  LPCSTR szDestDir,
                                  LPCSTR szCurDir,
           LPSTR szTmpFile,
                               PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                  DWORD uFlags,
                                  LPCWSTR szSrcFileName,
                                  LPCWSTR szDestFileName,
                                  LPCWSTR szSrcDir,
                                  LPCWSTR szDestDir,
                                  LPCWSTR szCurDir,
           LPWSTR szTmpFile,
                               PUINT puTmpFileLen
        );




#line 93 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
                 LPCSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                 LPCWSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );




#line 113 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
                         LPCSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );

BOOL
__stdcall
GetFileVersionInfoW(
                         LPCWSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );




#line 137 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

DWORD __stdcall GetFileVersionInfoSizeExA(  DWORD dwFlags,   LPCSTR lpwstrFilename,   LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW(  DWORD dwFlags,   LPCWSTR lpwstrFilename,   LPDWORD lpdwHandle);




#line 145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

BOOL __stdcall GetFileVersionInfoExA(  DWORD dwFlags,
                                      LPCSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW(  DWORD dwFlags,
                                      LPCWSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);




#line 161 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


DWORD
__stdcall
VerLanguageNameA(
                           DWORD wLang,
          LPSTR szLang,
                           DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                           DWORD wLang,
          LPWSTR szLang,
                           DWORD cchLang
        );




#line 182 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

BOOL
__stdcall
VerQueryValueA(
          LPCVOID pBlock,
          LPCSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
          LPCVOID pBlock,
          LPCWSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );




#line 204 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


#line 207 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"
#pragma endregion


}
#line 214 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"


#line 217 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winver.h"

#line 174 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 175 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
 

































#line 36 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"








extern "C" {
#line 46 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

#pragma region Desktop Family









































typedef ACCESS_MASK REGSAM;





























struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 146 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 184 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

#line 186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


#line 189 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"












typedef   LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
      HKEY hKey,
      HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
      HANDLE hToken,
      DWORD dwOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
      LPCSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );




#line 275 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
      LPCSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );




#line 299 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );





#line 357 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 395 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
      HKEY hKey,
      LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey
    );




#line 415 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );





#line 441 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );




#line 469 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
      HKEY hBase,
      BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
      HKEY hKey,
      LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
      HKEY hKey,
      LPCWSTR lpValueName
    );





#line 513 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      DWORD cchName
    );




#line 537 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );





#line 571 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );





#line 605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpFile
    );





#line 648 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
      HKEY hKey,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter,
      HANDLE hEvent,
      BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 682 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );





#line 710 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 740 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
      HKEY hKey,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
      HKEY hKey,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );





#line 782 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
       LPSTR lpData,
      PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
       LPWSTR lpData,
      PLONG lpcbData
    );




#line 806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
      HKEY hKey,
      PVALENTA val_list,
      DWORD num_vals,
       LPSTR lpValueBuf,
      LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
      HKEY hKey,
      PVALENTW val_list,
      DWORD num_vals,
       LPWSTR lpValueBuf,
      LPDWORD ldwTotsize
    );




#line 835 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
#line 836 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );





#line 868 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpNewFile,
      LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpNewFile,
      LPCWSTR lpOldFile
    );




#line 892 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
      HKEY hKey,
      LPCSTR lpFile,
      DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
      HKEY hKey,
      LPCWSTR lpFile,
      DWORD dwFlags
    );





#line 916 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
      HKEY hKey,
      LPCWSTR lpSubKeyName,
      LPCWSTR lpNewKeyName
    );

#line 930 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 952 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD dwType,
      LPCSTR lpData,
      DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD dwType,
      LPCWSTR lpData,
      DWORD cbData
    );




#line 988 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );





#line 1018 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1040 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
           HKEY     hKey,
       LPCSTR lpSubKey,
       LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
           HKEY     hKey,
       LPCWSTR lpSubKey,
       LPCWSTR lpValueName
    );




#line 1068 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
             HKEY     hKey,
         LPCSTR  lpSubKey,
         LPCSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
             HKEY     hKey,
         LPCWSTR  lpSubKey,
         LPCWSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );




#line 1096 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1118 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
             HKEY     hKeySrc,
         LPCSTR  lpSubKey,
             HKEY     hKeyDest
    );


#line 1130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
      HKEY hkey,
      LPCSTR lpSubKey,
      LPCSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1148 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
	
#line 1150 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
      HKEY hkey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
	
#line 1170 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );





#line 1179 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

#line 1181 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
      HKEY hKeySrc,
      LPCWSTR lpSubKey,
      HKEY hKeyDest
    );




#line 1198 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
      HKEY hKey,
      LPCSTR pszValue,
      LPSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
      HKEY hKey,
      LPCWSTR pszValue,
      LPWSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCWSTR pszDirectory
    );





#line 1230 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
      LPCSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
      LPCWSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );





#line 1258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

#line 1260 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"





 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );
 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );




#line 1292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
      LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
      LPWSTR lpMachineName
    );




#line 1311 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\reason.h"
















#pragma once

#pragma region Desktop Family






































































































#line 123 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\reason.h"
#pragma endregion

#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\reason.h"
#line 1317 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


















 

#line 1338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );
 

#line 1352 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );




#line 1368 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

















__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );




#line 1410 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"

__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
      PBOOLEAN pHiberboot,
      BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );





#line 1444 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


#line 1447 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"
#pragma endregion


}
#line 1452 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


#line 1455 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winreg.h"


#line 177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 178 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"




























#pragma once


extern "C" {
#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

#pragma region Desktop Family







#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\wnnc.h"



























#pragma region Desktop Family




















































































#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\wnnc.h"
#pragma endregion

#line 117 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\wnnc.h"



#line 44 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"











#line 56 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"






#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"









#line 73 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"













#line 87 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"



#line 91 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 119 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"





















#line 141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"



#line 145 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"


#line 148 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnectionA(
          LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
 
DWORD __stdcall
WNetAddConnectionW(
          LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );




#line 168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection2A(
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection2W(
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 190 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 214 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );




#line 232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );




#line 252 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
      LPDWORD lpnLength
    );
 
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
      LPDWORD lpnLength
    );




#line 272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetRestoreSingleConnectionW(
      HWND    hwndParent,
          LPCWSTR lpDevice,
          BOOL    fUseUI
    );









#line 292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetUseConnectionA(
      HWND            hwndOwner,
          LPNETRESOURCEA  lpNetResource,
      LPCSTR        lpPassword,
      LPCSTR        lpUserId,
          DWORD           dwFlags,
      LPSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );
 
DWORD __stdcall
WNetUseConnectionW(
      HWND            hwndOwner,
          LPNETRESOURCEW  lpNetResource,
      LPCWSTR        lpPassword,
      LPCWSTR        lpUserId,
          DWORD           dwFlags,
      LPWSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );




#line 324 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"
#line 325 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetConnectionDialog(
      HWND  hwnd,
      DWORD dwType
    );

 
DWORD __stdcall
WNetDisconnectDialog(
      HWND hwnd,
      DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 366 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"














 
DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 395 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 417 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"




 
DWORD __stdcall
WNetDisconnectDialog1A(
      LPDISCDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetDisconnectDialog1W(
      LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 436 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"
#line 437 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetOpenEnumA(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
 
DWORD __stdcall
WNetOpenEnumW(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );




#line 465 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetEnumResourceA(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetEnumResourceW(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );




#line 487 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCloseEnum(
      HANDLE   hEnum
    );


 
DWORD __stdcall
WNetGetResourceParentA(
      LPNETRESOURCEA lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
 
DWORD __stdcall
WNetGetResourceParentW(
      LPNETRESOURCEW lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );




#line 514 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetResourceInformationA(
      LPNETRESOURCEA  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPSTR *lplpSystem
    );
 
DWORD __stdcall
WNetGetResourceInformationW(
      LPNETRESOURCEW  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPWSTR *lplpSystem
    );




#line 536 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"
#line 537 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"








typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 558 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 576 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );




#line 598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"




 
DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR lpUserName,
       LPDWORD lpnLength
    );



 
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR lpUserName,
       LPDWORD lpnLength
    );




#line 624 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"












#line 637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetGetProviderNameA(
         DWORD   dwNetType,
      LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetProviderNameW(
         DWORD   dwNetType,
      LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );




#line 659 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





 
DWORD __stdcall
WNetGetNetworkInformationA(
       LPCSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );
 
DWORD __stdcall
WNetGetNetworkInformationW(
       LPCWSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );




#line 692 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

#line 694 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR  lpNameBuf,
      DWORD      nNameBufSize
    );
 
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR  lpNameBuf,
      DWORD      nNameBufSize
    );




#line 722 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"





























#line 752 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"




















#line 773 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"












#line 786 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






 
DWORD __stdcall
MultinetGetConnectionPerformanceA(
       LPNETRESOURCEA lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
 
DWORD __stdcall
MultinetGetConnectionPerformanceW(
       LPNETRESOURCEW lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );




#line 822 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"
#line 823 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"


#line 826 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"
#pragma endregion


}
#line 831 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"

#line 833 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winnetwk.h"


#line 180 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 181 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"




































#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"




















































#line 54 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"
#line 55 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"




#line 60 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

#line 62 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"
#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


extern "C" {
#line 67 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

#pragma region Desktop Family












#pragma warning(push)
#pragma warning(disable:4127)
#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"








































#line 125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


















#line 144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"







LPUWSTR
__stdcall
uaw_CharUpperW(
      LPUWSTR String
    );

int
__stdcall
uaw_lstrcmpW(
      PCUWSTR String1,
      PCUWSTR String2
    );

int
__stdcall
uaw_lstrcmpiW(
      PCUWSTR String1,
      PCUWSTR String2
    );

int
__stdcall
uaw_lstrlenW(
      LPCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcschr(
      PCUWSTR String,
      WCHAR   Character
    );

PUWSTR
__cdecl
uaw_wcscpy(
      PUWSTR  Destination,
       PCUWSTR Source
    );

int
__cdecl
uaw_wcsicmp(
      PCUWSTR String1,
      PCUWSTR String2
    );

size_t
__cdecl
uaw_wcslen(
      PCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcsrchr(
      PCUWSTR String,
      WCHAR   Character
    );









__inline
LPUWSTR
static
ua_CharUpperW(
      LPUWSTR String
    )
{
    if (1) {
        return CharUpperW( (PWSTR)String );
    } else {
        return uaw_CharUpperW( String );
    }
}
#line 233 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


__inline
int
static
ua_lstrcmpW(
      LPCUWSTR String1,
      LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpW( (LPCWSTR)String1, (LPCWSTR)String2);
    } else {
        return uaw_lstrcmpW( String1, String2 );
    }
}
#line 250 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


__inline
int
static
ua_lstrcmpiW(
      LPCUWSTR String1,
      LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpiW( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_lstrcmpiW( String1, String2 );
    }
}
#line 267 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


__inline
int
static
ua_lstrlenW(
      LPCUWSTR String
    )
{
    if (1) {
#pragma warning(suppress: 28750) 
        return lstrlenW( (PCWSTR)String );
    } else {
        return uaw_lstrlenW( String );
    }
}
#line 284 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"






























typedef const WCHAR __unaligned *PUWSTR_C;


#line 318 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"





__inline
PUWSTR_C
static
ua_wcschr(
      PCUWSTR String,
      WCHAR   Character
    )
{
    if (1) {
        return wcschr((PCWSTR)String, Character);
    } else {
        return (PUWSTR_C)uaw_wcschr(String, Character);
    }
}

__inline
PUWSTR_C
static
ua_wcsrchr(
      PCUWSTR String,
      WCHAR   Character
    )
{
    if (1) {
        return wcsrchr((PCWSTR)String, Character);
    } else {
        return (PUWSTR_C)uaw_wcsrchr(String, Character);
    }
}



























































#line 412 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
      PUWSTR  Destination,
      PCUWSTR Source
    )
{
    if (1 && 1) {
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)



        return wcscpy( (PWSTR)Destination, (PCWSTR)Source );
#pragma warning(pop)
    } else {
        return uaw_wcscpy( Destination, Source );
    }
}



__inline
PUWSTR
static
ua_wcscpy_s(
      PUWSTR Destination,
      size_t  DestinationSize,
      PCUWSTR Source
    )
{
    if (1 && 1) {
        return (wcscpy_s( (PWSTR)Destination, DestinationSize, (PCWSTR)Source ) == 0 ? Destination : 0);
    } else {
        
        return uaw_wcscpy( Destination, Source );
    }
}
#line 455 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

__inline
size_t
static
ua_wcslen(
      PCUWSTR String
    )
{
    if (1) {
        return wcslen( (PCWSTR)String );
    } else {
        return uaw_wcslen( String );
    }
}

#line 471 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

__inline
int
static
ua_wcsicmp(
      PCUWSTR String1,
      PCUWSTR String2
    )
{
    if (1 && 1) {
        return _wcsicmp( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_wcsicmp( String1, String2 );
    }
}

#line 488 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"






































































#line 559 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"




































#line 596 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"











































#line 640 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"



#line 644 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"














#line 659 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"










#line 670 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

#line 672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"


#pragma warning(pop)
#line 676 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

#line 678 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"
#pragma endregion


}
#line 683 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"

#line 685 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\stralign.h"








#line 218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"












#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"
































#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"


extern "C" {
#line 38 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#pragma region Desktop Family





































#line 78 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"













































































































































































































































































extern "C" const GUID  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
#line 354 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

extern "C" const GUID  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
#line 362 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




extern "C" const GUID  DOMAIN_JOIN_GUID;
#line 373 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

extern "C" const GUID  DOMAIN_LEAVE_GUID;
#line 381 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"





extern "C" const GUID  FIREWALL_PORT_OPEN_GUID;
#line 393 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

extern "C" const GUID  FIREWALL_PORT_CLOSE_GUID;
#line 401 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"





extern "C" const GUID  MACHINE_POLICY_PRESENT_GUID;
#line 413 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

extern "C" const GUID  USER_POLICY_PRESENT_GUID;
#line 421 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"





extern "C" const GUID  RPC_INTERFACE_EVENT_GUID;
#line 433 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

extern "C" const GUID  NAMED_PIPE_EVENT_GUID;
#line 441 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




extern "C" const GUID  CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
#line 452 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"
  



typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
















typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 502 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 551 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL       fDelayedAutostart;      
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL       fFailureActionsOnNonCrashFailures;       
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD       dwServiceSidType;     
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR       pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR      pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;




typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#line 592 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD       dwPreshutdownTimeout;   
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD   dwDataType; 



    DWORD   cbData;     



    PBYTE   pData;      
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD                       dwTriggerType;              
    DWORD                       dwAction;                   
    GUID    *                   pTriggerSubtype;            
                                                            
                                                            



    DWORD                       cDataItems;                 



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM  pDataItems;       
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD                   cTriggers;  



    PSERVICE_TRIGGER        pTriggers;  
    PBYTE                   pReserved;  
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;




typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT                  usPreferredNode;    
    BOOLEAN                 fDelete;            
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER   liNewTime;      
    LARGE_INTEGER   liOldTime;      
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD       dwLaunchProtected;     
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 747 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
#line 765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"





typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 789 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 825 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"







typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );





#line 847 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 863 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 884 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"





typedef void __stdcall HANDLER_FUNCTION (
    DWORD    dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
      PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPSTR                   pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPWSTR                  pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;




typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
#line 956 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;




typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
#line 966 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD                   dwReason;
    LPSTR                   pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD                   dwReason;
    LPWSTR                  pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;




typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
#line 990 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"




typedef struct _SERVICE_START_REASON {
    DWORD                   dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword,
         LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword,
         LPCWSTR     lpDisplayName
    );




#line 1039 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );




#line 1061 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
             SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
             SC_HANDLE           hService,
             DWORD               dwControl,
            LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
             SC_HANDLE    hSCManager,
             LPCSTR     lpServiceName,
         LPCSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
             SC_HANDLE    hSCManager,
             LPCWSTR     lpServiceName,
         LPCWSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword
    );




#line 1121 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
             SC_HANDLE   hService
    );

 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );




#line 1160 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );




#line 1196 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCSTR                pszGroupName
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCWSTR                pszGroupName
    );




#line 1236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpDisplayName,
     
                    LPSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpDisplayName,
     
                    LPWSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );




#line 1264 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
     
                    LPSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
     
                    LPWSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );




#line 1292 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                 SC_HANDLE               hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                 BOOL                    BootAcceptable
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
             LPCSTR                lpMachineName,
             LPCSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
             LPCWSTR                lpMachineName,
             LPCWSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );




#line 1330 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );




#line 1354 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1382 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"


#line 1385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1387 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1390 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

#line 1404 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1406 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1409 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1426 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );




#line 1454 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                 SC_HANDLE               hService,
                 SECURITY_INFORMATION    dwSecurityInformation,
     
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                 SC_HANDLE           hService,
                LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                 SC_HANDLE           hService,
                 SC_STATUS_TYPE      InfoLevel,
     
                    LPBYTE              lpBuffer,
                 DWORD               cbBufSize,
                LPDWORD             pcbBytesNeeded
    );

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );




#line 1513 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );




#line 1539 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
             SC_HANDLE               hService,
             SECURITY_INFORMATION    dwSecurityInformation,
             PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
             SERVICE_STATUS_HANDLE   hServiceStatus,
             LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
      const  SERVICE_TABLE_ENTRYA    *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
      const  SERVICE_TABLE_ENTRYW    *lpServiceStartTable
    );




#line 1574 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCWSTR             *lpServiceArgVectors
    );




#line 1599 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                 SC_LOCK             ScLock
    );



__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYA        pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYW        pNotifyBuffer
    );




#line 1630 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );




#line 1654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
             SERVICE_STATUS_HANDLE   hServiceStatus,
             DWORD                   dwInfoLevel,
        PVOID           *       ppDynamicInfo
    );

#line 1665 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1667 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"
#pragma endregion


}
#line 1672 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"

#line 1674 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsvc.h"


#line 231 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 232 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"



#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\mcx.h"












#pragma once
#line 15 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\mcx.h"

typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;

















































































































































































































































































































































































































































































































































































































































































#line 723 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\mcx.h"
#line 236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"













extern "C" {
#line 16 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"






#pragma region Application Family



struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;



#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion

#pragma region Desktop Family


typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

#line 43 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion

#pragma region Application Family


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;

#line 63 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

#line 81 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion


#pragma region Application Family


typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

#line 108 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;

#line 127 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion

#line 130 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"



#pragma region Application Family


typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 155 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

#line 157 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion

#pragma region Desktop Family



#line 164 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
#line 206 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

#line 218 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion

#line 221 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"





#pragma region Desktop Family


HKL  __stdcall ImmInstallIMEA(  LPCSTR lpszIMEFileName,   LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(  LPCWSTR lpszIMEFileName,   LPCWSTR lpszLayoutText);




#line 236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,   LPSTR lpszDescription,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,   LPWSTR lpszDescription,  UINT uBufLen);




#line 246 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

UINT __stdcall ImmGetIMEFileNameA( HKL,   LPSTR lpszFileName,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,   LPWSTR lpszFileName,  UINT uBufLen);




#line 254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND,  HIMC,  DWORD);
#line 269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);




#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);




#line 285 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA( HIMC,   LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,   LPDWORD lpdwListCount);




#line 293 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);




#line 301 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

DWORD __stdcall ImmGetGuideLineA(  HIMC,   DWORD dwIndex,   LPSTR lpBuf,   DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(  HIMC,   DWORD dwIndex,   LPWSTR lpBuf,   DWORD dwBufLen);




#line 309 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL __stdcall ImmGetConversionStatus( HIMC,   LPDWORD lpfdwConversion,   LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 323 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL __stdcall ImmSetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 331 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#line 332 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);




#line 340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);




#line 348 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,   LPCSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,   LPCWSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);




#line 356 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,   LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC,   LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);




#line 373 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"


UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(  LPCSTR lpszReading, DWORD,   LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(  LPCWSTR lpszReading, DWORD,   LPCWSTR lpszString, LPVOID);




#line 384 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL __stdcall ImmRegisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister);




#line 392 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL __stdcall ImmUnregisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszUnregister);




#line 400 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,   LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,   LPSTYLEBUFW lpStyleBuf);




#line 408 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister,  LPVOID);




#line 416 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"


BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOA lpImeParentMenu,   LPIMEMENUITEMINFOA lpImeMenu,  DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOW lpImeParentMenu,   LPIMEMENUITEMINFOW lpImeMenu,  DWORD dwSize);




#line 427 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
#line 430 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"


BOOL __stdcall ImmDisableLegacyIME();
#line 434 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

#line 436 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"
#pragma endregion









































































































































































































#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ime_cmodes.h"



#pragma once

















#line 23 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\ime_cmodes.h"

#line 639 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"






















































#line 694 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"






































































#line 765 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"








#line 774 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"


}
#line 778 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"

#line 780 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\imm.h"


#line 240 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 241 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 242 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 243 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"




#pragma warning(pop)





#line 254 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 255 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#line 256 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 260 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"
#pragma endregion

#line 263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 265 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\windows.h"

#line 15 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\PrecompiledHeader.h"


#line 4 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/Function.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\Function.h"


#pragma once







#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Error.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Dependencies.h"


#pragma once









class IOStream;
class Node;



class Dependency
{
public:
	explicit Dependency( Node * node )
		: m_Node( node )
		, m_IsWeak( false )
	{}
	explicit Dependency( Node * node, bool isWeak )
		: m_Node( node )
		, m_IsWeak( isWeak )
	{}

	inline Node * GetNode() const { return m_Node; }
	inline bool IsWeak() const { return m_IsWeak; }

private:
	Node * m_Node;	
	bool m_IsWeak;	
};



class Dependencies : public Array< Dependency >
{
public:
	explicit inline Dependencies()
		: Array< Dependency >()
	{}
	explicit inline Dependencies( size_t initialCapacity, bool resizeable = false )
		: Array< Dependency >( initialCapacity, resizeable )
	{}
	explicit inline Dependencies( Dependency * begin, Dependency * end )
		: Array< Dependency >( begin, end )
	{}

	

	void Save( IOStream & stream ) const;
	bool Load( IOStream & stream );
};


#line 61 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Dependencies.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h"



#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/Object.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\core\\reflection\\ReflectionMacros.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Ref.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/RefObject.h"


#pragma once









class ReflectionInfo;



class RefObject
{
public:
	inline explicit RefObject() : m_ReferenceCount( 0 ) {}
	inline virtual ~RefObject() {}

	virtual const ReflectionInfo * GetReflectionInfoV() const = 0;

	
	inline void IncRef()
	{
		++m_ReferenceCount;
	}
	
	inline void DecRef()
	{
		if ( --m_ReferenceCount == 0 )
		{
			Destroy();
		}
	}

private:
    template< class T, class U >
    friend T * DynamicCast( U * object );
	static bool CanDynamicCast( const ReflectionInfo * dst, const ReflectionInfo * src );

	inline virtual void Destroy() { delete this; }

	uint32_t m_ReferenceCount;
};
void RefObject_ReflectionInfo_Bind();



template < class T, class U >
T * DynamicCast( U * object )
{
	if ( object )
	{
		if ( RefObject::CanDynamicCast( T::GetReflectionInfoS(), object->GetReflectionInfoV() ) )
		{
			return (T *)object;
		}
	}
	return nullptr;
}


#line 67 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/RefObject.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Ref.h"






template < class T >
class Ref
{
public:
	explicit inline Ref() : m_Pointer( nullptr ) {}
	explicit inline Ref( const Ref< T > & other ) : m_Pointer( other.Get() ) { if ( m_Pointer ) { m_Pointer->IncRef(); } }
	explicit inline Ref( T * ptr ) : m_Pointer( ptr ) { if ( ptr ) { ptr->IncRef(); } }
	inline		   ~Ref() { T * ptr = m_Pointer; if ( ptr ) { ptr->DecRef(); } }

	
	inline		 T * Get()				 { return m_Pointer; }
	inline       T * Get() const		 { return m_Pointer; }
	inline		 T * operator ->()		 { return m_Pointer; }
	inline       T * operator ->() const { return m_Pointer; }

	inline void operator = ( const Ref< RefObject > & other ) { Assign( other.m_Pointer ); }
	template < class U >
	inline void operator = ( const Ref< U > & other ) { Assign( other.m_Pointer ); }
	template < class U >
	inline void operator = ( U * other ) { Assign( other ); }

private:
	void Assign( T * ptr )
	{ 
		if ( ptr )
		{
			ptr->IncRef();
		}
		T * old = m_Pointer;
		m_Pointer = ptr;
		if ( old )
		{
			old->DecRef();
		}
	}

	T * m_Pointer;
};


#line 57 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Ref.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/WeakRef.h"


#pragma once








class Object;



template < class T >
class WeakRef
{
public:
	explicit inline WeakRef() : m_Pointer( nullptr ) {}
	explicit inline WeakRef( T * ptr ) : m_Pointer( ptr ) {  }
	inline		   ~WeakRef() {  }

	
	inline		 T * Get()				 { return m_Pointer; }
	inline       T * Get() const		 { return m_Pointer; }
	inline		 T * operator ->()		 { return m_Pointer; }
	inline       T * operator ->() const { return m_Pointer; }

	inline void operator = ( const WeakRef< Object > & other ) { Assign( other.m_Pointer ); }
	template < class U >
	inline void operator = ( const WeakRef< U > & other ) { Assign( other.m_Pointer ); }
	template < class U >
	inline void operator = ( U * other ) { Assign( other ); }

private:
	void Assign( T * ptr )
	{
		
		m_Pointer = ptr;
		
	}

	T * m_Pointer;
};


#line 49 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/WeakRef.h"
#line 12 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionIter.h"


#pragma once









class ReflectionInfo;
class ReflectedProperty;



class ReflectionIter
{
public:
	explicit ReflectionIter( const ReflectionInfo * info, uint32_t index );

	
	bool operator == ( const ReflectionIter & other ) const;
	inline bool operator != ( const ReflectionIter & other ) const { return !( *this == other ); }

	
	void operator ++();

	
	const ReflectedProperty & operator ->() const;
	const ReflectedProperty & operator *() const;

protected:
	const ReflectionInfo *	m_Info;
	uint32_t				m_Index;
};


#line 41 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionIter.h"
#line 14 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/PropertyType.h"


#pragma once









class AString;
class DefaultDeletor;
class Vec2;
class Vec3;
class Vec4;
class Mat44;
class RefObject;
template< class T > class Ref;
template< class T > class WeakRef;



enum PropertyType
{
	PT_NONE			= 0,
	PT_FLOAT		= 1,
	PT_UINT8		= 2,
	PT_UINT16		= 3,
	PT_UINT32		= 4,
	PT_UINT64		= 5,
	PT_INT8			= 6,
	PT_INT16		= 7,
	PT_INT32		= 8,
	PT_INT64		= 9,
	PT_BOOL			= 10,
	PT_ASTRING		= 11,
	PT_VEC2			= 12,
	PT_VEC3			= 13,
	PT_VEC4			= 14,
	PT_MAT44		= 15,
	PT_STRUCT		= 16,
	PT_REF			= 17,
	PT_WEAKREF		= 18,
};

inline PropertyType GetPropertyType( const float * )	{ return PT_FLOAT; }
inline PropertyType GetPropertyType( const uint8_t * )	{ return PT_UINT8; }
inline PropertyType GetPropertyType( const uint16_t * )	{ return PT_UINT16; }
inline PropertyType GetPropertyType( const uint32_t * )	{ return PT_UINT32; }
inline PropertyType GetPropertyType( const uint64_t * )	{ return PT_UINT64; }
inline PropertyType GetPropertyType( const int8_t * )	{ return PT_INT8; }
inline PropertyType GetPropertyType( const int16_t * )	{ return PT_INT16; }
inline PropertyType GetPropertyType( const int32_t * )	{ return PT_INT32; }
inline PropertyType GetPropertyType( const int64_t * )	{ return PT_INT64; }
inline PropertyType GetPropertyType( const bool * )		{ return PT_BOOL; }
inline PropertyType GetPropertyType( const AString * )	{ return PT_ASTRING; }
inline PropertyType GetPropertyType( const Vec2 * )		{ return PT_VEC2; }
inline PropertyType GetPropertyType( const Vec3 * )		{ return PT_VEC3; }
inline PropertyType GetPropertyType( const Vec4 * )		{ return PT_VEC4; }
inline PropertyType GetPropertyType( const Mat44 * )	{ return PT_MAT44; }
template < class T >
inline PropertyType GetPropertyType( const Ref< T > * )	{ return PT_REF; }
template < class T >
inline PropertyType GetPropertyType( const WeakRef< T > * )	{ return PT_WEAKREF; }

PropertyType GetPropertyTypeFromString( const AString & propertyType );


#line 72 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/PropertyType.h"
#line 16 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"



class AString;
class IMetaData;
class Mat44;
class Object;
class ReflectionInfo;
class ReflectedProperty;
class RefObject;
class Struct;
class Vec2;
class Vec3;
class Vec4;



class ReflectionInfo
{
public:
	explicit ReflectionInfo();
	virtual ~ReflectionInfo();

	inline const ReflectionInfo * GetSuperClass() const { return m_SuperClass; }

	inline const char * GetTypeName() const { return m_TypeName; }
	inline bool IsStruct() const { return ( m_StructSize > 0 ); }
	inline bool IsObject() const { return ( m_StructSize == 0 ); }
	inline bool IsAbstract() const { return m_IsAbstract; }
	inline size_t GetStructSize() const { return m_StructSize; }

	ReflectionIter Begin() const;
	ReflectionIter End() const;

	const ReflectedProperty & GetReflectedProperty( uint32_t index ) const;
	const ReflectedProperty * GetReflectedProperty( const AString & propertyName ) const;

	static RefObject * CreateObject( const AString & objectType );
	static Struct * CreateStruct( const AString & structType );
	RefObject * CreateObject() const;
	Struct * CreateStruct() const;
	void SetArraySize( void * array, size_t size ) const;

	
	static Object * Load( const char * scopedName );

	static void RegisterRootObject( Object * obj );
	static Object * FindObjectByScopedName( const AString & scopedName );

	
	static bool WriteDefinitions();

	



	bool GetProperty( void * object, const char * name, float * value ) const; bool SetProperty( void * object, const char * name, float value ) const;
	bool GetProperty( void * object, const char * name, uint8_t * value ) const; bool SetProperty( void * object, const char * name, uint8_t value ) const;
	bool GetProperty( void * object, const char * name, uint16_t * value ) const; bool SetProperty( void * object, const char * name, uint16_t value ) const;
	bool GetProperty( void * object, const char * name, uint32_t * value ) const; bool SetProperty( void * object, const char * name, uint32_t value ) const;
	bool GetProperty( void * object, const char * name, uint64_t * value ) const; bool SetProperty( void * object, const char * name, uint64_t value ) const;
	bool GetProperty( void * object, const char * name, int8_t * value ) const; bool SetProperty( void * object, const char * name, int8_t value ) const;
	bool GetProperty( void * object, const char * name, int16_t * value ) const; bool SetProperty( void * object, const char * name, int16_t value ) const;
	bool GetProperty( void * object, const char * name, int32_t * value ) const; bool SetProperty( void * object, const char * name, int32_t value ) const;
	bool GetProperty( void * object, const char * name, int64_t * value ) const; bool SetProperty( void * object, const char * name, int64_t value ) const;
	bool GetProperty( void * object, const char * name, bool * value ) const; bool SetProperty( void * object, const char * name, bool value ) const;
	bool GetProperty( void * object, const char * name, AString * value ) const; bool SetProperty( void * object, const char * name, const AString & value ) const;
	bool GetProperty( void * object, const char * name, Vec2 * value ) const; bool SetProperty( void * object, const char * name, const Vec2 & value ) const;
	bool GetProperty( void * object, const char * name, Vec3 * value ) const; bool SetProperty( void * object, const char * name, const Vec3 & value ) const;
	bool GetProperty( void * object, const char * name, Vec4 * value ) const; bool SetProperty( void * object, const char * name, const Vec4 & value ) const;
	bool GetProperty( void * object, const char * name, Mat44 * value ) const; bool SetProperty( void * object, const char * name, const Mat44 & value ) const;
	bool GetProperty( void * object, const char * name, Ref< RefObject > * value ) const; bool SetProperty( void * object, const char * name, const Ref< RefObject > & value ) const;
	bool GetProperty( void * object, const char * name, WeakRef< Object > * value ) const; bool SetProperty( void * object, const char * name, const WeakRef< Object > & value ) const;

	



	bool GetProperty( void * object, const char * name, const Array< AString > * & value ) const; bool SetProperty( void * object, const char * name, const Array< AString > & value ) const;

	
	

	static void BindReflection( ReflectionInfo & reflectionInfo );

	template < class T >
	const T * HasMetaData() const
	{
        const ReflectionInfo * ri = T::GetReflectionInfoS();
        return ( const T* )HasMetaDataInternal( ri );
	}

protected:
    const IMetaData * HasMetaDataInternal( const ReflectionInfo * ri ) const;

	void SetTypeName( const char * typeName );

	
	template< class T >
	__declspec( noinline ) void AddProperty( T * memberOffset,	const char * memberName )
	{
		PropertyType type = GetPropertyType( memberOffset );
		AddPropertyInternal( type, (uint32_t)( (size_t)memberOffset ), memberName, false );
	}

	
	void AddPropertyStruct( void * memberOffset, const char * memberName, const ReflectionInfo * structInfo );

	
	template< class T >
	__declspec( noinline ) void AddPropertyArray( Array< T > * memberOffset, const char * memberName )
	{
		T * fakeElement( nullptr );
		PropertyType type = GetPropertyType( fakeElement );
		AddPropertyInternal( type, (uint32_t)( (size_t)memberOffset ), memberName, true );
	}

	
	void AddPropertyArrayOfStruct( void * memberOffset, const char * memberName, const ReflectionInfo * structInfo );

	void AddPropertyInternal( PropertyType type, uint32_t offset, const char * memberName, bool isArray );

	void AddMetaData( IMetaData & metaDataChain );
	void AddPropertyMetaData( IMetaData & metaDataChain );

	const ReflectedProperty * FindProperty( const char * name ) const;
	const ReflectedProperty * FindPropertyRecurse( uint32_t nameCRC ) const;

	virtual void * Create() const;
	virtual void SetArraySizeV( void * array, size_t size ) const;

	uint32_t m_TypeNameCRC;
	Array< ReflectedProperty * > m_Properties;
	const ReflectionInfo * m_SuperClass;
	const ReflectionInfo * m_Next;
	const char * m_TypeName;
	bool m_IsAbstract;
	uint32_t m_StructSize;
	IMetaData * m_MetaDataChain;

	static ReflectionInfo * s_FirstReflectionInfo;
	static Array< Object * > s_RootObjects;
};


#line 162 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectionInfo.h"
#line 10 "c:\\users\\franta\\p4\\code\\core\\reflection\\ReflectionMacros.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/MetaData.h"


#pragma once





class IMetaData;







IMetaData & operator + ( IMetaData & a, IMetaData & b );



IMetaData & MetaNone();



IMetaData & MetaFile( bool relative = false );
IMetaData & MetaOptional();
IMetaData & MetaPath( bool relative = false );
IMetaData & MetaRange( uint32_t minVal, uint32_t maxVal );


#line 32 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/MetaData.h"
#line 11 "c:\\users\\franta\\p4\\code\\core\\reflection\\ReflectionMacros.h"



class ReflectionInfo;















































































































































#line 159 "c:\\users\\franta\\p4\\code\\core\\reflection\\ReflectionMacros.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/Object.h"





class Container;



class Struct
{
public:
};

void Object_ReflectionInfo_Bind();



class Object : public RefObject
{
public:
	explicit Object();
	virtual ~Object();
	virtual void Init() {}

	inline uint32_t GetId() const { return m_Id; }
	inline void SetName( const AString & name ) { m_Name = name; }
	inline const AString & GetName() const { return m_Name; }

	virtual const ReflectionInfo * GetReflectionInfoV() const = 0;

	static const ReflectionInfo * GetReflectionInfoS();

	void GetScopedName( AString & scopedName ) const;
	Container * GetParent() const { return m_Parent; }
protected:
	uint32_t	m_Id;
	AString		m_Name;
	Container * m_Parent;
};


#line 53 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/Object.h"
#line 15 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h"




class IOStream;
class CompilerNode;
class FileNode;
class IMetaData;
class Job;





















IMetaData & MetaName( const char * name );



class Node : public Object
{
	private: friend class Node_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:

	enum Type
	{
		PROXY_NODE			= 0,
		COPY_NODE			= 1,
		DIRECTORY_LIST_NODE	= 2,
		EXEC_NODE			= 3,
		FILE_NODE			= 4,
		LIBRARY_NODE		= 5,
		OBJECT_NODE			= 6,
		ALIAS_NODE			= 7,
		EXE_NODE			= 8,
		UNITY_NODE			= 9,
		CS_NODE				= 10,
		TEST_NODE			= 11,
		COMPILER_NODE		= 12,
		DLL_NODE			= 13,
		VCXPROJECT_NODE		= 14,
		OBJECT_LIST_NODE	= 15,
		COPY_DIR_NODE		= 16,
		
		NUM_NODE_TYPES		
	};

	enum ControlFlag
	{
		FLAG_NONE					= 0x00,
		FLAG_TRIVIAL_BUILD			= 0x01,	
		FLAG_NO_DELETE_ON_FAIL		= 0x02, 
	};

	enum StatsFlag
	{
		STATS_PROCESSED		= 0x01, 
		STATS_BUILT			= 0x02,	
		STATS_CACHE_HIT		= 0x04, 
		STATS_CACHE_MISS	= 0x08, 
		STATS_CACHE_STORE	= 0x10, 
		STATS_BUILT_REMOTE  = 0x20, 
		STATS_REPORT_PROCESSED	= 0x4000, 
		STATS_STATS_PROCESSED	= 0x8000 
	};

	enum BuildResult
	{
		NODE_RESULT_FAILED		= 0,	
		NODE_RESULT_NEED_SECOND_BUILD_PASS,	
		NODE_RESULT_OK,					
		NODE_RESULT_OK_CACHE			
	};

	enum State
	{
		NOT_PROCESSED,		
		PRE_DEPS_READY,		
		STATIC_DEPS_READY,	
		DYNAMIC_DEPS_DONE,	
		BUILDING,			
		FAILED,				
		UP_TO_DATE,			
	};

	enum Priority
	{
		PRIORITY_HIGH,
		PRIORITY_NORMAL,
		NUM_PRIORITY_LEVELS
	};

	explicit Node( const AString & name, Type type, uint32_t controlFlags );
	virtual ~Node();

	
	inline uint32_t 	   GetNameCRC() const { return m_NameCRC; }
	inline Type GetType() const { return m_Type; }
	inline const char * GetTypeName() const { return s_NodeTypeNames[ m_Type ]; }
	inline static const char * GetTypeName( Type t ) { return s_NodeTypeNames[ t ]; }
	template < class T >
	inline T * CastTo() const;

	
	virtual bool IsAFile() const = 0;

	inline State GetState() const { return m_State; }

	inline bool GetStatFlag( StatsFlag flag ) const { return ( ( m_StatsFlags & flag ) != 0 ); }
	inline void SetStatFlag( StatsFlag flag ) const	{ m_StatsFlags |= flag; }

	inline uint32_t GetLastBuildTime() const	{ return m_LastBuildTimeMs; }
	inline uint32_t GetProcessingTime() const	{ return m_ProcessingTime; }

	inline uint32_t GetProgressAccumulator() const { return m_ProgressAccumulator; }
	inline void		SetProgressAccumulator( uint32_t p ) const { m_ProgressAccumulator = p; }

	virtual Priority GetPriority() const { return PRIORITY_NORMAL; }

	static Node *	Load( IOStream & stream );
	static void		Save( IOStream & stream, const Node * node );

	static Node *	LoadRemote( IOStream & stream );
	static void		SaveRemote( IOStream & stream, const Node * node );

	void Serialize( IOStream & stream ) const;
	bool Deserialize( IOStream & stream );

	static bool EnsurePathExistsForFile( const AString & name );

	inline uint64_t GetStamp() const { return m_Stamp; }

	inline uint32_t GetIndex() const { return m_Index; }

	static void DumpOutput( Job * job,
							const char * data, 
							uint32_t dataSize,
							const Array< AString > * exclusions = nullptr );

	inline void		SetBuildPassTag( uint32_t pass ) const { m_BuildPassTag = pass; }
	inline uint32_t	GetBuildPassTag() const 			{ return m_BuildPassTag; }

protected:
	friend class FBuild;
	friend struct FBuildStats;
	friend class Function;
	friend class JobQueue;
	friend class JobQueueRemote;
	friend class NodeGraph;
	friend class Report;
	friend class WorkerThread;

	inline const Dependencies & GetPreBuildDependencies() const { return m_PreBuildDependencies; }
	inline const Dependencies & GetStaticDependencies() const { return m_StaticDependencies; }
	inline const Dependencies & GetDynamicDependencies() const { return m_DynamicDependencies; }

	void SetName( const AString & name );

	void ReplaceDummyName( const AString & newName );

	virtual void Save( IOStream & stream ) const = 0;
	virtual void SaveRemote( IOStream & stream ) const;

	inline uint32_t GetControlFlags() const { return m_ControlFlags; }

	inline void SetState( State state ) { m_State = state; }

	inline void SetIndex( uint32_t index ) { m_Index = index; }

	
	virtual bool DoDynamicDependencies( bool forceClean );
	virtual bool DetermineNeedToBuild( bool forceClean ) const;
	virtual BuildResult DoBuild( Job * job );
	virtual BuildResult DoBuild2( Job * job, bool racingRemoteJob );
	virtual bool Finalize();

	inline void		SetLastBuildTime( uint32_t ms ) { m_LastBuildTimeMs = ms; }
	inline void		AddProcessingTime( uint32_t ms ){ m_ProcessingTime += ms; }

	void SaveNode( IOStream & stream, const Node * node ) const;
	static bool LoadNode( IOStream & stream, Node * & node );
	static bool LoadNode( IOStream & stream, CompilerNode * & compilerNode );
	static bool LoadNode( IOStream & stream, FileNode * & node );

	static void FixupPathForVSIntegration( AString & line );
	static void FixupPathForVSIntegration_GCC( AString & line, const char * tag );
	static void FixupPathForVSIntegration_SNC( AString & line, const char * tag );

	State m_State;
	mutable uint32_t m_BuildPassTag; 
	uint32_t		m_ControlFlags;
	mutable uint32_t		m_StatsFlags;
	uint64_t		m_Stamp;
	Type m_Type;
	Node *			m_Next; 
	uint32_t		m_NameCRC;
	uint32_t m_LastBuildTimeMs;	
	uint32_t m_ProcessingTime;	
	mutable uint32_t m_ProgressAccumulator;
	
	uint32_t		m_Index;

	Dependencies m_PreBuildDependencies;
	Dependencies m_StaticDependencies;
	Dependencies m_DynamicDependencies;

	static const char * const s_NodeTypeNames[];
};


template < class T >
inline T * Node::CastTo() const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( T::GetType() == GetType() ) ) { if ( AssertHandler::Failure( "T::GetType() == GetType()", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h", 243 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return (T *)this;
}


template <>
inline FileNode * Node::CastTo< FileNode >() const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( IsAFile() ) ) { if ( AssertHandler::Failure( "IsAFile()", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h", 251 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return (FileNode *)this;
}


#line 257 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/Node.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Error.h"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFVariable.h"


#pragma once


























class BFFVariable
{
public:
	inline const AString & GetName() const { return m_Name; }

	const AString & GetString() const { return m_StringValue; }
	const Array< AString > & GetArrayOfStrings() const { return m_ArrayValues; }
	int GetInt() const { return m_IntValue; }
	bool GetBool() const { return m_BoolValue; }
	const Array< const BFFVariable * > & GetStructMembers() const { union { const Array< BFFVariable * > * normal; const Array< const BFFVariable * > * constified; }; normal = &m_StructMembers; return *constified;; }
	const Array< const BFFVariable * > & GetArrayOfStructs() const { union { const Array< BFFVariable * > * normal; const Array< const BFFVariable * > * constified; }; normal = &m_ArrayOfStructs; return *constified;; }

	enum VarType
	{
		VAR_ANY		= 0, 
		VAR_STRING	= 1,
		VAR_BOOL	= 2,
		VAR_ARRAY_OF_STRINGS = 3,
		VAR_INT		= 4,
		VAR_STRUCT	= 5,
		VAR_ARRAY_OF_STRUCTS = 6,
		MAX_VAR_TYPES	 
	};

	inline VarType GetType() const	{ return m_Type; }
	inline static const char * GetTypeName( VarType t ) { return s_TypeNames[ (uint32_t)t ]; }

	inline bool IsString() const	{ return m_Type == BFFVariable::VAR_STRING; }
	inline bool IsBool() const		{ return m_Type == BFFVariable::VAR_BOOL; }
	inline bool IsArrayOfStrings() const	{ return m_Type == BFFVariable::VAR_ARRAY_OF_STRINGS; }
	inline bool IsInt() const		{ return m_Type == BFFVariable::VAR_INT; }
	inline bool IsStruct() const	{ return m_Type == BFFVariable::VAR_STRUCT; }
	inline bool IsArrayOfStructs() const { return m_Type == BFFVariable::VAR_ARRAY_OF_STRUCTS; }

private:
	friend class BFFStackFrame;

	explicit BFFVariable( const BFFVariable & other );

	explicit BFFVariable( const AString & name, const AString & value );
	explicit BFFVariable( const AString & name, bool value );
	explicit BFFVariable( const AString & name, const Array< AString > & values );
	explicit BFFVariable( const AString & name, int i );
	explicit BFFVariable( const AString & name, const Array< const BFFVariable * > & values );
	explicit BFFVariable( const AString & name, const Array< const BFFVariable * > & structs, VarType type ); 
	~BFFVariable();

	void SetValueString( const AString & value );
	void SetValueBool( bool value );
	void SetValueArrayOfStrings( const Array< AString > & values );
	void SetValueInt( int i );
	void SetValueStruct( const Array< const BFFVariable * > & members );
	void SetValueArrayOfStructs( const Array< const BFFVariable * > & values );

	AString m_Name;

	
	VarType				m_Type;
	AString				m_StringValue;
	bool				m_BoolValue;
	Array< AString >	m_ArrayValues;
	int					m_IntValue;
	Array< BFFVariable * > m_StructMembers;
	Array< BFFVariable * > m_ArrayOfStructs;

	static const char * s_TypeNames[ MAX_VAR_TYPES ];
};


#line 100 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFVariable.h"
 
#line 11 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Error.h"



class AString;
class BFFIterator;
class Function;



class Error
{
public:
	
	
	
	static void Error_1001_MissingStringStartToken( const BFFIterator & iter,
												 const Function * function );
	static void Error_1002_MatchingClosingTokenNotFound( const BFFIterator & iter,
														 const Function * function,
														 char expectedChar );
	static void Error_1003_EmptyStringNotAllowedInHeader( const BFFIterator & iter,
													   const Function * function );
	static void Error_1004_EmptyStringPropertyNotAllowed( const BFFIterator & iter,
													   const Function * function,
													   const char * propertyName );
	static void Error_1005_UnsupportedNodeType( const BFFIterator & iter,
											 const Function * function,
											 const char * propertyName,
											 const AString & nodeName,
											 Node::Type nodeType );
	static void Error_1006_NothingToBuild( const BFFIterator & iter,
										const Function * function );
	static void Error_1007_ExpectedVariable( const BFFIterator & iter,
											 const Function * function );
	static void Error_1008_VariableOfWrongType( const BFFIterator & iter,
												const Function * function,
												BFFVariable::VarType expectedType,
												BFFVariable::VarType foundType );
	static void Error_1009_UnknownVariable( const BFFIterator & iter,
										 const Function * function );
	static void Error_1010_UnknownConstruct( const BFFIterator & iter ); 
	static void Error_1011_UnnamedConcatMustFollowAssignment( const BFFIterator & iter );
	static void Error_1012_UnexpectedEndOfFile( const BFFIterator & iter );
	static void Error_1013_UnexpectedCharInVariableName( const BFFIterator & iter,
													   const Function * function );
	static void Error_1014_VariableNameIsTooLong( const BFFIterator & iter,
												uint32_t length,
												uint32_t maxLength );
	static void Error_1015_UnknownFunction( const BFFIterator & iter );
	static void Error_1016_UnexepectedCharFollowingVariableName( const BFFIterator & iter );
	static void Error_1017_UnexepectedCharInVariableValue( const BFFIterator & iter );
	static void Error_1018_IntegerValueCouldNotBeParsed( const BFFIterator & iter );
	static void Error_1020_FunctionCanOnlyBeInvokedOnce( const BFFIterator & iter,
													   const Function * function );
	static void Error_1021_UnexpectedHeaderForFunction( const BFFIterator & iter,
													  const Function * function );
	static void Error_1022_MissingFunctionHeaderCloseToken( const BFFIterator & iter,
														  const Function * function );
	static void Error_1023_FunctionRequiresAHeader( const BFFIterator & iter,
												  const Function * function );
	static void Error_1024_FunctionRequiresABody( const BFFIterator & iter,
												const Function * function );
	static void Error_1025_MissingScopeCloseToken( const BFFIterator & iter,
												   const Function * function );
	static void Error_1026_VariableNotFoundForConcatenation( const BFFIterator & iter,
														   const AString & variableName );
	static void Error_1027_CannotConcatenate( const BFFIterator & iter,
											const AString & variableName,
											BFFVariable::VarType dstType,
											BFFVariable::VarType srcType );
	static void Error_1028_MissingVariableSubstitutionEnd( const BFFIterator & iter );
	static void Error_1029_VariableForSubstitutionIsNotAString( const BFFIterator & iter,
															  const AString & variableName,
															  BFFVariable::VarType varType );
	static void Error_1030_UnknownDirective( const BFFIterator & iter,
											 const AString & directiveName );
	static void Error_1031_UnexpectedCharFollowingDirectiveName( const BFFIterator & iter,
																 const AString & directive,
																 char expectedChar ); 
	static void Error_1032_UnableToOpenInclude( const BFFIterator & iter,
												const AString & include );
	static void Error_1033_ErrorReadingInclude( const BFFIterator & iter,
												const AString & include,
												uint32_t errorCode );
	static void Error_1034_OperationNotSupported( const BFFIterator & rhsIter,
												  BFFVariable::VarType lhs,
												  BFFVariable::VarType rhs,
												  const  BFFIterator & operatorIter );
	static void Error_1035_ExcessiveDepthComplexity( const BFFIterator & iter );
	static void Error_1036_UnknownTokenInIfDirective( const BFFIterator & iter );
	static void Error_1037_EndIfWithoutIf( const BFFIterator & iter );

	
	
	static void Error_1050_PropertyMustBeOfType( const BFFIterator & iter,
											   const Function * function,
											   const char * propertyName,
											   BFFVariable::VarType foundType,
											   BFFVariable::VarType requiredType,
											   BFFVariable::VarType alternateRequiredType = BFFVariable::VAR_ANY );
	static void Error_1054_IntegerOutOfRange( const BFFIterator & iter,
											const Function * function,
											const char * propertyName,
											int rangeMin,
											int rangeMax );

	
	
	
	static void Error_1100_AlreadyDefined( const BFFIterator & iter,
										  const Function * function,
										  const AString & name );
	static void Error_1101_MissingProperty( const BFFIterator & iter,
										   const Function * function,
										   const AString & name );
	static void Error_1102_UnexpectedType( const BFFIterator & iter,
										  const Function * function,
										  const char * propertyName,
										  const AString & name,
										  Node::Type foundType,
										  Node::Type expectedType );
	static void Error_1103_NotAFile( const BFFIterator & iter,
									const Function * function,
									const char * propertyName,
									const AString & name,
									Node::Type foundType );
	static void Error_1104_TargetNotDefined( const BFFIterator & iter,
											const Function * function,
											const char * propertyName,
											const AString & name );
	static void Error_1105_PathNotAllowed( const BFFIterator & iter,
										   const Function * function,
										   const char * propertyName,
										   const AString & propertyValue );
	static void Error_1106_MissingRequiredToken( const BFFIterator & iter,
												 const Function * function,
												 const char * propertyName,
												 const char * token );

	
	
	static void Error_1200_ExpectedVar( const BFFIterator & iter,
									   const Function * function );
	static void Error_1201_MissingIn( const BFFIterator & iter,
									 const Function * function );
	static void Error_1202_ExpectedVarFollowingIn( const BFFIterator & iter,
												  const Function * function );
	static void Error_1204_LoopVariableLengthsDiffer( const BFFIterator & iter,
													 const Function * function,
													 const char * variableName,
													 uint32_t foundSize,
													 uint32_t expectedSize );

	
	
	static void Error_1300_MissingPCHArgs( const BFFIterator & iter, 
										  const Function * function );
	static void Error_1301_AlreadyDefinedPCH( const BFFIterator & iter, 
										  const Function * function,
										  const char * pch );
	static void Error_1302_MissingPCHCompilerOption( const BFFIterator & iter, 
													 const Function * function,
													 const char * option,
													 const char * property );
	static void Error_1303_PCHCreateOptionOnlyAllowedOnPCH( const BFFIterator & iter, 
															const Function * function,
															const char * option,
															const char * property );
private:
	static void FormatError( const BFFIterator & iter, 
							 uint32_t errNum,
							 const Function * function,
							 const char * message, ... );
};


#line 188 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Error.h"
#line 12 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\Function.h"



class BFFIterator;
class BFFVariable;
class Dependencies;
class DirectoryListNode;
class Meta_File;
class Meta_Path;
class Node;
class ReflectionInfo;



class Function
{
public:
	explicit	Function( const char * functionName );
	virtual		~Function();

	
	inline const AString & GetName() const { return m_Name; }

	
	static const Function * Find( const AString & name );

	static void Create();
	static void Destroy();

	
	virtual bool AcceptsHeader() const; 
	virtual bool NeedsHeader() const;	
	virtual bool NeedsBody() const;		

	
	virtual bool IsUnique() const;
	inline bool GetSeen() const { return m_Seen; }
	inline void SetSeen() const { m_Seen = true; }

	
	virtual bool ParseFunction( const BFFIterator & functionNameStart,
								const BFFIterator * functionBodyStartToken, 
								const BFFIterator * functionBodyStopToken,
								const BFFIterator * functionHeaderStartToken,
								const BFFIterator * functionHeaderStopToken ) const;

	
	virtual bool Commit( const BFFIterator & funcStartIter ) const;

	
	static void CleanFolderPaths( Array< AString > & folders );
	static void CleanFilePaths( Array< AString > & files );
	void CleanFileNames( Array< AString > & fileNames ) const;

	bool GetDirectoryListNodeList( const BFFIterator & iter,
								   const Array< AString > & paths,
								   const Array< AString > & excludePaths,
                                   const Array< AString > & filesToExclude,
								   bool recurse,
								   const AString & pattern,
								   const char * inputVarName,
								   Dependencies & nodes ) const;

	bool GetNodeList( const BFFIterator & iter, const char * name, Dependencies & nodes, bool required = false,
					  bool allowCopyDirNodes = false, bool allowUnityNodes = false ) const;

private:
	Function *	m_NextFunction;
	static Function * s_FirstFunction;

protected:
	AString		m_Name;
	mutable bool m_Seen; 

	
	
	mutable AString m_AliasForFunction;

	
	bool GetString( const BFFIterator & iter, const BFFVariable * & var, const char * name, bool required = false ) const;
	bool GetString( const BFFIterator & iter, AString & var, const char * name, bool required = false ) const;
	bool GetStringOrArrayOfStrings( const BFFIterator & iter, const BFFVariable * & var, const char * name, bool required ) const;
	bool GetBool( const BFFIterator & iter, bool & var, const char * name, bool defaultValue, bool required = false ) const;
	bool GetInt( const BFFIterator & iter, int32_t & var, const char * name, int32_t defaultValue, bool required ) const;
	bool GetInt( const BFFIterator & iter, int32_t & var, const char * name, int32_t defaultValue, bool required, int minVal, int maxVal ) const;
	bool GetStrings( const BFFIterator & iter, Array< AString > & strings, const char * name, bool required = false ) const;
	bool GetFolderPaths( const BFFIterator & iter, Array< AString > & strings, const char * name, bool required = false ) const;
	bool GetFileNode( const BFFIterator & iter, Node * & fileNode, const char * name, bool required = false ) const;

	
	bool ProcessAlias( const BFFIterator & iter, Node * nodeToAlias ) const;
	bool ProcessAlias( const BFFIterator & iter, Dependencies & nodesToAlias ) const;

	
	bool GetNameForNode( const BFFIterator & iter, const ReflectionInfo * ri, AString & name ) const;
	bool PopulateProperties( const BFFIterator & iter, Node * node ) const;
	bool PopulateArrayOfStrings( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const;
	bool PopulateString( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const;
	bool PopulateBool( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const;
	bool PopulateUInt32( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const;

	bool PopulatePathAndFileHelper( const BFFIterator & iter, const Meta_Path * pathMD, const Meta_File * fileMD, const AString & variableName, const AString & originalValue, AString & valueToFix ) const;
private:
	bool GetNodeListRecurse( const BFFIterator & iter, const char * name, Dependencies & nodes, const AString & nodeName,
							 bool allowCopyDirNodes, bool allowUnityNodes ) const;
};


#line 121 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\Function.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionAlias.h"


#pragma once









class FunctionAlias : public Function
{
public:
	explicit		FunctionAlias();
	inline virtual ~FunctionAlias() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 27 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionAlias.h"
#line 10 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCompiler.h"


#pragma once









class FunctionCompiler : public Function
{
public:
	explicit		FunctionCompiler();
	inline virtual ~FunctionCompiler() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 27 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCompiler.h"
#line 11 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCopy.h"


#pragma once












class FunctionCopy : public Function
{
public:
	explicit		FunctionCopy();
	inline virtual ~FunctionCopy() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;

	bool GetSourceNodes( const BFFIterator & iter, Node * node, Array< Node * > & nodes ) const;
};


#line 31 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCopy.h"
#line 12 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCopyDir.h"


#pragma once












class FunctionCopyDir : public Function
{
public:
	explicit		FunctionCopyDir();
	inline virtual ~FunctionCopyDir() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 29 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCopyDir.h"
#line 13 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCSAssembly.h"


#pragma once









class FunctionCSAssembly : public Function
{
public:
	explicit		FunctionCSAssembly();
	inline virtual ~FunctionCSAssembly() {}

protected:
	virtual bool AcceptsHeader() const;

	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 27 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionCSAssembly.h"
#line 14 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionDLL.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionExecutable.h"


#pragma once











class AString;
class Dependencies;
class Node;



class FunctionExecutable : public Function
{
public:
	explicit		FunctionExecutable();
	inline virtual ~FunctionExecutable() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
private:
	
	bool DependOnNode( const BFFIterator & iter, const AString & nodeName, Dependencies & nodes ) const;
	bool DependOnNode( const BFFIterator & iter, Node * node, Dependencies & nodes ) const;

	void GetImportLibName( const AString & args, AString & importLibName ) const;

	bool GetOtherLibraries( const BFFIterator & iter, const AString & args, Dependencies & otherLibraries, bool msvc ) const;
	bool GetOtherLibrary( const BFFIterator & iter, Dependencies & libs, const AString & path, const AString & lib, bool & found ) const;

	static bool GetOtherLibsArg( const char * arg, 
								 Array< AString > & list, 
								 const AString * & it, 
								 const AString * const & end, 
								 bool canonicalizePath = false );
};


#line 49 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionExecutable.h"
#line 10 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionDLL.h"



class FunctionDLL : public FunctionExecutable
{
public:
	explicit		FunctionDLL();
	inline virtual ~FunctionDLL() {}
};


#line 22 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionDLL.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionExec.h"


#pragma once









class FunctionExec : public Function
{
public:
	explicit		FunctionExec();
	inline virtual ~FunctionExec() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 26 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionExec.h"
#line 16 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionForEach.h"


#pragma once









class FunctionForEach : public Function
{
public:
	explicit		FunctionForEach();
	inline virtual ~FunctionForEach() {}

	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;
	virtual bool ParseFunction( const BFFIterator & functionNameStart,
								const BFFIterator * functionBodyStartToken, 
								const BFFIterator * functionBodyStopToken,
								const BFFIterator * functionHeaderStartToken,
								const BFFIterator * functionHeaderStopToken ) const;
};


#line 30 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionForEach.h"
#line 18 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionLibrary.h"


#pragma once






#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionObjectList.h"


#pragma once









class CompilerNode;
class Dependencies;
class ObjectNode;



class FunctionObjectList : public Function
{
public:
	explicit		FunctionObjectList();
	inline virtual ~FunctionObjectList() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;

	virtual bool Commit( const BFFIterator & funcStartIter ) const;

	
	bool	GetCompilerNode( const BFFIterator & iter, const AString & compiler, CompilerNode * & compilerNode ) const;
	bool	GetPrecompiledHeaderNode( const BFFIterator & iter,
									  CompilerNode * compilerNode,
									  uint32_t objFlags,
									  const BFFVariable * compilerOptions,
									  const Dependencies & compilerForceUsing,
									  ObjectNode * & precompiledHeaderNode,
									  bool deoptimizeWritableFiles,
									  bool deoptimizeWritableFilesWithToken ) const;
	bool 	GetInputs( const BFFIterator & iter, Dependencies & inputs ) const;
};


#line 46 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionObjectList.h"
#line 11 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionLibrary.h"



class FunctionLibrary : public FunctionObjectList
{
public:
	explicit		FunctionLibrary();
	inline virtual ~FunctionLibrary() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;

	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 29 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionLibrary.h"
#line 19 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionPrint.h"


#pragma once









class FunctionPrint : public Function
{
public:
	explicit		FunctionPrint();
	inline virtual ~FunctionPrint() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;
	virtual bool NeedsBody() const;

	virtual bool ParseFunction( const BFFIterator & functionNameStart,
								const BFFIterator * functionBodyStartToken, 
								const BFFIterator * functionBodyStopToken,
								const BFFIterator * functionHeaderStartToken,
								const BFFIterator * functionHeaderStopToken ) const;
};


#line 33 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionPrint.h"
#line 21 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionSettings.h"


#pragma once











class FunctionSettings : public Function
{
public:
	explicit		FunctionSettings();
	inline virtual ~FunctionSettings() {}

	static inline void SetCachePath( const AString & cachePath ) { s_CachePath = cachePath; }
	static inline const AString & GetCachePath() { return s_CachePath; }

protected:
	virtual bool IsUnique() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;

private:
	void ProcessEnvironment( const Array< AString > & envStrings ) const;

	static AString s_CachePath;
};


#line 36 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionSettings.h"
#line 22 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionTest.h"


#pragma once









class FunctionTest : public Function
{
public:
	explicit		FunctionTest();
	inline virtual ~FunctionTest() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 26 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionTest.h"
#line 23 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionUnity.h"


#pragma once





class UnityNode;





class FunctionUnity : public Function
{
public:
	explicit		FunctionUnity();
	inline virtual ~FunctionUnity() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;

	virtual bool Commit( const BFFIterator & funcStartIter ) const;
};


#line 30 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionUnity.h"
#line 24 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionUsing.h"


#pragma once









class FunctionUsing : public Function
{
public:
	explicit		FunctionUsing();
	inline virtual ~FunctionUsing() {}

protected:
	virtual bool AcceptsHeader() const;
	virtual bool NeedsHeader() const;
	virtual bool NeedsBody() const;

	virtual bool ParseFunction( const BFFIterator & functionNameStart,
								const BFFIterator * functionBodyStartToken, 
								const BFFIterator * functionBodyStopToken,
								const BFFIterator * functionHeaderStartToken,
								const BFFIterator * functionHeaderStopToken ) const;
};


#line 33 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionUsing.h"
#line 25 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionVCXProject.h"


#pragma once









class BFFIterator;



class FunctionVCXProject : public Function
{
public:
	explicit		FunctionVCXProject();
	inline virtual ~FunctionVCXProject() {}

protected:
	virtual bool AcceptsHeader() const;

	virtual bool Commit( const BFFIterator & funcStartIter ) const;

	bool GetStringFromStruct( const BFFVariable * s, const char * name, AString & result ) const;
};


#line 33 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\bff\\functions\\FunctionVCXProject.h"
#line 26 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h"


#pragma once














class BFFIterator
{
public:
	inline BFFIterator()
		: m_Pos( nullptr )
		, m_MinPos( nullptr )
		, m_MaxPos( nullptr )
		
		, m_FileTimeStamp( 0 ) {}
	inline BFFIterator( const char * pos, uint32_t dataSize, const char * fileName, uint64_t fileTimeStamp ) 
			: m_Pos( pos ) 
			, m_MinPos( pos )
			, m_MaxPos( pos + dataSize )
			, m_FileName( fileName )
			, m_FileTimeStamp( fileTimeStamp ) {}
	inline ~BFFIterator() {}

	void operator = ( const BFFIterator & iter );

	void operator ++ (int) { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Pos < m_MaxPos ) ) { if ( AssertHandler::Failure( "m_Pos < m_MaxPos", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h", 37 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); m_Pos++; }
	inline bool operator < ( const BFFIterator & other ) const { return ( m_Pos < other.m_Pos ); }
	inline bool operator > ( const BFFIterator & other ) const { return ( m_Pos > other.m_Pos ); }
	char operator *() const { return *m_Pos; }
	void SkipWhiteSpace();
	void SkipComment();
	void SkipString( char quote );
	void SkipWhiteSpaceAndComments();
	void SkipVariableName();
	void SkipFunctionName();
	void SkipDirectiveName();
	bool ParseToNext( char c );
	bool ParseToMatchingBrace( char openBrace, char closeBrace );

	inline size_t GetDistTo( const BFFIterator & other ) const { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( other.m_Pos >= m_Pos ) ) { if ( AssertHandler::Failure( "other.m_Pos >= m_Pos", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h", 51 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return (size_t)( other.m_Pos - m_Pos ); }

	
	inline const char * GetCurrent() const { return m_Pos; }
	inline void SetMax( const char * max )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( max >= m_Pos ) ) { if ( AssertHandler::Failure( "max >= m_Pos", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h", 57 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( max > m_MinPos ) ) { if ( AssertHandler::Failure( "max > m_MinPos", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h", 58 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		m_MaxPos = max;
	}

	bool IsAtComment() const;
	bool IsAtWhitespace() const;
	bool IsAtValidVariableNameCharacter() const;
	bool IsAtValidFunctionNameCharacter() const;
	bool IsAtValidDirectiveNameCharacter() const;
	inline bool IsAtEnd() const { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Pos <= m_MaxPos ) ) { if ( AssertHandler::Failure( "m_Pos <= m_MaxPos", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h", 67 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return ( m_Pos == m_MaxPos ); }

	inline const AString & GetFileName() const { return m_FileName; }
	inline uint64_t GetFileTimeStamp() const { return m_FileTimeStamp; }
private:
	
	
	friend class Error;
	void GetPosInfo( uint32_t & line,
					 uint32_t & column,
					 const char * & lineStart ) const;

	const char * m_Pos;
	const char * m_MinPos; 
	const char * m_MaxPos; 
	AString		 m_FileName; 
	uint64_t	 m_FileTimeStamp;
};


#line 88 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFIterator.h"
 
#line 28 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFParser.h"


#pragma once













class FileStream;



class BFFParser
{
public:
	explicit BFFParser();
	~BFFParser();

	
	
	
	bool Parse( const char * dataWithSentinel, 
			    uint32_t sizeExcludingSentinel,
				const char * fileName,
				uint64_t fileTimeStamp,
				bool pushStackFrame = true );
	bool Parse( BFFIterator & iterator );

	enum { BFF_COMMENT_SEMICOLON = ';' };
	enum { BFF_COMMENT_SLASH = '/' };
	enum { BFF_DECLARE_VAR_INTERNAL = '.' };
	enum { BFF_VARIABLE_ASSIGNMENT = '=' };
	enum { BFF_VARIABLE_CONCATENATION = '+' };
	enum { BFF_START_ARRAY = '{' };
	enum { BFF_END_ARRAY = '}' };
	enum { BFF_FUNCTION_ARGS_OPEN = '(' };
	enum { BFF_FUNCTION_ARGS_CLOSE = ')' };
	enum { BFF_SCOPE_OPEN = '{' };
	enum { BFF_SCOPE_CLOSE = '}' };
	enum { BFF_STRUCT_OPEN = '[' };
	enum { BFF_STRUCT_CLOSE = ']' };
	enum { BFF_PREPROCESSOR_START = '#' };

	enum { MAX_VARIABLE_NAME_LENGTH = 64 };
	enum { MAX_FUNCTION_NAME_LENGTH = 64 };
	enum { MAX_DIRECTIVE_NAME_LENGTH = 64 };

	static bool PerformVariableSubstitutions( const BFFIterator & startIter, const BFFIterator & endIter, AString & value );

private:
	bool ParseUnnamedVariableConcatenation( BFFIterator & iter );
	bool ParseNamedVariableDeclaration( BFFIterator & parseIndex );
	bool ParseVariableDeclaration( BFFIterator & iter, const BFFIterator & varNameStart,
													   const BFFIterator & varNameEnd );
	bool ParseFunction( BFFIterator & parseIndex );
	bool ParseUnnamedScope( BFFIterator & iter );
	bool ParsePreprocessorDirective( BFFIterator & iter );
	bool ParseIncludeDirective( BFFIterator & iter );
	bool ParseIfDirective( const BFFIterator & directiveStart, BFFIterator & iter );
	bool ParseEndIfDirective( const BFFIterator & directiveStart );
	bool CheckIfCondition( const BFFIterator & conditionStart, const BFFIterator & conditionEnd, bool & result );

	bool StoreVariableString( const char * varNameStart, const char * varNameEnd, const BFFIterator & valueStart, const BFFIterator & valueEnd, const BFFIterator & operatorIter );
	bool StoreVariableArray( const char * varNameStart, const char * varNameEnd, const BFFIterator & valueStart, const BFFIterator & valueEnd, const BFFIterator & operatorIter );
	bool StoreVariableStruct( const char * varNameStart, const char * varNameEnd, const BFFIterator & valueStart, const BFFIterator & valueEnd, const BFFIterator & operatorIter );
	bool StoreVariableBool( const char * varNameStart, const char * varNameEnd, bool value );
	bool StoreVariableInt( const char * varNameStart, const char * varNameEnd, int value );
	bool StoreVariableToVariable( const char * varNameDstStart, const char * varNameDstEnd,
						  		  const BFFIterator & varNameSrcStart, const BFFIterator & varNameSrcEnd,
								  const BFFIterator & operatorIter );
	
	bool m_SeenAVariable;
	BFFIterator m_LastVarNameStart;
	BFFIterator m_LastVarNameEnd;

	
	static uint32_t s_Depth;

	
	static uint32_t s_IfDepth;
};


#line 93 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFParser.h"
 
#line 29 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFStackFrame.h"


#pragma once










class AString;



class BFFStackFrame
{
public:
	explicit BFFStackFrame();
	~BFFStackFrame();

	
	static void SetVarString( const AString & name,
							  const AString & value,
							  BFFStackFrame * frame = nullptr );
	static void SetVarArrayOfStrings( const AString & name,
									  const Array< AString > & values,
									  BFFStackFrame * frame = nullptr );
	static void SetVarBool( const AString & name,
							bool value,
							BFFStackFrame * frame = nullptr );
	static void SetVarInt( const AString & name,
						   int value,
						   BFFStackFrame * frame = nullptr );
	static void SetVarStruct( const AString & name,
							  const Array< const BFFVariable * > & members,
							  BFFStackFrame * frame = nullptr );
	static void SetVarArrayOfStructs( const AString & name,
									  const Array< const BFFVariable * > & structs,
									  BFFStackFrame * frame = nullptr );

	
	static void SetVar( const BFFVariable * var, BFFStackFrame * frame = nullptr );

	
	static const BFFVariable * GetVar( const char * name );
	static const BFFVariable * GetVar( const AString & name );

	
	static const BFFVariable * GetVarAny( const AString & name );

	
	const Array< const BFFVariable * > & GetLocalVariables() const { union { const Array< BFFVariable * > * normal; const Array< const BFFVariable * > * constified; }; normal = &m_Variables; return *constified;; }

	static BFFStackFrame * GetCurrent() { return s_StackHead; }

	BFFStackFrame * GetParent() const { return m_Next; }

private:
	
	const BFFVariable * GetVariableRecurse( const AString & name ) const;

	const BFFVariable * GetVariableRecurse( const AString & nameOnly, 
									  BFFVariable::VarType type ) const;
	BFFVariable * GetVarMutableNoRecurse( const AString & name );

	
	Array< BFFVariable * > m_Variables;

	
	BFFStackFrame * m_Next;

	
	static BFFStackFrame * s_StackHead; 
};


#line 81 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/BFF/BFFStackFrame.h"
 
#line 30 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildOptions.h"


#pragma once










struct FBuildOptions
{
public:
	FBuildOptions();

	void SetWorkingDir( const AString & path );
	inline const AString & GetWorkingDir() const { return m_WorkingDir; }

	bool m_ForceCleanBuild;
	bool m_UseCacheRead;
	bool m_UseCacheWrite;
	bool m_ShowInfo;
	bool m_ShowCommandLines;
	bool m_ShowErrors;
	bool m_ShowProgress;
	bool m_AllowDistributed;
	bool m_ShowSummary;
	bool m_ShowBuildTime;
	bool m_SaveDBOnCompletion;
	bool m_GenerateReport;
	bool m_NoLocalConsumptionOfRemoteJobs;
	bool m_AllowLocalRace;
	bool m_WrapperChild;
	bool m_FixupErrorPaths;
	bool m_StopOnFirstError;
	uint32_t m_NumWorkerThreads;
	AString m_ConfigFile;

    inline uint32_t GetWorkingDirHash() const					{ return m_WorkingDirHash; }
    inline const AString & GetMainProcessMutexName() const		{ return m_ProcessMutexName; }
    inline const AString & GetFinalProcessMutexName( ) const	{ return m_FinalProcessMutexName; }
    inline const AString & GetSharedMemoryName() const			{ return m_SharedMemoryName; }

private:
	AString m_WorkingDir;

    uint32_t m_WorkingDirHash;
    AString m_ProcessMutexName;
    AString m_FinalProcessMutexName;
    AString m_SharedMemoryName;
};


#line 58 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildOptions.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\Helpers/FBuildStats.h"


#pragma once










class Dependencies;
class Node;



struct FBuildStats
{
public:
	FBuildStats();

	void OnBuildStop( Node * node );

	

	
	uint32_t	m_NodeTimeTotalms;
	uint32_t	m_NodeTimeProgressms;

	
	float		m_TotalBuildTime;		
	uint32_t	m_TotalLocalCPUTimeMS;	
	uint32_t	m_TotalRemoteCPUTimeMS;	

	
	void GatherPostBuildStatistics( Node * node );

	void OutputSummary() const;

	
	uint32_t GetNodesProcessed() const	{ return m_Totals.m_NumProcessed; }
	uint32_t GetNodesBuilt() const		{ return m_Totals.m_NumBuilt; }
	uint32_t GetCacheHits() const		{ return m_Totals.m_NumCacheHits; }
	uint32_t GetCacheMisses() const		{ return m_Totals.m_NumCacheMisses; }
	uint32_t GetCacheStores() const		{ return m_Totals.m_NumCacheStores; }

	
	struct Stats;
	const Stats & GetStatsFor( Node::Type nodeType ) const { return m_PerTypeStats[ (size_t)nodeType ]; }

	
	struct Stats
	{
		Stats();

		uint32_t m_NumProcessed;
		uint32_t m_NumBuilt;
		uint32_t m_NumCacheHits;
		uint32_t m_NumCacheMisses;
		uint32_t m_NumCacheStores;

		uint32_t m_ProcessingTimeMS;
	};

	void FormatTime( float timeInSeconds , AString & buffer  ) const;

	const Node * GetRootNode() const { return m_RootNode; }
	const Array< const Node * > & GetNodesByTime() const { return m_NodesByTime; }

private:
	void GatherPostBuildStatisticsRecurse( Node * node );
	void GatherPostBuildStatisticsRecurse( const Dependencies & dependencies );

	Node * m_RootNode;
	Array< const Node * > m_NodesByTime;

	Stats m_PerTypeStats[ Node::NUM_NODE_TYPES ];
	Stats m_Totals;
};


#line 85 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\Helpers/FBuildStats.h"
#line 12 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"
#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\WorkerPool/WorkerBrokerage.h"


#pragma once












class WorkerBrokerage
{
public:
	WorkerBrokerage();
	~WorkerBrokerage();

	
	void FindWorkers( Array< AString > & workerList );

	
	void SetAvailability( bool available );
private:
	AString				m_BrokerageRoot;
	bool				m_Availability;
};


#line 34 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\WorkerPool/WorkerBrokerage.h"
#line 13 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"


#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Singleton.h"


#pragma once









template < class T >
class Singleton
{
public:
	static T & Get();
	static inline bool IsValid() { return ( s_Instance != nullptr ); }

protected:
	Singleton();
	~Singleton();

private:
	static T * s_Instance;
};



template < class T >
T * Singleton< T >::s_Instance = nullptr;



template < class T >
Singleton< T >::Singleton()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_Instance == nullptr ) ) { if ( AssertHandler::Failure( "s_Instance == nullptr", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Singleton.h", 38 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	s_Instance = static_cast< T * >( this );
}



template < class T >
Singleton< T >::~Singleton()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_Instance == this ) ) { if ( AssertHandler::Failure( "s_Instance == this", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Singleton.h", 47 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	s_Instance = nullptr;
}



template < class T >
T & Singleton< T >::Get()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_Instance ) ) { if ( AssertHandler::Failure( "s_Instance", "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Singleton.h", 56 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
__pragma(warning(push)) __pragma(warning(disable:6011)) 
	return *s_Instance;
__pragma(warning(pop))
}


#line 64 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/Singleton.h"
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Time/Timer.h"


#pragma once









class Timer
{
public:
	Timer() { Start(); }
	inline ~Timer() {}

	inline void Start() { m_StartTime = GetNow(); }
	inline void Start( float time ) { m_StartTime = GetNow() - (int64_t)( (double)GetFrequency() * (double)time ); }

	float GetElapsed() const
	{
		int64_t now = GetNow();
		return ( (float)( now - m_StartTime ) * GetFrequencyInvFloat() );
	}

	float GetElapsedMS() const
	{
		int64_t now = GetNow();
		return ( (float)( now - m_StartTime ) * GetFrequencyInvFloatMS() );
	}

	static int64_t GetNow();
	static inline int64_t GetFrequency() { return s_Frequency; }
	static inline float GetFrequencyInvFloat() { return s_FrequencyInvFloat; }
	static inline float GetFrequencyInvFloatMS() { return s_FrequencyInvFloatMS; }

private:
	int64_t m_StartTime;

	
	friend class GlobalTimerFrequencyInitializer;
	static int64_t s_Frequency;
	static float s_FrequencyInvFloat;
	static float s_FrequencyInvFloatMS;
};


#line 51 "c:\\Users\\Franta\\p4\\Code\\Core/Time/Timer.h"
#line 18 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"



class Client;
class FileStream;
class ICache;
class JobQueue;
class Node;
class NodeGraph;



class FBuild : public Singleton< FBuild >
{
public:
	explicit FBuild( const FBuildOptions & options = FBuildOptions() );
	~FBuild();

	
	
	bool Initialize( const char * nodeGraphDBFile = nullptr );

	
	bool Build( const AString & target );
	bool Build( const Array< AString > & targets );
	bool Build( Node * nodeToBuild );

	
	bool SaveDependencyGraph( const char * nodeGraphDBFile = nullptr ) const;

	const FBuildOptions & GetOptions() const { return m_Options; }
	NodeGraph & GetDependencyGraph() const { return *m_DependencyGraph; }
	
	const AString & GetWorkingDir() const { return m_Options.GetWorkingDir(); }

	static const char * GetDependencyGraphFileName();
	static const char * GetDefaultBFFFileName();

	const AString & GetCachePath() const { return m_CachePath; }
	void SetCachePath( const AString & path );

	const AString & GetCachePluginDLL() const { return m_CachePluginDLL; }
	void SetCachePluginDLL( const AString & plugin ) { m_CachePluginDLL = plugin; }

	void GetCacheFileName( uint64_t keyA, uint32_t keyB, uint64_t keyC,
						   AString & path ) const;

	void SetWorkerList( const Array< AString > & workers )		{ m_WorkerList = workers; }
	const Array< AString > & GetWorkerList() const { return m_WorkerList; }

	void SetEnvironmentString( const char * envString, uint32_t size, const AString & libEnvVar );
	inline const char * GetEnvironmentString() const			{ return m_EnvironmentString; }
	inline uint32_t		GetEnvironmentStringSize() const		{ return m_EnvironmentStringSize; }

	void GetLibEnvVar( AString & libEnvVar ) const;

	
	const FBuildStats & GetStats() const	{ return m_BuildStats; }
	
	FBuildStats & GetStatsMutable()			{ return m_BuildStats; }

	
	static inline void AbortBuild() { s_StopBuild = true; }
	static		  void OnBuildError();
	static inline bool GetStopBuild() { return s_StopBuild; }

	inline ICache * GetCache() const { return m_Cache; }

private:
	void UpdateBuildStatus( const Node * node, bool forceUpdate );

	static bool s_StopBuild;

	NodeGraph * m_DependencyGraph;
	JobQueue * m_JobQueue;
	Client * m_Client; 

	AString m_CachePluginDLL;
	AString m_CachePath;
	ICache * m_Cache;

	Timer m_Timer;
	float m_LastProgressOutputTime;
	float m_LastProgressCalcTime;
	float m_SmoothedProgressCurrent;
	float m_SmoothedProgressTarget;

	FBuildStats m_BuildStats;

	FBuildOptions m_Options;

	WorkerBrokerage m_WorkerBrokerage;

	Array< AString > m_WorkerList;

	AString m_OldWorkingDir;

	
	char *		m_EnvironmentString;
	uint32_t	m_EnvironmentStringSize; 
	AString		m_LibEnvVar; 
};


#line 123 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuild.h"
#line 32 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/AliasNode.h"


#pragma once













class AliasNode : public Node
{
public:
	explicit AliasNode( const AString & groupName,
						const Dependencies & targets );
	virtual ~AliasNode();

	static inline Node::Type GetType() { return Node::ALIAS_NODE; }

	virtual bool IsAFile() const { return false; }

	inline const Dependencies & GetAliasedNodes() const { return m_StaticDependencies; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;
private:
	virtual bool DetermineNeedToBuild( bool forceClean ) const;
	virtual BuildResult DoBuild( Job * job );
};


#line 39 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/AliasNode.h"
#line 33 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DirectoryListNode.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\FileNode.h"


#pragma once









class FileNode : public Node
{
public:
	explicit FileNode( const AString & fileName, uint32_t controlFlags = Node::FLAG_TRIVIAL_BUILD );
	virtual ~FileNode();

	static inline Node::Type GetType() { return Node::FILE_NODE; }

	virtual bool IsAFile() const { return true; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;
protected:
	virtual BuildResult DoBuild( Job * job );

	friend class Client;
};


#line 33 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\FileNode.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DirectoryListNode.h"






class DirectoryListNode : public Node
{
public:
	explicit DirectoryListNode( const AString & name,
								const AString & path,
								const AString & wildcard,
								bool recursive,
								const Array< AString > & excludePaths,
                                const Array< AString > & filesToExclude );
	virtual ~DirectoryListNode();

	const AString & GetPath() const { return m_Path; }
	const Array< FileIO::FileInfo > & GetFiles() const { return m_Files; }

	static inline Node::Type GetType() { return Node::DIRECTORY_LIST_NODE; }

	virtual bool IsAFile() const { return false; }

	static void FormatName( const AString & path,
							const AString & pattern,
							bool recursive,
							const Array< AString > & excludePaths,
                            const Array< AString > & excludeFiles,
							AString & result );

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

private:
	virtual BuildResult DoBuild( Job * job );

	AString m_Path;
	AString m_WildCard;
	Array< AString > m_ExcludePaths;
    Array< AString > m_FilesToExclude;
	bool m_Recursive;

	Array< FileIO::FileInfo > m_Files;
};


#line 58 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DirectoryListNode.h"
#line 34 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/NodeGraph.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/VSProjectGenerator.h"


#pragma once










class IOStream;



class VSProjectConfig
{
public:
	AString m_Platform;
	AString m_Config;

	AString m_BuildCommand;
	AString m_RebuildCommand;
	AString m_CleanCommand;
	AString m_Output;
	AString m_PreprocessorDefinitions;
	AString m_IncludeSearchPath;
	AString m_ForcedIncludes;
	AString m_AssemblySearchPath;
	AString m_ForcedUsingAssemblies;
	AString m_AdditionalOptions;
	AString m_OutputDirectory;
	AString m_IntermediateDirectory;
	AString m_LayoutDir;
	AString m_LayoutExtensionFilter;
	AString m_Xbox360DebuggerCommand;
	AString m_DebuggerFlavor;
	AString m_AumidOverride;
	AString m_PlatformToolset;
	AString m_DeploymentType;
	AString m_DeploymentFiles;

	AString m_LocalDebuggerCommandArguments;
	AString m_LocalDebuggerWorkingDirectory;
	AString m_LocalDebuggerCommand;
	AString m_LocalDebuggerEnvironment;

	static bool Load( IOStream & stream, Array< VSProjectConfig > & configs );
	static void Save( IOStream & stream, const Array< VSProjectConfig > & configs );
};



class VSProjectFileType
{
public:
	AString m_FileType;	
	AString m_Pattern;	

	static bool Load( IOStream & stream, Array< VSProjectFileType > & fileTypes );
	static void Save( IOStream & stream, const Array< VSProjectFileType > & fileTypes );
};



class VSProjectGenerator
{
public:
	VSProjectGenerator();
	~VSProjectGenerator();

	void SetProjectName( const AString & name ) { m_ProjectName = name; }
	void SetBasePaths( const Array< AString > & paths );
	void SetAllowedFileExtensions( Array< AString > & extensions ) { m_AllowedFileExtensions = extensions; }

	void AddFile( const AString & file, bool filterByExtension = true );
	void AddFiles( const Array< AString > & files, bool filterByExtension = true );

	void SetRootNamespace( const AString & s )			{ m_RootNamespace = s; }
	void SetProjectGuid( const AString & s )			{ m_ProjectGuid = s; }
	void SetDefaultLanguage( const AString & s )		{ m_DefaultLanguage = s; }
	void SetApplicationEnvironment( const AString & s ) { m_ApplicationEnvironment = s; }
	void SetReferences( const Array< AString > & a )	{ m_References = a; }
	void SetProjectReferences( const Array< AString > & a )	{ m_ProjectReferences = a; }

	const AString & GenerateVCXProj( const AString & projectFile,
									 const Array< VSProjectConfig > & configs,
									 const Array< VSProjectFileType > & fileTypes );
	const AString & GenerateVCXProjFilters( const AString & projectFile );

private:
	
	void Write( const char * fmtString, ... );

	
	void WritePGItem( const char * xmlTag, const AString & value );

	void GetFolderPath( const AString & fileName, AString & folder ) const;

	
	AString m_ProjectName;
	Array< AString > m_BasePaths;
	Array< AString > m_AllowedFileExtensions;

	
	AString m_RootNamespace;
	AString m_ProjectGuid;
	AString m_DefaultLanguage;
	AString m_ApplicationEnvironment;
	Array< AString > m_References;
	Array< AString > m_ProjectReferences;

	
	Array< AString > m_Files;

	
	AString m_Tmp;

	
	AString m_OutputVCXProj;
	AString m_OutputVCXProjFilters;
};


#line 128 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/VSProjectGenerator.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/NodeGraph.h"







class AliasNode;
class AString;
class CompilerNode;
class CopyDirNode;
class CopyNode;
class CSNode;
class Dependencies;
class DirectoryListNode;
class DLLNode;
class ExeNode;
class ExecNode;
class FileNode;
class IOStream;
class LibraryNode;
class LinkerNode;
class Node;
class ObjectListNode;
class ObjectNode;
class TestNode;
class UnityNode;
class VCXProjectNode;



class NodeGraphHeader
{
public:
	inline explicit NodeGraphHeader()
	{
		m_Identifier[ 0 ] = 'N';
		m_Identifier[ 1 ] = 'G';
		m_Identifier[ 2 ] = 'D';
		m_Version = NODE_GRAPH_CURRENT_VERSION;
	}
	inline ~NodeGraphHeader() {}

	enum { NODE_GRAPH_CURRENT_VERSION = 55 };

	bool IsValid() const
	{
		return ( ( m_Identifier[ 0 ] == 'N' ) &&
				 ( m_Identifier[ 1 ] == 'G' ) &&
				 ( m_Identifier[ 2 ] == 'D' ) );
	}
	bool IsCompatibleVersion() const { return m_Version == NODE_GRAPH_CURRENT_VERSION; }
private:
	char		m_Identifier[ 3 ];
	uint8_t		m_Version;
};



class NodeGraph
{
public:
	explicit NodeGraph();
	~NodeGraph();

	bool Initialize( const char * bffFile, const char * nodeGraphDBFile );

	bool Load( const char * nodeGraphDBFile, bool & needReparsing );
	bool Load( IOStream & stream, bool & needReparsing );
	void Save( IOStream & stream ) const;

	
	Node * FindNode( const AString & nodeName ) const;
	Node * GetNodeByIndex( uint32_t index ) const;

	
	CopyNode * CreateCopyNode( const AString & dstFileName, 
							   Node * sourceFile,
							   const Dependencies & preBuildDependencies );
	CopyDirNode * CreateCopyDirNode( const AString & nodeName, 
									 Dependencies & staticDeps,
									 const AString & destPath,
									 const Dependencies & preBuildDependencies );
	ExecNode * CreateExecNode( const AString & dstFileName, 
							   FileNode * sourceFile, 
							   FileNode * executable, 
							   const AString & arguments, 
							   const AString & workingDir,
							   int32_t expectedReturnCode,
							   const Dependencies & preBuildDependencies );
	FileNode * CreateFileNode( const AString & fileName, bool cleanPath = true );
	DirectoryListNode * CreateDirectoryListNode( const AString & name,
												 const AString & path,
												 const AString & wildCard,
												 bool recursive,
                                                 const Array< AString > & excludePaths,
                                                 const Array< AString > & filesToExclude
                                                 );
	LibraryNode *	CreateLibraryNode( const AString & libraryName,
									   const Dependencies & inputNodes,
									   CompilerNode * compilerNode,
									   const AString & compilerArgs,
									   const AString & compilerArgsDeoptimized,
									   const AString & compilerOutputPath,
									   const AString & linker,
									   const AString & linkerArgs,
									   uint32_t flags,
									   ObjectNode * precompiledHeader,
									   const Dependencies & compilerForceUsing,
									   const Dependencies & preBuildDependencies,
									   const Dependencies & additionalInputs,
									   bool deoptimizeWritableFiles,
									   bool deoptimizeWritableFilesWithToken );
	ObjectNode *	CreateObjectNode( const AString & objectName,
									  Node * inputNode,
									  Node * compilerNode,
									  const AString & compilerArgs,
									  const AString & compilerArgsDeoptimized,
									  Node * precompiledHeader,
									  uint32_t flags,
									  const Dependencies & compilerForceUsing,
									  bool deoptimizeWritableFiles,
									  bool deoptimizeWritableFilesWithToken );
	AliasNode *		CreateAliasNode( const AString & aliasName,
									 const Dependencies & targets );
	DLLNode *		CreateDLLNode( const AString & linkerOutputName,
								   const Dependencies & inputLibraries,
								   const Dependencies & otherLibraries,
								   const AString & linker,
								   const AString & linkerArgs,
								   uint32_t flags,
								   const Dependencies & assemblyResources,
								   const AString & importLibName,
								   Node * linkerStampExe,
								   const AString & linkerStampExeArgs );
	ExeNode *		CreateExeNode( const AString & linkerOutputName,
								   const Dependencies & inputLibraries,
								   const Dependencies & otherLibraries,
								   const AString & linker,
								   const AString & linkerArgs,
								   uint32_t flags,
								   const Dependencies & assemblyResources,
								   Node * linkerStampExe,
								   const AString & linkerStampExeArgs );
	UnityNode *	CreateUnityNode( const AString & unityName );
	CSNode * CreateCSNode( const AString & compilerOutput,
						   const Dependencies & inputNodes,
						   const AString & compiler,
						   const AString & compilerOptions,
						   const Dependencies & extraRefs );
	TestNode * CreateTestNode( const AString & testOutput,
							   FileNode * testExecutable,
							   const AString & arguments,
							   const AString & workingDir );
	CompilerNode * CreateCompilerNode( const AString & executable,
									   const Dependencies & extraFiles,
									   bool allowDistribution );
	CompilerNode * CreateCompilerNode( const AString & executable );
	VCXProjectNode * CreateVCXProjectNode( const AString & projectOutput,
										   const Array< AString > & projectBasePaths,
										   const Dependencies & paths,
										   const Array< AString > & pathsToExclude,
										   const Array< AString > & allowedFileExtensions,
										   const Array< AString > & files,
										   const Array< AString > & filesToExclude,
										   const AString & rootNamespace,
										   const AString & projectGuid,
										   const AString & defaultLanguage,
										   const AString & applicationEnvironment,
										   const Array< VSProjectConfig > & configs,
										   const Array< VSProjectFileType > & fileTypes,
										   const Array< AString > & references,
										   const Array< AString > & projectReferences );
	ObjectListNode * CreateObjectListNode( const AString & listName,
							 const Dependencies & inputNodes,
							 CompilerNode * compiler,
							 const AString & compilerArgs,
							 const AString & compilerArgsDeoptimized,
							 const AString & compilerOutputPath,
							 ObjectNode * precompiledHeader,
							 const Dependencies & compilerForceUsing,
							 const Dependencies & preBuildDependencies,
							 bool deoptimizeWritableFiles,
							 bool deoptimizeWritableFilesWithToken );

	void DoBuildPass( Node * nodeToBuild );

	static void CleanPath( const AString & name, AString & fullPath );

	
	void AddUsedFile( const AString & fileName, uint64_t timeStamp );
	bool IsOneUseFile( const AString & fileName ) const;
	void SetCurrentFileAsOneUse();

	static void UpdateBuildStatus( const Node * node, 
								   uint32_t & nodesBuiltTime, 
								   uint32_t & totalNodeTime );
private:
	friend class FBuild;

	void AddNode( Node * node );

	static void BuildRecurse( Node * nodeToBuild );
	static bool CheckDependencies( Node * nodeToBuild, const Dependencies & dependencies );
	static void UpdateBuildStatusRecurse( const Node * node, 
										  uint32_t & nodesBuiltTime, 
										  uint32_t & totalNodeTime );
	static void UpdateBuildStatusRecurse( const Dependencies & dependencies, 
										  uint32_t & nodesBuiltTime, 
										  uint32_t & totalNodeTime );

	Node * FindNodeInternal( const AString & fullPath ) const;

	struct UsedFile;
	bool ReadHeaderAndUsedFiles( IOStream & nodeGraphStream, Array< UsedFile > & files, bool & compatibleDB ) const;
	uint32_t GetLibEnvVarHash() const;

	
	static void SaveRecurse( IOStream & stream, Node * node, Array< bool > & savedNodeFlags );
	static void SaveRecurse( IOStream & stream, const Dependencies & dependencies, Array< bool > & savedNodeFlags );
	bool LoadNode( IOStream & stream );

	enum { NODEMAP_TABLE_SIZE = 65536 };
	Node *			m_NodeMap[ NODEMAP_TABLE_SIZE ];
	Array< Node * > m_AllNodes;
	uint32_t		m_NextNodeIndex;

	Timer m_Timer;

	
	struct UsedFile
	{
		explicit UsedFile( const AString & fileName, uint64_t timeStamp ) : m_FileName( fileName ), m_TimeStamp( timeStamp ), m_Once( false ) {}
		AString		m_FileName;
		uint64_t	m_TimeStamp;
		bool		m_Once;
	};
	Array< UsedFile > m_UsedFiles;

	static uint32_t s_BuildPassTag;
};


#line 254 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/NodeGraph.h"
#line 36 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/MetaData/Meta_Name.h"


#pragma once





#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/MetaDataInterface.h"


#pragma once










class IMetaData : public RefObject
{
    private: friend class IMetaData_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
    explicit IMetaData();
    virtual ~IMetaData();

    const IMetaData* GetNext() const { return m_Next; }
protected:
    friend IMetaData & operator + ( IMetaData & a, IMetaData & b );

    IMetaData * m_Next;
};


#line 30 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/MetaDataInterface.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/MetaData/Meta_Name.h"



class Meta_Name : public IMetaData
{
	private: friend class Meta_Name_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
    explicit Meta_Name();
	explicit Meta_Name( const char * name );
	virtual ~Meta_Name();

    inline const AString & GetName() const { return m_Name; }

protected:
    AString m_Name;
};


#line 29 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/MetaData/Meta_Name.h"
#line 37 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"


#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/PathUtils.h"


#pragma once





class AString;




	
	
	
	





#line 24 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/PathUtils.h"








class PathUtils
{
public:
	
	
	static bool IsFolderPath( const AString & path );
	static bool IsFullPath( const AString & path );
	static bool ArePathsEqual( const AString & cleanPathA, const AString & cleanPathB );
	static bool IsWildcardMatch( const char * pattern, const char * path );
    static bool PathBeginsWith( const AString & cleanPath, const AString & cleanSubPath );
    static bool PathEndsWithFile( const AString & cleanPath, const AString & fileName );

	
	
	static void EnsureTrailingSlash( AString & path );
	static void FixupFolderPath( AString & path );
	static void FixupFilePath( AString & path );
};


#line 53 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/PathUtils.h"
#line 40 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectedProperty.h"


#pragma once











class AString;
class IMetaData;
class Mat44;
class Object;
class ReflectionInfo;
class RefObject;
class Struct;
class Vec2;
class Vec3;
class Vec4;
template< class T > class Array;



class ReflectedProperty
{
public:
	ReflectedProperty( const char * name, uint32_t offset, PropertyType type, bool isArray );

	inline uint32_t GetNameCRC() const { return m_NameCRC; }
	inline PropertyType GetType() const { return (PropertyType)m_Type; }
	inline uint32_t GetOffset() const { return m_Offset; }
	size_t GetPropertySize() const;
	inline bool IsArray() const { return m_IsArray; }
	
		inline const char * GetName() const { return m_Name; }
	#line 42 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectedProperty.h"

	



	void GetProperty( const void * object, float * value ) const; void SetProperty( void * object, float value ) const;
	void GetProperty( const void * object, uint8_t * value ) const; void SetProperty( void * object, uint8_t value ) const;
	void GetProperty( const void * object, uint16_t * value ) const; void SetProperty( void * object, uint16_t value ) const;
	void GetProperty( const void * object, uint32_t * value ) const; void SetProperty( void * object, uint32_t value ) const;
	void GetProperty( const void * object, uint64_t * value ) const; void SetProperty( void * object, uint64_t value ) const;
	void GetProperty( const void * object, int8_t * value ) const; void SetProperty( void * object, int8_t value ) const;
	void GetProperty( const void * object, int16_t * value ) const; void SetProperty( void * object, int16_t value ) const;
	void GetProperty( const void * object, int32_t * value ) const; void SetProperty( void * object, int32_t value ) const;
	void GetProperty( const void * object, int64_t * value ) const; void SetProperty( void * object, int64_t value ) const;
	void GetProperty( const void * object, bool * value ) const; void SetProperty( void * object, bool value ) const;
	void GetProperty( const void * object, AString * value ) const; void SetProperty( void * object, const AString & value ) const;
	void GetProperty( const void * object, Vec2 * value ) const; void SetProperty( void * object, const Vec2 & value ) const;
	void GetProperty( const void * object, Vec3 * value ) const; void SetProperty( void * object, const Vec3 & value ) const;
	void GetProperty( const void * object, Vec4 * value ) const; void SetProperty( void * object, const Vec4 & value ) const;
	void GetProperty( const void * object, Mat44 * value ) const; void SetProperty( void * object, const Mat44 & value ) const;
	void GetProperty( const void * object, Ref< RefObject > * value ) const; void SetProperty( void * object, const Ref< RefObject > & value ) const;
	void GetProperty( const void * object, WeakRef< Object > * value ) const; void SetProperty( void * object, const WeakRef< Object > & value ) const;

	



	void GetProperty( const void * object, const Array< AString > * & value ) const; void SetProperty( void * object, const Array< AString > & value ) const;

	
	

    
        inline const char * GetTypeString() const { return TypeToTypeString( GetType() ); }
        void ToString( const void * object, AString & buffer ) const;
    #line 78 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectedProperty.h"
	static bool FromString( const AString & buffer, float * value );
	static bool FromString( const AString & buffer, uint8_t * value );
	static bool FromString( const AString & buffer, uint16_t * value );
	static bool FromString( const AString & buffer, uint32_t * value );
	static bool FromString( const AString & buffer, uint64_t * value );
	static bool FromString( const AString & buffer, int8_t * value );
	static bool FromString( const AString & buffer, int16_t * value );
	static bool FromString( const AString & buffer, int32_t * value );
	static bool FromString( const AString & buffer, int64_t * value );
	static bool FromString( const AString & buffer, bool * value );
	static bool FromString( const AString & buffer, AString * value );
	static bool FromString( const AString & buffer, Vec2 * value );
	static bool FromString( const AString & buffer, Vec3 * value );
	static bool FromString( const AString & buffer, Vec4 * value );
	static bool FromString( const AString & buffer, Mat44 * value );
	static const char * TypeToTypeString( PropertyType type );

	void AddMetaData( const IMetaData * metaDataChain );

	template < class T >
	const T * HasMetaData() const
	{
		const IMetaData * m = m_MetaDataChain;
		while ( m )
		{
			const T * m2 = ::DynamicCast< const T >( m );
			if ( m2 )
			{
				return m2;
			}
			m = m->GetNext();
		}
		return nullptr;
	}
protected:
	enum { MAX_OFFSET = ( 1 << 16 ) };

	uint32_t m_NameCRC;
	uint32_t m_Offset:16; 
	uint32_t m_Type:8;
	uint32_t m_IsArray:1;
	uint32_t m_Unused:7;

	
		const char * m_Name;
	#line 124 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectedProperty.h"

	const IMetaData * m_MetaDataChain;
};



class ReflectedPropertyStruct : public ReflectedProperty
{
public:
	explicit ReflectedPropertyStruct( const char * name, uint32_t offset, const ReflectionInfo * structInfo, bool isArray = false );

	const void * GetStructBase( const void * object ) const;

	
	size_t		GetArraySize( const void * object ) const;
	void		ResizeArrayOfStruct( void * object, size_t newSize ) const;
	Struct *	GetStructInArray( void * object, size_t index ) const;

	inline const ReflectionInfo * GetStructReflectionInfo() const { return m_StructReflectionInfo; }
private:
	const ReflectionInfo * m_StructReflectionInfo; 
};


#line 149 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/ReflectedProperty.h"
#line 42 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_File.h"


#pragma once









class Meta_File : public IMetaData
{
	private: friend class Meta_File_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
	explicit Meta_File( bool relative = false );
	virtual ~Meta_File();

	inline bool IsRelative() const { return m_Relative; }

protected:
	bool m_Relative;
};


#line 28 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_File.h"
#line 43 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Optional.h"


#pragma once









class Meta_Optional : public IMetaData
{
	private: friend class Meta_Optional_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
	explicit Meta_Optional();
	virtual ~Meta_Optional();
};


#line 23 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Optional.h"
#line 44 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Path.h"


#pragma once









class Meta_Path : public IMetaData
{
	private: friend class Meta_Path_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
	explicit Meta_Path( bool relative = false );
	virtual ~Meta_Path();

	inline bool IsRelative() const { return m_Relative; }

protected:
	bool m_Relative;
};


#line 28 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Path.h"
#line 45 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Range.h"


#pragma once









class Meta_Range : public IMetaData
{
	private: friend class Meta_Range_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
    explicit Meta_Range();
	explicit Meta_Range( int32_t minValue, int32_t maxValue );
	virtual ~Meta_Range();

    inline int32_t GetMin() const { return m_Min; }
    inline int32_t GetMax() const { return m_Max; }
protected:
    int32_t m_Min;
    int32_t m_Max;
};


#line 30 "c:\\Users\\Franta\\p4\\Code\\Core/Reflection/MetaData/Meta_Range.h"
#line 46 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"



#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"














#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"





#pragma pack(push,8)


extern "C" {
#line 31 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
































struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"



















#line 96 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

















#line 114 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"























 FILE * __cdecl __iob_func(void);
#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"





typedef __int64 fpos_t;

#line 147 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"






#line 154 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"





















   int __cdecl _filbuf(  FILE * _File );
  int __cdecl _flsbuf(  int _Ch,   FILE * _File);

   FILE * __cdecl _fsopen(  const char * _Filename,   const char * _Mode,   int _ShFlag);

 void __cdecl clearerr(  FILE * _File);

  errno_t __cdecl clearerr_s(  FILE * _File );
#line 184 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl fclose(  FILE * _File);
  int __cdecl _fcloseall(void);

   FILE * __cdecl _fdopen(  int _FileHandle,   const char * _Mode);

   int __cdecl feof(  FILE * _File);
   int __cdecl ferror(  FILE * _File);
  int __cdecl fflush(  FILE * _File);
  int __cdecl fgetc(  FILE * _File);
  int __cdecl _fgetchar(void);
  int __cdecl fgetpos(  FILE * _File ,   fpos_t * _Pos);
  char * __cdecl fgets(  char * _Buf,   int _MaxCount,   FILE * _File);

   int __cdecl _fileno(  FILE * _File);




#line 203 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

   char * __cdecl _tempnam(  const char * _DirName,   const char * _FilePrefix);



#line 209 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

  int __cdecl _flushall(void);
    FILE * __cdecl fopen(  const char * _Filename,   const char * _Mode);

  errno_t __cdecl fopen_s( FILE ** _File,   const char * _Filename,   const char * _Mode);
#line 215 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl fprintf(  FILE * _File,     const char * _Format, ...);

  int __cdecl fprintf_s(  FILE * _File,     const char * _Format, ...);
#line 219 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl fputc(  int _Ch,   FILE * _File);
  int __cdecl _fputchar(  int _Ch);
  int __cdecl fputs(  const char * _Str,   FILE * _File);
  size_t __cdecl fread(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,   FILE * _File);

  size_t __cdecl fread_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,   FILE * _File);
#line 226 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
    FILE * __cdecl freopen(  const char * _Filename,   const char * _Mode,   FILE * _File);

  errno_t __cdecl freopen_s( FILE ** _File,   const char * _Filename,   const char * _Mode,   FILE * _OldFile);
#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
    int __cdecl fscanf(  FILE * _File,     const char * _Format, ...);
   int __cdecl _fscanf_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fscanf_s(  FILE * _File,     const char * _Format, ...);
#line 237 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _fscanf_s_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
  int __cdecl fsetpos(  FILE * _File,   const fpos_t * _Pos);
  int __cdecl fseek(  FILE * _File,   long _Offset,   int _Origin);
   long __cdecl ftell(  FILE * _File);

  int __cdecl _fseeki64(  FILE * _File,   __int64 _Offset,   int _Origin);
   __int64 __cdecl _ftelli64(  FILE * _File);

  size_t __cdecl fwrite(  const void * _Str,   size_t _Size,   size_t _Count,   FILE * _File);
   int __cdecl getc(  FILE * _File);
   int __cdecl getchar(void);
   int __cdecl _getmaxstdio(void);

 char * __cdecl gets_s(  char * _Buf,   rsize_t _Size);
#line 253 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
  char * __cdecl gets(  char *_Buffer);
  int __cdecl _getw(  FILE * _File);


 void __cdecl perror(  const char * _ErrMsg);
#line 260 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

  int __cdecl _pclose(  FILE * _File);
   FILE * __cdecl _popen(  const char * _Command,   const char * _Mode);
#line 264 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl printf(    const char * _Format, ...);

  int __cdecl printf_s(    const char * _Format, ...);
#line 268 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl putc(  int _Ch,   FILE * _File);
  int __cdecl putchar(  int _Ch);
  int __cdecl puts(  const char * _Str);
  int __cdecl _putw(  int _Word,   FILE * _File);


 int __cdecl remove(  const char * _Filename);
   int __cdecl rename(  const char * _OldFilename,   const char * _NewFilename);
 int __cdecl _unlink(  const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details."))  int __cdecl unlink(  const char * _Filename);
#line 280 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
#line 281 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
 void __cdecl rewind(  FILE * _File);
  int __cdecl _rmtmp(void);
    int __cdecl scanf(    const char * _Format, ...);
   int __cdecl _scanf_l(    const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl scanf_s(    const char * _Format, ...);
#line 290 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _scanf_s_l(    const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
  void __cdecl setbuf(  FILE * _File,     char * _Buffer);
  int __cdecl _setmaxstdio(  int _Max);
  unsigned int __cdecl _set_output_format(  unsigned int _Format);
  unsigned int __cdecl _get_output_format(void);
  int __cdecl setvbuf(  FILE * _File,   char * _Buf,   int _Mode,   size_t _Size);
  int __cdecl _snprintf_s(  char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); } __pragma(warning(pop)); }

  int __cdecl sprintf_s(  char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, ...);
#line 302 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Dest)[_Size],     const char * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
   int __cdecl _scprintf(    const char * _Format, ...);
    int __cdecl sscanf(  const char * _Src,     const char * _Format, ...);
   int __cdecl _sscanf_l(  const char * _Src,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl sscanf_s(  const char * _Src,     const char * _Format, ...);
#line 311 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _sscanf_s_l(  const char * _Src,     const char * _Format,   _locale_t _Locale, ...);
   int __cdecl _snscanf(    const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
   int __cdecl _snscanf_l(    const char * _Src,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snscanf_s(    const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _snscanf_s_l(    const char * _Src,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
    FILE * __cdecl tmpfile(void);

  errno_t __cdecl tmpfile_s(    FILE ** _File);
  errno_t __cdecl tmpnam_s(  char * _Buf,   rsize_t _Size);
#line 322 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
  char * __cdecl tmpnam(  char *_Buffer);
  int __cdecl ungetc(  int _Ch,   FILE * _File);
  int __cdecl vfprintf(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl vfscanf(  FILE * _File,     const char * _Format, va_list _ArgList);

  int __cdecl vfprintf_s(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl vfscanf_s(  FILE * _File,     const char * _Format, va_list _ArgList);
#line 331 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl vprintf(    const char * _Format, va_list _ArgList);
  int __cdecl vscanf(    const char * _Format, va_list _ArgList);

  int __cdecl vprintf_s(    const char * _Format, va_list _ArgList);
  int __cdecl vscanf_s(    const char * _Format, va_list _ArgList);
#line 337 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
   int __cdecl vsnprintf(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl vsnprintf_s(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#line 342 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _vsnprintf_s(  char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl _snprintf(    char *_Dest,   size_t _Count,     const char * _Format, ...);   int __cdecl _vsnprintf(    char *_Dest,   size_t _Count,     const char * _Format, va_list _Args);
#pragma warning(pop)

 int __cdecl vsprintf_s(  char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(  char (&_Dest)[_Size],     const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
  int __cdecl vsscanf_s(const char * _Src,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  const char (&_Src)[_Size],     const char * _Format, va_list _Args) throw() { return vsscanf_s(_Src, _Size, _Format, _Args); } }
#line 354 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl sprintf(  char *_Dest,  const char * _Format, ...);   int __cdecl vsprintf(  char *_Dest,  const char * _Format, va_list _Args);
  int __cdecl vsscanf(const char * _srcBuf,     const char * _Format, va_list _ArgList);
#pragma warning(pop)
   int __cdecl _vscprintf(    const char * _Format, va_list _ArgList);
  int __cdecl _snprintf_c(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vsnprintf_c(  char *_DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl _fprintf_p(  FILE * _File,     const char * _Format, ...);
  int __cdecl _printf_p(    const char * _Format, ...);
  int __cdecl _sprintf_p(  char * _Dst,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vfprintf_p(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl _vprintf_p(    const char * _Format, va_list _ArgList);
  int __cdecl _vsprintf_p(  char * _Dst,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
   int __cdecl _scprintf_p(    const char * _Format, ...);
   int __cdecl _vscprintf_p(    const char * _Format, va_list _ArgList);
 int __cdecl _set_printf_count_output(  int _Value);
 int __cdecl _get_printf_count_output(void);

  int __cdecl _printf_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _printf_p_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _printf_s_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vprintf_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_p_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_s_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _fprintf_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _fprintf_p_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _fprintf_s_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vfprintf_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_p_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_s_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);

   int __cdecl _sprintf_l(    char * _DstBuf,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _sprintf_p_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _sprintf_s_l(  char * _DstBuf,   size_t _DstSize,     const char * _Format,   _locale_t _Locale, ...);
   int __cdecl _vsprintf_l(    char * _DstBuf,   const char * _Format,   _locale_t, va_list _ArgList);
  int __cdecl _vsprintf_p_l(  char * _DstBuf,   size_t _MaxCount,     const char* _Format,   _locale_t _Locale,  va_list _ArgList);
  int __cdecl _vsprintf_s_l(  char * _DstBuf,   size_t _DstSize,     const char * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _scprintf_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _scprintf_p_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vscprintf_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vscprintf_p_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);

   int __cdecl _snprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snprintf_c_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snprintf_s_l(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
   int __cdecl _vsnprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_c_l(  char * _DstBuf,   size_t _MaxCount, const char *,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_s_l(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char* _Format,  _locale_t _Locale, va_list _ArgList);









   FILE * __cdecl _wfsopen(  const wchar_t * _Filename,   const wchar_t * _Mode,   int _ShFlag);

  wint_t __cdecl fgetwc(  FILE * _File);
  wint_t __cdecl _fgetwchar(void);
  wint_t __cdecl fputwc(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl _fputwchar(  wchar_t _Ch);
   wint_t __cdecl getwc(  FILE * _File);
   wint_t __cdecl getwchar(void);
  wint_t __cdecl putwc(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl putwchar(  wchar_t _Ch);
  wint_t __cdecl ungetwc(  wint_t _Ch,   FILE * _File);

  wchar_t * __cdecl fgetws(  wchar_t * _Dst,   int _SizeInWords,   FILE * _File);
  int __cdecl fputws(  const wchar_t * _Str,   FILE * _File);
  wchar_t * __cdecl _getws_s(  wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(  wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
  wchar_t * __cdecl _getws(  wchar_t *_String);
  int __cdecl _putws(  const wchar_t * _Str);

  int __cdecl fwprintf(  FILE * _File,     const wchar_t * _Format, ...);

  int __cdecl fwprintf_s(  FILE * _File,     const wchar_t * _Format, ...);
#line 438 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl wprintf(    const wchar_t * _Format, ...);

  int __cdecl wprintf_s(    const wchar_t * _Format, ...);
#line 442 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
   int __cdecl _scwprintf(    const wchar_t * _Format, ...);
  int __cdecl vfwprintf(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vfwscanf(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl vfwprintf_s(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vfwscanf_s(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
#line 449 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl vwprintf(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl vwscanf(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl vwprintf_s(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl vwscanf_s(    const wchar_t * _Format, va_list _ArgList);
#line 455 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"


 int __cdecl swprintf_s(  wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, ...);
#line 459 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl swprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

 int __cdecl vswprintf_s(  wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vswscanf_s(const wchar_t * _Src,     const wchar_t * _Format, va_list _ArgList);
#line 464 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }
extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswscanf_s(_Dest, _Size, _Format, _Args); } }
  int __cdecl vswscanf(const wchar_t * _srcBuf,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl _swprintf_c(  wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_c(  wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl _snwprintf_s(  wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); } __pragma(warning(pop)); }
  int __cdecl _vsnwprintf_s(  wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl _snwprintf(    wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, ...);   int __cdecl _vsnwprintf(    wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

  int __cdecl _fwprintf_p(  FILE * _File,     const wchar_t * _Format, ...);
  int __cdecl _wprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vfwprintf_p(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl _vwprintf_p(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl _swprintf_p(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_p(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
   int __cdecl _scwprintf_p(    const wchar_t * _Format, ...);
   int __cdecl _vscwprintf_p(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl _wprintf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _wprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _wprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _fwprintf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _fwprintf_p_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _fwprintf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vfwprintf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_p_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _swprintf_c_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _swprintf_p_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _swprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vswprintf_c_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_p_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

   int __cdecl _scwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _scwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _vscwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

   int __cdecl _snwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _snwprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _vsnwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnwprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);










#line 529 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"


#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _swprintf(    wchar_t *_Dest,     const wchar_t * _Format, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _vswprintf(    wchar_t *_Dest,     const wchar_t * _Format, va_list _Args);
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __swprintf_l(    wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __vswprintf_l(    wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"












#pragma once







#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"










#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(  wchar_t * _String, size_t _Count,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( __va_start(&_Arglist, _Format) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl vswprintf(  wchar_t * _String, size_t _Count,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning( pop )


#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(  wchar_t * _String, size_t _Count,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( __va_start(&_Arglist, _Plocinfo) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl _vswprintf_l(  wchar_t * _String, size_t _Count,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int swprintf(    wchar_t * _String,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( __va_start(&_Arglist, _Format) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl vswprintf(    wchar_t * _String,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int _swprintf_l(    wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( __va_start(&_Arglist, _Plocinfo) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl _vswprintf_l(    wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )

#pragma warning( pop )

#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"

#line 128 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"
#line 129 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\swprintf.inl"

#line 539 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
#line 540 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"













#line 554 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

   wchar_t * __cdecl _wtempnam(  const wchar_t * _Directory,   const wchar_t * _FilePrefix);



#line 560 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

   int __cdecl _vscwprintf(    const wchar_t * _Format, va_list _ArgList);
   int __cdecl _vscwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
    int __cdecl fwscanf(  FILE * _File,     const wchar_t * _Format, ...);
   int __cdecl _fwscanf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fwscanf_s(  FILE * _File,     const wchar_t * _Format, ...);
#line 570 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _fwscanf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
    int __cdecl swscanf(  const wchar_t * _Src,     const wchar_t * _Format, ...);
   int __cdecl _swscanf_l(  const wchar_t * _Src,     const wchar_t * _Format,   _locale_t _Locale, ...);

  int __cdecl swscanf_s(  const wchar_t *_Src,     const wchar_t * _Format, ...);
#line 576 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _swscanf_s_l(  const wchar_t * _Src,     const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _snwscanf(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
   int __cdecl _snwscanf_l(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _snwscanf_s(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _snwscanf_s_l(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
    int __cdecl wscanf(    const wchar_t * _Format, ...);
   int __cdecl _wscanf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);

  int __cdecl wscanf_s(    const wchar_t * _Format, ...);
#line 586 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
  int __cdecl _wscanf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)

   FILE * __cdecl _wfdopen(  int _FileHandle ,   const wchar_t * _Mode);
    FILE * __cdecl _wfopen(  const wchar_t * _Filename,   const wchar_t * _Mode);
  errno_t __cdecl _wfopen_s( FILE ** _File,   const wchar_t * _Filename,   const wchar_t * _Mode);
    FILE * __cdecl _wfreopen(  const wchar_t * _Filename,   const wchar_t * _Mode,   FILE * _OldFile);
  errno_t __cdecl _wfreopen_s( FILE ** _File,   const wchar_t * _Filename,   const wchar_t * _Mode,   FILE * _OldFile);



 void __cdecl _wperror(  const wchar_t * _ErrMsg);
#line 599 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

   FILE * __cdecl _wpopen(  const wchar_t *_Command,   const wchar_t * _Mode);
#line 602 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
 int __cdecl _wremove(  const wchar_t * _Filename);
  errno_t __cdecl _wtmpnam_s(  wchar_t * _DstBuf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wtmpnam(  wchar_t *_Buffer);

  wint_t __cdecl _fgetwc_nolock(  FILE * _File);
  wint_t __cdecl _fputwc_nolock(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl _ungetwc_nolock(  wint_t _Ch,   FILE * _File);





#line 616 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"




#line 621 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"
inline   wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }   
inline  wint_t __cdecl putwchar(  wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }       
#line 626 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"










#line 637 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"


#line 640 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"


#line 643 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"















#line 659 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"











 void __cdecl _lock_file(  FILE * _File);
 void __cdecl _unlock_file(  FILE * _File);

  int __cdecl _fclose_nolock(  FILE * _File);
  int __cdecl _fflush_nolock(  FILE * _File);
  size_t __cdecl _fread_nolock(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,   FILE * _File);
  size_t __cdecl _fread_nolock_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,   FILE * _File);
  int __cdecl _fseek_nolock(  FILE * _File,   long _Offset,   int _Origin);
   long __cdecl _ftell_nolock(  FILE * _File);
  int __cdecl _fseeki64_nolock(  FILE * _File,   __int64 _Offset,   int _Origin);
   __int64 __cdecl _ftelli64_nolock(  FILE * _File);
  size_t __cdecl _fwrite_nolock(  const void * _DstBuf,   size_t _Size,   size_t _Count,   FILE * _File);
  int __cdecl _ungetc_nolock(  int _Ch,   FILE * _File);












#line 696 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"











#line 708 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details."))  char * __cdecl tempnam(  const char * _Directory,   const char * _FilePrefix);



#line 714 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details."))  int __cdecl fcloseall(void);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details."))  FILE * __cdecl fdopen(  int _FileHandle,   const char * _Format);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details."))  int __cdecl fgetchar(void);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details."))  int __cdecl fileno(  FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details."))  int __cdecl flushall(void);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details."))  int __cdecl fputchar(  int _Ch);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details."))  int __cdecl getw(  FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details."))  int __cdecl putw(  int _Ch,   FILE * _File);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details."))  int __cdecl rmtmp(void);

#line 726 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"


}
#line 730 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

#pragma pack(pop)

#line 734 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdio.h"

#line 50 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp"



 Function * Function::s_FirstFunction = nullptr;



Function::Function( const char * name )
: m_NextFunction( nullptr )
, m_Name( name )
, m_Seen( false )
, m_AliasForFunction( 256 )
{
	if ( s_FirstFunction == nullptr )
	{
		s_FirstFunction = this;
		return;
	}
	Function * func = s_FirstFunction;
	while ( func )
	{
		if ( func->m_NextFunction == nullptr )
		{
			func->m_NextFunction = this;
			return;
		}
		func = func->m_NextFunction;
	}
}



Function::~Function()
{
}



 const Function * Function::Find( const AString & name )
{
	Function * func = s_FirstFunction;
	while ( func )
	{
		if ( func->GetName() == name )
		{
			return func;
		}
		func = func->m_NextFunction;
	}
	return nullptr;
}



 void Function::Create()
{
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 106 ) FunctionAlias;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 107 ) FunctionCompiler;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 108 ) FunctionCopy;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 109 ) FunctionCopyDir;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 110 ) FunctionCSAssembly;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 111 ) FunctionDLL;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 112 ) FunctionExec;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 113 ) FunctionExecutable;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 114 ) FunctionForEach;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 115 ) FunctionLibrary;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 116 ) FunctionPrint;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 117 ) FunctionSettings;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 118 ) FunctionTest;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 119 ) FunctionUnity;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 120 ) FunctionUsing;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 121 ) FunctionVCXProject;
	new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 122 ) FunctionObjectList;
}



 void Function::Destroy()
{
	Function * func = s_FirstFunction;
	while ( func )
	{
		Function * nextFunc = func->m_NextFunction;
		delete func;
		func = nextFunc;
	}
	s_FirstFunction = nullptr;
}



 bool Function::AcceptsHeader() const
{
	return false;
}



 bool Function::NeedsHeader() const
{
	return false;
}



 bool Function::NeedsBody() const
{
	return true;
}



 bool Function::IsUnique() const
{
	return false;
}



 bool Function::ParseFunction( const BFFIterator & functionNameStart,
										  const BFFIterator * functionBodyStartToken, 
										  const BFFIterator * functionBodyStopToken,
										  const BFFIterator * functionHeaderStartToken,
										  const BFFIterator * functionHeaderStopToken ) const
{
	m_AliasForFunction.Clear();
	if ( AcceptsHeader() &&
		 functionHeaderStartToken && functionHeaderStopToken &&
		 ( functionHeaderStartToken->GetDistTo( *functionHeaderStopToken ) > 1 ) )
	{
		
		BFFIterator start( *functionHeaderStartToken );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *start == BFFParser::BFF_FUNCTION_ARGS_OPEN ) ) { if ( AssertHandler::Failure( "*start == BFFParser::BFF_FUNCTION_ARGS_OPEN", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 182 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		start++;
		start.SkipWhiteSpace();
		const char c = *start;
		if ( ( c != '"' ) && ( c != '\'' ) )
		{
			Error::Error_1001_MissingStringStartToken( start, this ); 
			return false;
		}
		BFFIterator stop( start );
		stop.SkipString( c );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stop.GetCurrent() <= functionHeaderStopToken->GetCurrent() ) ) { if ( AssertHandler::Failure( "stop.GetCurrent() <= functionHeaderStopToken->GetCurrent()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 193 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		if ( start.GetDistTo( stop ) <= 1 )
		{
			Error::Error_1003_EmptyStringNotAllowedInHeader( start, this );
			return false;
		}

		
		start++; 
		if ( BFFParser::PerformVariableSubstitutions( start, stop, m_AliasForFunction ) == false )
		{
			return false; 
		}
	}

	
	BFFParser subParser;
	BFFIterator subIter( *functionBodyStartToken );
	subIter++; 
	subIter.SetMax( functionBodyStopToken->GetCurrent() ); 
	if ( subParser.Parse( subIter ) == false )
	{
		return false;
	}

	
	return Commit( functionNameStart );
}



 bool Function::Commit( const BFFIterator & funcStartIter ) const
{
	(void)funcStartIter;
	return true;
}



bool Function::GetString( const BFFIterator & iter, const BFFVariable * & var, const char * name, bool required ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name ) ) { if ( AssertHandler::Failure( "name", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 234 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	var = nullptr;

	const BFFVariable * v = BFFStackFrame::GetVar( name );

	if ( v == nullptr )
	{
		if ( required )
		{
			Error::Error_1101_MissingProperty( iter, this, AStackString<>( name ) );
			return false;
		}
		return true;
	}

	if ( v->IsString() == false )
	{
		Error::Error_1050_PropertyMustBeOfType( iter, this, name, v->GetType(), BFFVariable::VAR_STRING );
		return false;
	}
	if ( v->GetString().IsEmpty() )
	{
		Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, name );
		return false;
	}

	var = v;
	return true;
}



bool Function::GetString( const BFFIterator & iter, AString & var, const char * name, bool required ) const
{
	const  BFFVariable * stringVar;
	if ( !GetString( iter, stringVar, name, required ) )
	{
		return false; 
	}
	if ( stringVar )
	{
		var = stringVar->GetString();
	}
	return true;
}



bool Function::GetStringOrArrayOfStrings( const BFFIterator & iter, const BFFVariable * & var, const char * name, bool required ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name ) ) { if ( AssertHandler::Failure( "name", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 284 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	var = nullptr;

	const BFFVariable * v = BFFStackFrame::GetVar( name );

	if ( v == nullptr )
	{
		if ( required )
		{
			Error::Error_1101_MissingProperty( iter, this, AStackString<>( name ) );
			return false;
		}
		return true;
	}


	
	if ( v->IsString() || v->IsArrayOfStrings() )
	{
		var = v;
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, name, v->GetType(), BFFVariable::VAR_STRING, BFFVariable::VAR_ARRAY_OF_STRINGS );
	return false;
}



bool Function::GetBool( const BFFIterator & iter, bool & var, const char * name, bool defaultValue, bool required ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name ) ) { if ( AssertHandler::Failure( "name", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 315 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const BFFVariable * v = BFFStackFrame::GetVar( name );
	if ( v == nullptr )
	{
		if ( required )
		{
			Error::Error_1101_MissingProperty( iter, this, AStackString<>( name ) );
			return false;
		}
		var = defaultValue;
		return true;
	}

	if ( v->IsBool() == false )
	{
		Error::Error_1050_PropertyMustBeOfType( iter, this, name, v->GetType(), BFFVariable::VAR_BOOL );
		return false;
	}

	var = v->GetBool();
	return true;
}



bool Function::GetInt( const BFFIterator & iter, int32_t & var, const char * name, int32_t defaultValue, bool required ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name ) ) { if ( AssertHandler::Failure( "name", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 343 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const BFFVariable * v = BFFStackFrame::GetVar( name );
	if ( v == nullptr )
	{
		if ( required )
		{
			Error::Error_1101_MissingProperty( iter, this, AStackString<>( name ) );
			return false;
		}
		var = defaultValue;
		return true;
	}

	if ( v->IsInt() == false )
	{
		Error::Error_1050_PropertyMustBeOfType( iter, this, name, v->GetType(), BFFVariable::VAR_INT );
		return false;
	}

	var = v->GetInt();
	return true;
}




bool Function::GetInt( const BFFIterator & iter, int32_t & var, const char * name, int32_t defaultValue, bool required, int minVal, int maxVal ) const
{
	if ( GetInt( iter, var, name, defaultValue, required ) == false )
	{
		return false;
	}

	
	if ( ( var < minVal ) || ( var > maxVal ) )
	{
		Error::Error_1054_IntegerOutOfRange( iter, this, name, minVal, maxVal );
		return false;
	}
	return true;
}



bool Function::GetNodeList( const BFFIterator & iter, const char * name, Dependencies & nodes, bool required,
							bool allowCopyDirNodes, bool allowUnityNodes ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name ) ) { if ( AssertHandler::Failure( "name", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 391 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const BFFVariable * var = BFFStackFrame::GetVar( name );
	if ( !var )
	{
		
		if ( required )
		{
			Error::Error_1101_MissingProperty( iter, this, AStackString<>( name ) );
			return false; 
		}
		return true; 
	}

	if ( var->IsArrayOfStrings() )
	{
		
		const Array< AString > & nodeNames = var->GetArrayOfStrings();
		nodes.SetCapacity( nodes.GetSize() + nodeNames.GetSize() );
		for ( Array< AString >::Iter it = nodeNames.Begin();
				it != nodeNames.End();
				it++ )
		{
			if ( it->IsEmpty() )
			{
				Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, name );
				return false;
			}

			if ( !GetNodeListRecurse( iter, name, nodes, *it, allowCopyDirNodes, allowUnityNodes ) )
			{
				
				return false;
			}
		}
	}
	else if ( var->IsString() )
	{
		if ( var->GetString().IsEmpty() )
		{
			Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, name );
			return false;
		}

		if ( !GetNodeListRecurse( iter, name, nodes, var->GetString(), allowCopyDirNodes, allowUnityNodes ) )
		{
			
			return false;
		}
	}
	else
	{
		
		Error::Error_1050_PropertyMustBeOfType( iter, this, name, var->GetType(), BFFVariable::VAR_STRING, BFFVariable::VAR_ARRAY_OF_STRINGS );
		return false;
	}

	return true;
}



bool Function::GetDirectoryListNodeList( const BFFIterator & iter,
										 const Array< AString > & paths,
										 const Array< AString > & excludePaths,
                                         const Array< AString > & filesToExclude,
										 bool recurse,
										 const AString & pattern,
										 const char * inputVarName,
										 Dependencies & nodes ) const
{
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	const AString * const  end = paths.End();
	for ( const AString * it = paths.Begin(); it != end; ++it )
	{
		const AString & path = *it;

		
		AStackString<> name;
		DirectoryListNode::FormatName( path, pattern, recurse, excludePaths, filesToExclude, name );
		Node * node = ng.FindNode( name );
		if ( node == nullptr )
		{
			node = ng.CreateDirectoryListNode( name,
											   path,
											   pattern,
											   recurse,
											   excludePaths, 
                                               filesToExclude );
		}
		else if ( node->GetType() != Node::DIRECTORY_LIST_NODE )
		{
			Error::Error_1102_UnexpectedType( iter, this, inputVarName, node->GetName(), node->GetType(), Node::DIRECTORY_LIST_NODE );
			return false;
		}

		nodes.Append( Dependency( node ) );
	}
	return true;
}



bool Function::GetNodeListRecurse( const BFFIterator & iter, const char * name, Dependencies & nodes, const AString & nodeName,
								   bool allowCopyDirNodes, bool allowUnityNodes ) const
{
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	Node * n = ng.FindNode( nodeName );
	if ( n == nullptr )
	{
		
		n = ng.CreateFileNode( nodeName );
		nodes.Append( Dependency( n ) );
		return true;
	}

	
	if ( n->IsAFile() )
	{
		
		nodes.Append( Dependency( n ) );
		return true;
	}

	
	if ( n->GetType() == Node::OBJECT_LIST_NODE )
	{
		
		nodes.Append( Dependency( n ) );
		return true;
	}

	
	if ( allowCopyDirNodes )
	{
		
		if ( n->GetType() == Node::COPY_DIR_NODE )
		{
			
			nodes.Append( Dependency( n ) );
			return true;
		}
	}
	if ( allowUnityNodes )
	{
		
		if ( n->GetType() == Node::UNITY_NODE )
		{
			
			nodes.Append( Dependency( n ) );
			return true;
		}
	}

	
	if ( n->GetType() == Node::ALIAS_NODE )
	{
		AliasNode * an = n->CastTo< AliasNode >();
		const Dependencies & aNodes = an->GetAliasedNodes();
		for ( const Dependency * it = aNodes.Begin(); it != aNodes.End(); ++it )
		{
			
			const AString & subName = it->GetNode()->GetName();

			if ( !GetNodeListRecurse( iter, name, nodes, subName, allowCopyDirNodes, allowUnityNodes ) )
			{
				return false;
			}
		}
		return true;
	}

	
	Error::Error_1005_UnsupportedNodeType( iter, this, name, n->GetName(), n->GetType() );
	return false;
}



bool Function::GetStrings( const BFFIterator & iter, Array< AString > & strings, const char * name, bool required ) const
{
	const BFFVariable * var;
	if ( !GetStringOrArrayOfStrings( iter, var, name, required ) )
	{
		return false; 
	}
	if ( !var )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !required ) ) { if ( AssertHandler::Failure( "!required", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 582 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		return true; 
	}

	if ( var->GetType() == BFFVariable::VAR_STRING )
	{
		strings.Append( var->GetString() );
	}
	else if ( var->GetType() == BFFVariable::VAR_ARRAY_OF_STRINGS )
	{
		const Array< AString > & vStrings = var->GetArrayOfStrings();
		strings.Append( vStrings );
	}
	else
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 597 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	}
	return true;
}



bool Function::GetFolderPaths(const BFFIterator & iter, Array< AString > & paths, const char * name, bool required) const
{
	if ( !GetStrings(iter, paths, name, required ) )
	{
		return false; 
	}
	CleanFolderPaths( paths );
	return true;
}



bool Function::GetFileNode( const BFFIterator & iter, Node * & fileNode, const char * name, bool required ) const
{
	
	AStackString<> fileNodeName;
	if ( GetString( iter, fileNodeName, name, required ) == false )
	{
		return false;
	}

	
	if ( fileNodeName.IsEmpty() )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( required == false ) ) { if ( AssertHandler::Failure( "required == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 628 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		fileNode = nullptr;
		return true;
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * n = ng.FindNode( fileNodeName );
	if ( n == nullptr )
	{
		n = ng.CreateFileNode( fileNodeName );
	}
	else if ( n->IsAFile() == false )
	{
		Error::Error_1103_NotAFile( iter, this, name, n->GetName(), n->GetType() );
		return false;
	}
	fileNode = n;
	return true;
}



 void Function::CleanFolderPaths( Array< AString > & folders )
{
	AStackString< 512 > tmp;

	AString * const end = folders.End();
	for ( AString * it = folders.Begin(); it != end; ++it )
	{
		
		NodeGraph::CleanPath( *it, tmp );

		
		PathUtils::EnsureTrailingSlash( tmp );

		
		*it = tmp;
	}
}


 void Function::CleanFilePaths( Array< AString > & files )
{
	AStackString< 512 > tmp;

	AString * const end = files.End();
	for ( AString * it = files.Begin(); it != end; ++it )
	{
		
		NodeGraph::CleanPath( *it, tmp );

		
		*it = tmp;
	}
}



void Function::CleanFileNames( Array< AString > & fileNames ) const
{
    
	AString * const end = fileNames.End();
	for ( AString * it = fileNames.Begin(); it != end; ++it )
	{
		
		PathUtils::FixupFilePath( *it );
	}
}



bool Function::ProcessAlias( const BFFIterator & iter, Node * nodeToAlias ) const
{
	Dependencies nodesToAlias( 1, false );
	nodesToAlias.Append( Dependency( nodeToAlias ) );
	return ProcessAlias( iter, nodesToAlias );
}



bool Function::ProcessAlias( const BFFIterator & iter, Dependencies & nodesToAlias ) const
{
	if ( m_AliasForFunction.IsEmpty() )
	{
		return true; 
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	if ( ng.FindNode( m_AliasForFunction ) )
	{
		Error::Error_1100_AlreadyDefined( iter, this, m_AliasForFunction );
		return false;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ng.CreateAliasNode( m_AliasForFunction, nodesToAlias ) ) ) { if ( AssertHandler::Failure( "ng.CreateAliasNode( m_AliasForFunction, nodesToAlias )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 725 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	m_AliasForFunction.Clear();

	return true;
}



bool Function::GetNameForNode( const BFFIterator & iter, const ReflectionInfo * ri, AString & name ) const
{
	
	const Meta_Name * nameMD = ri->HasMetaData< Meta_Name >();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nameMD ) ) { if ( AssertHandler::Failure( "nameMD", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 739 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	AStackString<> propertyName( "." );
	propertyName += nameMD->GetName();

	
	const BFFVariable * variable = BFFStackFrame::GetVar( propertyName );
	if ( variable->IsString() )
	{
		
		if ( variable->GetString().IsEmpty() )
		{
			Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, variable->GetName().Get() );
			return false;
		}

		AStackString<> string( variable->GetString() );

		
		if ( !PopulatePathAndFileHelper( iter,
										 ri->HasMetaData< Meta_Path >(), 
										 ri->HasMetaData< Meta_File >(), 
										 variable->GetName(),
										 variable->GetString(),
										 string ) )
		{
			return false;
		}

		
		NodeGraph & ng = FBuild::Get().GetDependencyGraph();
		if ( ng.FindNode( string ) )
		{
			Error::Error_1100_AlreadyDefined( iter, this, string );
			return false;
		}

		name = string;
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, variable->GetName().Get(), variable->GetType(), BFFVariable::VAR_STRING );
	return false;
}



bool Function::PopulateProperties( const BFFIterator & iter, Node * node ) const
{
	const ReflectionInfo * const ri = node->GetReflectionInfoV();
	const ReflectionIter end = ri->End();
	for ( ReflectionIter it = ri->Begin(); it != end; ++it )
	{
		const ReflectedProperty & property = *it;

		
		AStackString<> propertyName( "." );
		propertyName += property.GetName();

		
		const BFFVariable * v = BFFStackFrame::GetVar( propertyName );

		
		if ( v == nullptr )
		{
			const bool required = ( property.HasMetaData< Meta_Optional >() == nullptr );
			if ( required )
			{
				Error::Error_1101_MissingProperty( iter, this, propertyName );
				return false;
			}

			continue; 
		}

		const PropertyType pt = property.GetType();
		switch ( pt )
		{
			case PT_ASTRING:
			{
				if ( property.IsArray() )
				{
					if ( !PopulateArrayOfStrings( iter, node, property, v ) )
					{
						return false;
					}
				}
				else
				{
					if ( !PopulateString( iter, node, property, v ) )
					{
						return false;
					}
				}
				break;
			}
			case PT_BOOL:
			{
				if ( !PopulateBool( iter, node, property, v ) )
				{
					return false;
				}
				break;
			}
			case PT_UINT32:
			{
				if ( !PopulateUInt32( iter, node, property, v ) )
				{
					return false;
				}
				break;
			}
			default:
			{
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 854 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
				break;
			}
		}
	}
	return true;
}



bool Function::PopulatePathAndFileHelper( const BFFIterator & iter,
										  const Meta_Path * pathMD,
										  const Meta_File * fileMD,
										  const AString & variableName,
										  const AString & originalValue, 
										  AString & valueToFix ) const
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( fileMD == nullptr ) || ( pathMD == nullptr ) ) ) { if ( AssertHandler::Failure( "( fileMD == nullptr ) || ( pathMD == nullptr )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\Function.cpp", 872 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	if ( pathMD )
	{
		if ( pathMD->IsRelative() )
		{
			PathUtils::FixupFolderPath( valueToFix );
		}
		else
		{
			
			NodeGraph::CleanPath( originalValue, valueToFix );

			
			PathUtils::EnsureTrailingSlash( valueToFix );
		}
	}

	if ( fileMD )
	{
		if ( fileMD->IsRelative() )
		{
			PathUtils::FixupFilePath( valueToFix );
		}
		else
		{
			
			NodeGraph::CleanPath( originalValue, valueToFix );
		}

		
		if ( PathUtils::IsFolderPath( valueToFix ) )
		{
			Error::Error_1105_PathNotAllowed( iter, this, variableName.Get(), valueToFix );
			return false;
		}
	}

	return true;
}



bool Function::PopulateArrayOfStrings( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const
{
	
	if ( variable->IsArrayOfStrings() )
	{
		Array< AString > strings( variable->GetArrayOfStrings() );

		Array< AString >::Iter end = strings.End();
		for ( Array< AString >::Iter it = strings.Begin();
				it != end;
				++it )
		{
			AString & string = *it;

			
			if ( !PopulatePathAndFileHelper( iter,
											 property.HasMetaData< Meta_Path >(), 
											 property.HasMetaData< Meta_File >(), 
											 variable->GetName(),
											 variable->GetArrayOfStrings()[ it - strings.Begin() ],
											 string ) )
			{
				return false;
			}
		}

		property.SetProperty( node, strings );
		return true;
	}

	if ( variable->IsString() )
	{
		
		if ( variable->GetString().IsEmpty() )
		{
			Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, variable->GetName().Get() );
			return false;
		}

		AStackString<> string( variable->GetString() );

		
		if ( !PopulatePathAndFileHelper( iter, 
										 property.HasMetaData< Meta_Path >(), 
										 property.HasMetaData< Meta_File >(), 
										 variable->GetName(),
										 variable->GetString(),
										 string ) )
		{
			return false;
		}

		
		Array< AString > strings( 1, false );
		strings.Append( string );
		property.SetProperty( node, strings );
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, variable->GetName().Get(), variable->GetType(), BFFVariable::VAR_STRING, BFFVariable::VAR_ARRAY_OF_STRINGS );
	return false;
}



bool Function::PopulateString( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const
{
	if ( variable->IsString() )
	{
		
		if ( variable->GetString().IsEmpty() )
		{
			Error::Error_1004_EmptyStringPropertyNotAllowed( iter, this, variable->GetName().Get() );
			return false;
		}

		AStackString<> string( variable->GetString() );

		
		if ( !PopulatePathAndFileHelper( iter,
											property.HasMetaData< Meta_Path >(), 
											property.HasMetaData< Meta_File >(), 
											variable->GetName(),
											variable->GetString(),
											string ) )
		{
			return false;
		}

		
		property.SetProperty( node, string );
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, variable->GetName().Get(), variable->GetType(), BFFVariable::VAR_STRING );
	return false;
}



bool Function::PopulateBool( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const
{
	if ( variable->IsBool() )
	{
		
		property.SetProperty( node, variable->GetBool() );
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, variable->GetName().Get(), variable->GetType(), BFFVariable::VAR_BOOL );
	return false;
}



bool Function::PopulateUInt32( const BFFIterator & iter, Node * node, const ReflectedProperty & property, const BFFVariable * variable ) const
{
	if ( variable->IsInt() )
	{
		const int32_t value = variable->GetInt();

		
		const Meta_Range * rangeMD = property.HasMetaData< Meta_Range >();
		if ( rangeMD )
		{
			if ( ( value < rangeMD->GetMin() ) || ( value > rangeMD->GetMax() ) )
			{
				Error::Error_1054_IntegerOutOfRange( iter, this, variable->GetName().Get(), rangeMD->GetMin(), rangeMD->GetMax() );
				return false;
			}
		}

		
		property.SetProperty( node, (uint32_t)value );
		return true;
	}

	Error::Error_1050_PropertyMustBeOfType( iter, this, variable->GetName().Get(), variable->GetType(), BFFVariable::VAR_INT );
	return false;
}



#line 7 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionAlias.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionAlias.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionAlias.cpp"







FunctionAlias::FunctionAlias()
: Function( "Alias" )
{
}



 bool FunctionAlias::AcceptsHeader() const
{
	return true;
}



 bool FunctionAlias::NeedsHeader() const
{
	return true;
}



 bool FunctionAlias::Commit( const BFFIterator & funcStartIter ) const
{
	
	Dependencies targetNodes( 16, true );
	const bool required = true;
	const bool allowCopyDirNodes = true;
	const bool allowUnityNodes = true;
	if ( !GetNodeList( funcStartIter, ".Targets", targetNodes, required, allowCopyDirNodes, allowUnityNodes ) )
	{
		return false; 
	}

	if ( targetNodes.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	if ( ng.FindNode( m_AliasForFunction ) != nullptr )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, m_AliasForFunction );
		return false;
	}

	ng.CreateAliasNode( m_AliasForFunction, targetNodes );

	return true;
}


#line 10 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionCompiler.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCompiler.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCompiler.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CompilerNode.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/ToolManifest.h"


#pragma once





class Dependencies;
class IOStream;
class Node;










class ToolManifest
{
public:
	explicit ToolManifest();
	explicit ToolManifest( uint64_t toolId );
	~ToolManifest();

	bool Generate( const Node * mainExecutable, const Dependencies & dependencies );

	inline uint64_t GetToolId() const { return m_ToolId; }
	inline uint64_t GetTimeStamp() const { return m_TimeStamp; }

	void Serialize( IOStream & ms ) const;
	void Deserialize( IOStream & ms );

	inline bool IsSynchronized() const { return m_Synchronized; }
	bool GetSynchronizationStatus( uint32_t & syncDone, uint32_t & syncTotal ) const;

	
	inline bool operator == ( uint64_t toolId ) const
	{
		return ( m_ToolId == toolId );
	}

	inline void		SetUserData( void * data )	{ m_UserData = data; }
	inline void *	GetUserData() const			{ return m_UserData; }

	struct File
	{
		explicit File( const AString & name, uint64_t stamp, uint32_t hash, const Node * node, uint32_t size );
		~File();

		enum SyncState
		{
			NOT_SYNCHRONIZED,
			SYNCHRONIZING,
			SYNCHRONIZED,
		};

		
		AString			m_Name;
		uint64_t		m_TimeStamp;
		uint32_t		m_Hash;
		mutable uint32_t m_ContentSize;

		
		const Node *	m_Node;
		mutable void *	m_Content;

		
		SyncState		m_SyncState;
		FileStream *	m_FileLock; 
	};
	const Array< File > & GetFiles() const { return m_Files; }

	void MarkFileAsSynchronizing( size_t fileId ) { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Files[ fileId ].m_SyncState == File::NOT_SYNCHRONIZED ) ) { if ( AssertHandler::Failure( "m_Files[ fileId ].m_SyncState == File::NOT_SYNCHRONIZED", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/ToolManifest.h", 77 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); m_Files[ fileId ].m_SyncState = File::SYNCHRONIZING; }
	void CancelSynchronizingFiles();

	const void *	GetFileData( uint32_t fileId, size_t & dataSize ) const;
	bool			ReceiveFileData( uint32_t fileId, const void * data, size_t & dataSize );

	void			GetRemotePath( AString & path ) const;
	void			GetRemoteFilePath( uint32_t fileId, AString & exe, bool fullPath = true ) const;
	const char *	GetRemoteEnvironmentString() const { return m_RemoteEnvironmentString; }
private:
	bool			AddFile( const Node * node );
	bool			LoadFile( const AString & fileName, void * & content, uint32_t & contentSize ) const;

	uint64_t		m_ToolId;	
	uint64_t		m_TimeStamp;
	mutable Mutex	m_Mutex;
	Array< File >	m_Files;
	bool			m_Synchronized;
	const char *	m_RemoteEnvironmentString;
	void *			m_UserData;
};


#line 101 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/ToolManifest.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CompilerNode.h"



class BFFIterator;
class Function;



class CompilerNode : public FileNode
{
	private: friend class CompilerNode_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
	explicit CompilerNode();
	explicit CompilerNode( const AString & exe,
						   const Dependencies & extraFiles,
						   bool allowDistribution );
	virtual ~CompilerNode();

	bool Initialize( const BFFIterator & iter, const Function * function );

	static inline Node::Type GetType() { return Node::COMPILER_NODE; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

	inline const ToolManifest & GetManifest() const { return m_Manifest; }

	inline bool CanBeDistributed() const { return m_AllowDistribution; }
private:
	virtual BuildResult DoBuild( Job * job );

	
	Array< AString >	m_ExtraFiles;

	friend class FunctionCompiler;
	bool			m_AllowDistribution;
	ToolManifest	m_Manifest;
};


#line 52 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CompilerNode.h"
#line 13 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCompiler.cpp"








FunctionCompiler::FunctionCompiler()
: Function( "Compiler" )
{
}



 bool FunctionCompiler::AcceptsHeader() const
{
	return true;
}



 bool FunctionCompiler::NeedsHeader() const
{
	return true;
}



 bool FunctionCompiler::Commit( const BFFIterator & funcStartIter ) const
{
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	AStackString<> name;
	if ( GetNameForNode( funcStartIter, CompilerNode::GetReflectionInfoS(), name ) == false )
	{
		return false;
	}

	CompilerNode * compilerNode = ng.CreateCompilerNode( name );

	if ( !PopulateProperties( funcStartIter, compilerNode ) )
	{
		return false;
	}

	compilerNode->m_AllowDistribution = true; 

	compilerNode->Initialize( funcStartIter, this );

	
	return ProcessAlias( funcStartIter, compilerNode );
}


#line 13 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionCopy.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopy.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopy.cpp"



#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FLog.h"


#pragma once


















































class FLog
{
public:	
	inline static bool ShowInfo() { return s_ShowInfo; }
	inline static bool ShowErrors() { return s_ShowErrors; }

	static void Info( const char * formatString, ... );
	static void Build( const char * formatString, ... );
	static void Warning( const char * formatString, ... );
	static void Error( const char * formatString, ... );

	
	static void ErrorDirect( const char * message );

	static void StartBuild();
	static void StopBuild();

	static void OutputProgress( float time, float percentage, uint32_t numJobs, uint32_t numJobsActive, uint32_t numJobsDist, uint32_t numJobsDistActive );

private:
	friend class FBuild;
	static inline void SetShowInfo( bool showInfo ) { s_ShowInfo = showInfo; }
	static inline void SetShowErrors( bool showErrors ) { s_ShowErrors = showErrors; }
	static inline void SetShowProgress( bool showProgress ) { s_ShowProgress = showProgress; }

	static void Output( const char * type, const char * message );

	static bool TracingOutputCallback( const char * message );

	static bool s_ShowInfo;
	static bool s_ShowErrors;
	static bool s_ShowProgress;

	static AStackString< 64 > m_ProgressText;
};


#line 92 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FLog.h"
#line 11 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopy.cpp"



#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CopyNode.h"


#pragma once












class CopyNode : public FileNode
{
public:
	explicit CopyNode( const AString & dstFileName,
					    FileNode * sourceFile,
						const Dependencies & preBuildDependencies );
	virtual ~CopyNode();

	static inline Node::Type GetType() { return Node::COPY_NODE; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

	FileNode * GetSourceNode() const { return m_SourceFile; }

private:
	virtual BuildResult DoBuild( Job * job );

	void EmitCopyMessage() const;

	FileNode * m_SourceFile;
};


#line 41 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CopyNode.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopy.cpp"







FunctionCopy::FunctionCopy()
: Function( "Copy" )
{
}



 bool FunctionCopy::AcceptsHeader() const
{
	return true;
}



 bool FunctionCopy::Commit( const BFFIterator & funcStartIter ) const
{
	
	Array< AString > sources( 16, true );
	const BFFVariable * dstFileV;
	if ( !GetStrings( funcStartIter, sources, ".Source", true ) ||
		 !GetString( funcStartIter, dstFileV, ".Dest", true ) )
	{
		return false; 
	}

	
	{
		const AString * const end = sources.End();
		for ( const AString * it = sources.Begin(); it != end; ++it )
		{
			const AString & srcFile( *it );

			
			if ( PathUtils::IsFolderPath( srcFile ) )
			{
				Error::Error_1105_PathNotAllowed( funcStartIter, this, ".Source", srcFile );
				return false;
			}
		}
	}

	
	Dependencies preBuildDependencies;
	if ( !GetNodeList( funcStartIter, ".PreBuildDependencies", preBuildDependencies, false ) )
	{
		return false; 
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Array< Node * > srcNodes;
	{
		const AString * const end = sources.End();
		for ( const AString * it = sources.Begin(); it != end; ++it )
		{

			Node * srcNode = ng.FindNode( *it );
			if ( srcNode )
			{
				if ( GetSourceNodes( funcStartIter, srcNode, srcNodes ) == false )
				{
					return false;
				}
			}
			else
			{
				
				srcNodes.Append( ng.CreateFileNode( *it ) );
			}
		}
	}

	if ( srcNodes.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	AStackString<> dstFile;
	NodeGraph::CleanPath( dstFileV->GetString(), dstFile );

	
	Dependencies copyNodes( srcNodes.GetSize(), false );
	Node * const * end = srcNodes.End();
	for ( Node ** it = srcNodes.Begin(); it != end; ++it )
	{
		AStackString<> dst( dstFile );

		
		if ( PathUtils::IsFolderPath( dstFile ) )
		{
			
			const AString & srcName = ( *it )->GetName();
			const char * lastSlash = srcName.FindLast( ( '\\' ) );
			dst += lastSlash ? ( lastSlash + 1 )	
								 : srcName.Get();	
		}

		
		if ( ng.FindNode( dst ) )
		{
			
			
			Error::Error_1100_AlreadyDefined( funcStartIter, this, dst );
			return false;
		}

		
		Node * copyNode = ng.CreateCopyNode( dst, *it, preBuildDependencies );
		copyNodes.Append( Dependency( copyNode ) );
	}

	
	return ProcessAlias( funcStartIter, copyNodes );
}



bool FunctionCopy::GetSourceNodes( const BFFIterator & iter, Node * node, Array< Node * > & nodes ) const
{
	if ( node->GetType() == Node::ALIAS_NODE )
	{
		
		AliasNode * aliasNode = node->CastTo< AliasNode >();
		const Dependencies & aliasedNodes = aliasNode->GetAliasedNodes();
		const Dependency * const end = aliasedNodes.End();
		for ( const Dependency * it = aliasedNodes.Begin(); it != end; ++it )
		{
			if ( !GetSourceNodes( iter, it->GetNode(), nodes ) )
			{
				return false;
			}
		}
		return true;
	}
	else if ( node->IsAFile() )
	{
		
		nodes.Append( node );
		return true;
	}

	
	Error::Error_1005_UnsupportedNodeType( iter, this, ".Source", node->GetName(), node->GetType() );
	return false;
}


#line 16 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionCopyDir.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopyDir.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCopyDir.cpp"












FunctionCopyDir::FunctionCopyDir()
: Function( "CopyDir" )
{
}



 bool FunctionCopyDir::AcceptsHeader() const
{
	return true;
}



 bool FunctionCopyDir::Commit( const BFFIterator & funcStartIter ) const
{
	
	Array< AString > inputPaths;
	if ( !GetFolderPaths( funcStartIter, inputPaths, ".SourcePaths", true ) )
	{
		return false; 
	}

	
	AStackString<> pattern;
	bool recurse = true;
	Array< AString > excludePaths;
	if ( !GetString( funcStartIter, pattern, ".SourcePathsPattern" ) ||
		 !GetBool( funcStartIter, recurse, ".SourcePathsRecurse", true ) || 
		 !GetStrings( funcStartIter, excludePaths, ".SourceExcludePaths" ) )
	{
		return false; 
	}
	if ( pattern.IsEmpty() )
	{
		pattern = "*";
	}

	
	Dependencies staticDeps( inputPaths.GetSize() );
	if ( !GetDirectoryListNodeList( funcStartIter, inputPaths, excludePaths, Array< AString >(), recurse, pattern, ".SourcePaths", staticDeps ) )
	{
		return false; 
	}

	
	AStackString<> destPath;
	if ( !GetString( funcStartIter, destPath, ".Dest", true ) )
	{
		return false;
	}
	PathUtils::FixupFolderPath( destPath );

	
	Dependencies preBuildDeps;
	if ( !GetNodeList( funcStartIter, ".PreBuildDependencies", preBuildDeps, false ) )
	{
		return false; 
	}

	
	if ( staticDeps.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();	
	if ( ng.FindNode( m_AliasForFunction ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, m_AliasForFunction );
		return false;
	}

	
	ng.CreateCopyDirNode( m_AliasForFunction, staticDeps, destPath, preBuildDeps );
	return true;
}


#line 19 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionCSAssembly.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCSAssembly.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCSAssembly.cpp"










#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CSNode.h"


#pragma once













class CSNode : public FileNode
{
public:
	explicit CSNode( const AString & compilerOutput,
					 const Dependencies & inputNodes,
					 const AString & compiler,
					 const AString & compilerArgs,
					 const Dependencies & extraRefs );
	virtual ~CSNode();

	static inline Node::Type GetType() { return Node::CS_NODE; }

	virtual void Save( IOStream & stream ) const;
	static Node * Load( IOStream & stream );
private:
	virtual bool DoDynamicDependencies( bool forceClean );
	virtual BuildResult DoBuild( Job * job );

	void EmitCompilationMessage( const AString & fullArgs ) const;

	void GetFullArgs( AString & fullArgs ) const;
	void GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const;
	void GetExtraRefs( AString & fullArgs, const AString & pre, const AString & post ) const;

	AString m_CompilerPath;
	AString m_CompilerArgs;

	Dependencies m_ExtraRefs;
};


#line 49 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/CSNode.h"
#line 18 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionCSAssembly.cpp"



FunctionCSAssembly::FunctionCSAssembly()
: Function( "CSAssembly" )
{
}



 bool FunctionCSAssembly::AcceptsHeader() const
{
	return true;
}



 bool FunctionCSAssembly::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * compiler;
	const BFFVariable * compilerOptions;
	const BFFVariable * compilerOutput;
	if ( !GetString( funcStartIter, compiler, ".Compiler", true ) ||
		 !GetString( funcStartIter, compilerOptions, ".CompilerOptions", true ) ||
		 !GetString( funcStartIter, compilerOutput, ".CompilerOutput", true ) )
	{
		return false;
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	Dependencies staticDeps( 32, true );

	
	const BFFVariable * inputPath = BFFStackFrame::GetVar( ".CompilerInputPath" );
	if ( inputPath )
	{
		
		const BFFVariable * patternVar = nullptr;
		if ( !GetString( funcStartIter, patternVar, ".CompilerInputPattern", false ) )
		{
			return false; 
		}
		AStackString<> defaultWildCard( "*.cs" );
		const AString & pattern = patternVar ? patternVar->GetString() : defaultWildCard;

		
		bool recurse = true;
		if ( !GetBool( funcStartIter, recurse, ".CompilerInputPathRecurse", true, false ) )
		{
			return false; 
		}

		
		Array< AString > excludePaths;
		if ( !GetFolderPaths( funcStartIter, excludePaths, ".CompilerInputExcludePath", false ) )
		{
			return false; 
		}

        Array< AString > filesToExclude(0, true);
        if ( !GetStrings( funcStartIter, filesToExclude, ".CompilerInputExcludedFiles", false ) ) 
        {
            return false; 
        }
	    CleanFileNames( filesToExclude );

		
		Array< AString > inputPaths;
		if ( !GetFolderPaths( funcStartIter, inputPaths, ".CompilerInputPath", false ) )
		{
			return false; 
		}

		Dependencies dirNodes( inputPaths.GetSize() );
		if ( !GetDirectoryListNodeList( funcStartIter, inputPaths, excludePaths, filesToExclude, recurse, pattern, "CompilerInputPath", dirNodes ) )
		{
			return false; 
		}
		staticDeps.Append( dirNodes );
	}

	
	if ( !GetNodeList( funcStartIter, ".CompilerInputFiles", staticDeps, false ) )
	{
		
		return false;
	}

	if ( staticDeps.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	
	Dependencies extraRefs( 0, true );
	if ( !GetNodeList( funcStartIter, ".CompilerReferences", extraRefs, false ) )
	{
		
		return false;
	}

	
	if ( ng.FindNode( compilerOutput->GetString() ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, compilerOutput->GetString() );
		return false;
	}
	Node * csNode = ng.CreateCSNode( compilerOutput->GetString(),
									 staticDeps,
									 compiler->GetString(),
									 compilerOptions->GetString(),
									 extraRefs );

	
	return ProcessAlias( funcStartIter, csNode );
}


#line 22 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionDLL.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionDLL.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionDLL.cpp"





FunctionDLL::FunctionDLL()
: FunctionExecutable()
{
	
	m_Name =  "DLL";
}


#line 25 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionExec.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExec.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExec.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ExecNode.h"


#pragma once













class ExecNode : public FileNode
{
public:
	explicit ExecNode( const AString & dstFileName,
					    FileNode * sourceFile,
						FileNode * executable,
						const AString & arguments,
						const AString & workingDir,
						int32_t expectedReturnCode,
						const Dependencies & preBuildDependencies );
	virtual ~ExecNode();

	static inline Node::Type GetType() { return Node::EXEC_NODE; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;
private:
	virtual BuildResult DoBuild( Job * job );

	void EmitCompilationMessage( const AString & args ) const;

	FileNode * m_SourceFile;
	FileNode * m_Executable;
	AString		m_Arguments;
	AString		m_WorkingDir;
	int32_t		m_ExpectedReturnCode;
};


#line 47 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ExecNode.h"
#line 13 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExec.cpp"



FunctionExec::FunctionExec()
: Function( "Exec" )
{
}



 bool FunctionExec::AcceptsHeader() const
{
	return true;
}



 bool FunctionExec::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * outputV;
	const BFFVariable * executableV;
	const BFFVariable * inputV;
	const BFFVariable * argsV;
	const BFFVariable * workingDirV;
	int32_t expectedReturnCode;
	if ( !GetString( funcStartIter, outputV,		".ExecOutput", true ) ||
		 !GetString( funcStartIter, executableV,	".ExecExecutable", true ) ||
		 !GetString( funcStartIter, inputV,			".ExecInput", true ) ||
		 !GetString( funcStartIter, argsV,			".ExecArguments" ) ||
		 !GetString( funcStartIter, workingDirV,	".ExecWorkingDir" ) ||
		 !GetInt( funcStartIter, expectedReturnCode, ".ExecReturnCode", 0, false ) )
	{
		return false;
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	if ( ng.FindNode( outputV->GetString() ) != nullptr )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, outputV->GetString() );
		return false;
	}

	
	Dependencies preBuildDependencies;
	if ( !GetNodeList( funcStartIter, ".PreBuildDependencies", preBuildDependencies, false ) )
	{
		return false; 
	}

	
	Node * exeNode = ng.FindNode( executableV->GetString() );
	if ( exeNode == nullptr )
	{
		exeNode = ng.CreateFileNode( executableV->GetString() );
	}
	else if ( exeNode->IsAFile() == false )
	{
		Error::Error_1103_NotAFile( funcStartIter, this, "ExecExecutable", exeNode->GetName(), exeNode->GetType() );
		return false;
	}

	
	Node * inputNode = ng.FindNode( inputV->GetString() );
	if ( inputNode == nullptr )
	{
		inputNode = ng.CreateFileNode( inputV->GetString() );
	}
	else if ( inputNode->IsAFile() == false )
	{
		Error::Error_1103_NotAFile( funcStartIter, this, "ExecInput", exeNode->GetName(), exeNode->GetType() );
		return false;
	}

	
	const AString & arguments(	argsV ?			argsV->GetString()		: AString::GetEmpty() );
	const AString & workingDir( workingDirV ?	workingDirV->GetString(): AString::GetEmpty() );

	
	Node * outputNode = ng.CreateExecNode( outputV->GetString(), 
										   (FileNode *)inputNode,
										   (FileNode *)exeNode,
										   arguments,
										   workingDir, 
										   expectedReturnCode,
										   preBuildDependencies );
	
	return ProcessAlias( funcStartIter, outputNode );
}


#line 28 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionExecutable.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"







#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DLLNode.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\LinkerNode.h"


#pragma once













class LinkerNode : public FileNode
{
public:
	explicit LinkerNode( const AString & linkerOutputName,
						 const Dependencies & inputLibraries,
						 const Dependencies & otherLibraries,
						 const AString & linker,
						 const AString & linkerArgs,
						 uint32_t flags,
						 const Dependencies & assemblyResources,
						 Node * linkerStampExe, 
						 const AString & linkerStampExeArgs );
	virtual ~LinkerNode();

	enum Flag
	{
		LINK_FLAG_MSVC		= 0x01,
		LINK_FLAG_DLL		= 0x02,
		LINK_OBJECTS		= 0x04,
		LINK_FLAG_GCC		= 0x08,
		LINK_FLAG_SNC		= 0x10,
		LINK_FLAG_ORBIS_LD	= 0x20,
		LINK_FLAG_INCREMENTAL = 0x40,
		LINK_FLAG_GREENHILLS_ELXR = 0x80,
		LINK_FLAG_CODEWARRIOR_LD=0x100
	};

	inline bool IsADLL() const { return GetFlag( LINK_FLAG_DLL ); }

	virtual void Save( IOStream & stream ) const;

	static uint32_t DetermineFlags( const AString & linkerName, const AString & args );
protected:
	virtual BuildResult DoBuild( Job * job );

	void DoPreLinkCleanup() const;

	void GetFullArgs( AString & fullArgs ) const;
	void GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const;
	void GetInputFiles( Node * n, AString & fullArgs, const AString & pre, const AString & post ) const;
	void GetAssemblyResourceFiles( AString & fullArgs, const AString & pre, const AString & post ) const;
	void EmitCompilationMessage( const AString & fullArgs ) const;
	void EmitStampMessage() const;

	inline bool GetFlag( Flag flag ) const { return ( ( m_Flags & (uint32_t)flag ) != 0 ); }

	inline const char * GetDLLOrExe() const { return GetFlag( LINK_FLAG_DLL ) ? "DLL" : "Exe"; }

	virtual Priority GetPriority() const { return PRIORITY_HIGH; }

	AString m_Linker;
	AString m_LinkerArgs;
	uint32_t m_Flags;
	Dependencies m_AssemblyResources;
	Dependencies m_OtherLibraries;
    const Node * m_LinkerStampExe;
    AString m_LinkerStampExeArgs;
};


#line 78 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\LinkerNode.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DLLNode.h"






class DLLNode : public LinkerNode
{
public:
	explicit DLLNode( const AString & linkerOutputName,
					  const Dependencies & inputLibraries,
					  const Dependencies & otherLibraries,
					  const AString & linker,
					  const AString & linkerArgs,
					  uint32_t flags,
					  const Dependencies & assemblyResources,
					  const AString & importLibName,
					  Node * linkerStampExe,
					  const AString & linkerStampExeArgs );
	virtual ~DLLNode();

	void GetImportLibName( AString & importLibName ) const;

	static inline Node::Type GetType() { return Node::DLL_NODE; }

	static Node * Load( IOStream & stream );
private:
	virtual void Save( IOStream & stream ) const;

	AString m_ImportLibName;
};


#line 44 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/DLLNode.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ExeNode.h"


#pragma once












class ExeNode : public LinkerNode
{
public:
	explicit ExeNode( const AString & linkerOutputName,
					  const Dependencies & inputLibraries,
					  const Dependencies & otherLibraries,
					  const AString & linker,
					  const AString & linkerArgs,
					  uint32_t flags,
					  const Dependencies & assemblyResources,
					  Node * linkerStampExe,
					  const AString & linkerStampExeArgs );
	virtual ~ExeNode();

	static inline Node::Type GetType() { return Node::EXE_NODE; }

	static Node * Load( IOStream & stream );
private:
};


#line 38 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ExeNode.h"
#line 16 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Args.h"


#pragma once





class AString;






class Args
{
public:
	
	static void StripQuotes( const char * start, const char * end, AString & out );

private:
};


#line 27 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Args.h"
#line 18 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"


#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Env.h"


#pragma once










class AString;



class Env
{
public:
	enum Platform
	{
		WINDOWS,
		IOS,
		OSX,
		LINUX
	};

	static inline Platform GetPlatform();
	static inline const char * GetPlatformName( Platform platform );
	static inline const char * GetPlatformName() { return GetPlatformName( GetPlatform() ); }

	static uint32_t GetNumProcessors();

	static bool GetEnvVariable( const char * envVarName, AString & envVarValue );
	static const char * GetCmdLine();
	static void GetExePath( AString & path );

	static uint32_t GetLastErr();
};



 inline Env::Platform Env::GetPlatform()
{
	
		return Env::WINDOWS;
	





#line 55 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Env.h"
}



 inline const char * Env::GetPlatformName( Platform platform )
{
	switch ( platform )
	{
		case Env::WINDOWS:	return "Windows";
		case Env::IOS:		return "IOS";
		case Env::OSX:		return "OSX";
		case Env::LINUX:	return "Linux";
	}
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "c:\\Users\\Franta\\p4\\Code\\Core/Env/Env.h", 68 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	return "Unknown";
}


#line 74 "c:\\Users\\Franta\\p4\\Code\\Core/Env/Env.h"
#line 21 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"





FunctionExecutable::FunctionExecutable()
: Function( "Executable" )
{
}



 bool FunctionExecutable::AcceptsHeader() const
{
	return true;
}



 bool FunctionExecutable::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * linker = BFFStackFrame::GetVar( ".Linker" );
	if ( linker == nullptr )
	{
		Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( "Linker" ) );
		return false;
	}
	AStackString<> linkerOutput;
	if ( !GetString( funcStartIter, linkerOutput, ".LinkerOutput", true ) )
	{
		return false; 
	}
	if ( PathUtils::IsFolderPath( linkerOutput ) )
	{
		Error::Error_1105_PathNotAllowed( funcStartIter, this, ".LinkerOutput", linkerOutput );
		return false;
	}
	const BFFVariable * linkerOptions = BFFStackFrame::GetVar( ".LinkerOptions" );
	if ( linkerOptions == nullptr )
	{
		Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( "LinkerOptions" ) );
		return false;
	}
	const BFFVariable * libraries = BFFStackFrame::GetVar( ".Libraries" );
	if ( libraries == nullptr )
	{
		Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( "Libraries" ) );
		return false;
	}

	
	{
		const AString & args = linkerOptions->GetString();
		bool hasInputToken = ( args.Find( "%1" ) || args.Find( "\"%1\"" ) );
		if ( hasInputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".LinkerOptions", "%1" );
			return false;
		}
		bool hasOutputToken = ( args.Find( "%2" ) || args.Find( "\"%2\"" ) );
		if ( hasOutputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".LinkerOptions", "%2" );
			return false;
		}
	}

	
	Node * linkerStampExe( nullptr );
	AStackString<> linkerStampExeArgs;
	if ( !GetFileNode( funcStartIter, linkerStampExe, ".LinkerStampExe" ) ||
		 !GetString( funcStartIter, linkerStampExeArgs, ".LinkerStampExeArgs" ) )
	{
		return false; 
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	Dependencies libraryNodes( 64, true );

	
	if ( libraries->IsArrayOfStrings() )
	{
		
		const Array< AString > & libraryNames = libraries->GetArrayOfStrings();
		for ( Array< AString >::ConstIter it = libraryNames.Begin();
			  it != libraryNames.End();
			  it++ )
		{
			if ( DependOnNode( funcStartIter, *it, libraryNodes ) == false )
			{
				return false; 
			}
		}
	}
	else if ( libraries->IsString() )
	{
		
		if ( DependOnNode( funcStartIter, libraries->GetString(), libraryNodes ) == false )
		{
			return false; 
		}
	}
	else
	{
		Error::Error_1050_PropertyMustBeOfType( funcStartIter, this, "Libraries", libraries->GetType(), BFFVariable::VAR_STRING, BFFVariable::VAR_ARRAY_OF_STRINGS );
		return false;
	}

	
	if ( ng.FindNode( linkerOutput ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, linkerOutput );
		return false;
	}

	
	Dependencies assemblyResources;
	if ( !GetNodeList( funcStartIter, ".LinkerAssemblyResources", assemblyResources, false ) )
	{
		return false; 
	}

	
	uint32_t flags = LinkerNode::DetermineFlags( linker->GetString(), linkerOptions->GetString() );
	bool isADLL = ( ( flags & LinkerNode::LINK_FLAG_DLL ) != 0 );

	bool linkObjects = isADLL ? true : false;
	if ( GetBool( funcStartIter, linkObjects, ".LinkerLinkObjects", linkObjects, false ) == false )
	{
		return false;
	}
	if ( linkObjects )
	{
		flags |= LinkerNode::LINK_OBJECTS;
	}

	
	Dependencies otherLibraryNodes( 64, true );
	if ( ( flags & ( LinkerNode::LINK_FLAG_MSVC | LinkerNode::LINK_FLAG_GCC | LinkerNode::LINK_FLAG_SNC | LinkerNode::LINK_FLAG_ORBIS_LD | LinkerNode::LINK_FLAG_GREENHILLS_ELXR | LinkerNode::LINK_FLAG_CODEWARRIOR_LD ) ) != 0 )
	{
		const bool msvcStyle = ( ( flags & LinkerNode::LINK_FLAG_MSVC ) == LinkerNode::LINK_FLAG_MSVC );
		if ( !GetOtherLibraries( funcStartIter, linkerOptions->GetString(), otherLibraryNodes, msvcStyle ) )
		{
			return false; 
		}
	}

	
	AStackString<> importLibName;
	if ( isADLL && ( ( flags & LinkerNode::LINK_FLAG_MSVC ) != 0 )  )
	{
		GetImportLibName( linkerOptions->GetString(), importLibName );
	}

	
	Node * n( nullptr );
	if ( isADLL )
	{
		n = ng.CreateDLLNode( linkerOutput,
							  libraryNodes,
							  otherLibraryNodes,
							  linker->GetString(),
							  linkerOptions->GetString(),
							  flags,
							  assemblyResources,
							  importLibName,
							  linkerStampExe,
							  linkerStampExeArgs );
	}
	else
	{
		n = ng.CreateExeNode( linkerOutput,
							  libraryNodes,
							  otherLibraryNodes,
							  linker->GetString(),
							  linkerOptions->GetString(),
							  flags,
							  assemblyResources,
							  linkerStampExe,
							  linkerStampExeArgs );
	}

	return ProcessAlias( funcStartIter, n );
}



bool FunctionExecutable::DependOnNode( const BFFIterator & iter, const AString & nodeName, Dependencies & nodes ) const
{
	
	if ( nodeName.IsEmpty() )
	{
		return true;
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * node = ng.FindNode( nodeName );

	
	if ( node != nullptr )
	{
		
		return DependOnNode( iter, node, nodes );
	}

	
	
	node = ng.CreateFileNode( nodeName );
	nodes.Append( Dependency( node ) );
	return true;
}



bool FunctionExecutable::DependOnNode( const BFFIterator & iter, Node * node, Dependencies & nodes ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node ) ) { if ( AssertHandler::Failure( "node", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp", 240 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( node->GetType() == Node::LIBRARY_NODE )
	{
		
		nodes.Append( Dependency( node ) );
		return true;
	}

	
	if ( node->GetType() == Node::OBJECT_LIST_NODE )
	{
		
		nodes.Append( Dependency( node ) );
		return true;
	}

	
	if ( node->GetType() == Node::DLL_NODE )
	{
		
		nodes.Append( Dependency( node, true ) ); 
		return true;
	}

	
	if ( node->GetType() == Node::FILE_NODE )
	{
		
		nodes.Append( Dependency( node ) );
		return true;
	}

	
	if ( node->GetType() == Node::COPY_NODE )
	{
		
		nodes.Append( Dependency( node ) );
		return true;
	}

	
	if ( node->GetType() == Node::EXEC_NODE )
	{
		
		nodes.Append( Dependency( node ) );
		return true;
	}

	
	if ( node->GetType() == Node::ALIAS_NODE )
	{
		
		AliasNode * an = node->CastTo< AliasNode >();
		const Dependencies & aliasNodeList = an->GetAliasedNodes();
		const Dependencies::Iter end = aliasNodeList.End();
		for ( Dependencies::Iter it = aliasNodeList.Begin();
			  it != end; 
			  ++it )
		{
			if ( DependOnNode( iter, it->GetNode(), nodes ) == false )
			{
				return false; 
			}
		}
		return true; 
	}

	
	Error::Error_1005_UnsupportedNodeType( iter, this, "Libraries", node->GetName(), node->GetType() );
	return false;
}



void FunctionExecutable::GetImportLibName( const AString & args, AString & importLibName ) const
{
	
	Array< AString > tokens;
	args.Tokenize( tokens );

	const AString * const end = tokens.End();
	for ( const AString * it = tokens.Begin(); it != end; ++it )
	{
		if ( it->BeginsWith( "/IMPLIB:") )
		{
			const char * impStart = it->Get() + 8;
			const char * impEnd = it->GetEnd();

			
			if ( impStart == impEnd )
			{
				++it;
				
				if ( it == end )
				{
					return; 
				}

				impStart = it->Get();
				impEnd = it->GetEnd();
			}

			Args::StripQuotes( impStart, impEnd, importLibName );
		}
	}
}



bool FunctionExecutable::GetOtherLibraries( const BFFIterator & iter, 
											const AString & args, 
											Dependencies & otherLibraries,
											bool msvc ) const
{
	
	Array< AString > tokens;
	args.Tokenize( tokens );

	bool ignoreAllDefaultLibs = false;
	Array< AString > defaultLibsToIgnore( 8, true );
	Array< AString > defaultLibs( 16, true );
	Array< AString > libs( 16, true );
	Array< AString > dashlLibs( 16, true );
	Array< AString > libPaths( 16, true );
	Array< AString > envLibPaths( 32, true );

	
	AStackString< 1024 > libVar;
	if ( Env::GetEnvVariable( "LIB", libVar ) )
	{
		libVar.Tokenize( envLibPaths, ';' );
	}

	const AString * const end = tokens.End();
	for ( const AString * it = tokens.Begin(); it != end; ++it )
	{
		const AString & token = *it;

		
		if ( msvc )
		{
			
			if ( token == "/NODEFAULTLIB" )
			{
				ignoreAllDefaultLibs = true;
				continue;
			}

			
			if ( GetOtherLibsArg( "/NODEFAULTLIB:", defaultLibsToIgnore, it, end ) )
			{
				continue;
			}

			
			if ( GetOtherLibsArg( "/DEFAULTLIB:", defaultLibs, it, end ) )
			{
				continue;
			}

			
			if ( GetOtherLibsArg( "/LIBPATH:", libPaths, it, end, true ) ) 
			{
				continue;
			}

			
			if ( token.BeginsWith( '/' ) )
			{
				continue;
			}
		}

		
		if ( !msvc )
		{
			
			
			
			
			
			
			
			

			
			if ( GetOtherLibsArg( "-L", libPaths, it, end ) )
			{
				continue;
			}

			
			if ( GetOtherLibsArg( "-l", dashlLibs, it, end ) )
			{
				continue;
			}

			
			if ( token.BeginsWith( '-' ) )
			{
				continue;
			}
		}

		
		if ( token.BeginsWith( '%' ) ||		
			 token.BeginsWith( "'%" ) ||	
			 token.BeginsWith( "\"%" ) )	
		{
			continue;
		}

		
		AStackString<> libName;
		Args::StripQuotes( token.Get(), token.GetEnd(), libName );
		if ( token.IsEmpty() == false )
		{
			libs.Append( libName );
		}
	}

	
	if ( ignoreAllDefaultLibs )
	{
		
		defaultLibs.Clear();
	}
	else
	{
		
		const AString * const endI = defaultLibsToIgnore.End();
		for ( const AString * itI = defaultLibsToIgnore.Begin(); itI != endI; ++itI )
		{
			const AString * const endD = defaultLibs.End();
			for ( AString * itD = defaultLibs.Begin(); itD != endD; ++itD )
			{
				if ( itI->CompareI( *itD ) == 0 )
				{
					defaultLibs.Erase( itD );
					break;
				}
			}
		}
	}

	if ( !msvc )
	{
		
		const AString * const endDL = dashlLibs.End();
		for ( const AString * itDL = dashlLibs.Begin(); itDL != endDL; ++itDL )
		{
			AStackString<> libName;
			libName += "lib";
			libName += *itDL;
			libName += ".a";
			libs.Append( libName );
		}
	}

	
	libs.Append( defaultLibs );

	
	libPaths.Append( envLibPaths );

	
	const AString * const endL = libs.End();
	for ( const AString * itL = libs.Begin(); itL != endL; ++itL )
	{
		bool found = false;

		
		if ( ( itL->GetLength() > 2 ) && ( (*itL)[ 1 ] == ':' ) )
		{
			
			if ( !GetOtherLibrary( iter, otherLibraries, AString::GetEmpty(), *itL, found ) )
			{
				return false; 
			}
		}
		else
		{
			
			const AString * const endP = libPaths.End();
			for ( const AString * itP = libPaths.Begin(); itP != endP; ++itP )
			{
				if ( !GetOtherLibrary( iter, otherLibraries, *itP, *itL, found ) )
				{
					return false; 
				}

				if ( found )
				{
					break;
				}

				
			}
		}

		
        
            
            
            if ( !found )
            {
                Error::Error_1104_TargetNotDefined( iter, this, ".LinkerOptions", *itL );
                return false;
            }
        #line 552 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionExecutable.cpp"
	}

	return true;
}



bool FunctionExecutable::GetOtherLibrary( const BFFIterator & iter, Dependencies & libs, const AString & path, const AString & lib, bool & found ) const
{
	found = false;

	AStackString<> potentialNodeName( path );
	if ( !potentialNodeName.IsEmpty() )
	{
		PathUtils::EnsureTrailingSlash( potentialNodeName );
	}
	potentialNodeName += lib;
	AStackString<> potentialNodeNameClean;
	NodeGraph::CleanPath( potentialNodeName, potentialNodeNameClean );

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * node = ng.FindNode( potentialNodeNameClean );
	if ( node )
	{
		
		if ( node->IsAFile() == false )
		{
			Error::Error_1103_NotAFile( iter, this, ".LinkerOptions", potentialNodeNameClean, node->GetType() );
			return false;
		}

		
		libs.Append( Dependency( node ) );
		found = true;
		return true; 
	}

	
	if ( FileIO::FileExists( potentialNodeNameClean.Get() ) )
	{
		node = ng.CreateFileNode( potentialNodeNameClean );
		libs.Append( Dependency( node ) );
		found = true;
		do { if ( FLog::ShowInfo() ) { FLog::Info( "Additional library '%s' assumed to be '%s'\n",lib.Get(), potentialNodeNameClean.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return true; 
	}

	return true; 
}



 bool FunctionExecutable::GetOtherLibsArg( const char * arg, 
													 Array< AString > & list, 
													 const AString * & it, 
													 const AString * const & end,
													 bool canonicalizePath )
{
	
	if ( it->BeginsWith( arg ) == false )
	{
		return false; 
	}

	
	const char * valueStart = it->Get() + AString::StrLen( arg );
	const char * valueEnd = it->GetEnd();

	
	if ( valueStart == valueEnd )
	{
		++it;

		
		if ( it == end )
		{
			
			return true; 
		}

		
		valueStart = it->Get();
		valueEnd = it->GetEnd();
	}

	
	AStackString<> value;
	Args::StripQuotes( valueStart, valueEnd, value );

	
	if ( value.IsEmpty() == false )
	{
		if ( canonicalizePath )
		{
			AStackString<> cleanValue;
			NodeGraph::CleanPath( value, cleanValue );
			PathUtils::EnsureTrailingSlash( cleanValue );
			list.Append( cleanValue );
		}
		else
		{
			list.Append( value );
		}
	}

	return true; 
}


#line 31 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionForEach.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionForEach.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionForEach.cpp"












FunctionForEach::FunctionForEach()
: Function( "ForEach" )
{
}



 bool FunctionForEach::AcceptsHeader() const
{
	return true;
}



 bool FunctionForEach::NeedsHeader() const
{
	return true;
}


 bool FunctionForEach::ParseFunction(
					const BFFIterator & functionNameStart,
					const BFFIterator * functionBodyStartToken, 
					const BFFIterator * functionBodyStopToken,
					const BFFIterator * functionHeaderStartToken,
					const BFFIterator * functionHeaderStopToken ) const
{
	
	Array< AString >				localNames( 4, true );
	Array< const BFFVariable * >	arrayVars( 4, true );

	int loopLen = -1;

	
	BFFIterator pos( *functionHeaderStartToken );
	pos++; 
	while ( pos < *functionHeaderStopToken )
	{
		pos.SkipWhiteSpace();
		if ( *pos != BFFParser::BFF_DECLARE_VAR_INTERNAL )
		{
			Error::Error_1200_ExpectedVar( pos, this );
			return false;
		}
		BFFIterator varNameStart( pos );
		pos++;
		if ( pos.IsAtValidVariableNameCharacter() == false )
		{
			Error::Error_1013_UnexpectedCharInVariableName( pos, this );
			return false;
		}
		pos.SkipVariableName();
		BFFIterator varNameEnd( pos );

		
		size_t varNameLen = varNameStart.GetDistTo( varNameEnd );
		if ( varNameLen > BFFParser::MAX_VARIABLE_NAME_LENGTH )
		{
			Error::Error_1014_VariableNameIsTooLong( varNameStart, (uint32_t)varNameLen, (uint32_t)BFFParser::MAX_VARIABLE_NAME_LENGTH );
			return false;
		}
		AStackString< BFFParser::MAX_VARIABLE_NAME_LENGTH > localName( varNameStart.GetCurrent(), varNameEnd.GetCurrent() );
		localNames.Append( localName );

		pos.SkipWhiteSpace();

		
		bool foundIn = false;
		if ( *pos == 'i' )
		{
			pos++;
			if ( *pos == 'n' )
			{
				foundIn = true;
			}
		}
		if ( foundIn == false )
		{
			Error::Error_1201_MissingIn( pos, this );
			return false;
		}
		pos++;
		pos.SkipWhiteSpace();

		BFFIterator arrayVarNameBegin( pos );
		if ( *pos != BFFParser::BFF_DECLARE_VAR_INTERNAL )
		{
			Error::Error_1202_ExpectedVarFollowingIn( pos, this );
			return false;
		}
		pos++;
		if ( pos.IsAtValidVariableNameCharacter() == false )
		{
			Error::Error_1013_UnexpectedCharInVariableName( pos, this );
			return false;
		}
		pos.SkipVariableName();
		BFFIterator arrayVarNameEnd( pos );

		
		size_t arrayVarNameLen = arrayVarNameBegin.GetDistTo( arrayVarNameEnd );
		if ( arrayVarNameLen > BFFParser::MAX_VARIABLE_NAME_LENGTH )
		{
			Error::Error_1014_VariableNameIsTooLong( arrayVarNameBegin, (uint32_t)arrayVarNameLen, (uint32_t)BFFParser::MAX_VARIABLE_NAME_LENGTH );
			return false;
		}
		AStackString< BFFParser::MAX_VARIABLE_NAME_LENGTH > arrayVarName( arrayVarNameBegin.GetCurrent(), arrayVarNameEnd.GetCurrent() );

		const BFFVariable * var = BFFStackFrame::GetVar( arrayVarName );
		if ( var == nullptr )
		{
			Error::Error_1009_UnknownVariable( arrayVarNameBegin, this );
			return false;
		}

		
		if ( ( var->IsArrayOfStrings() == false ) && ( var->IsArrayOfStructs() == false ) )
		{
			Error::Error_1050_PropertyMustBeOfType( arrayVarNameBegin, this, arrayVarName.Get(), var->GetType(), BFFVariable::VAR_ARRAY_OF_STRINGS, BFFVariable::VAR_ARRAY_OF_STRUCTS );
			return false;
		}

		
		int thisArrayLen( -1 );
		if ( var->GetType() == BFFVariable::VAR_ARRAY_OF_STRINGS )
		{
			thisArrayLen = (int)var->GetArrayOfStrings().GetSize();
		}
		else if ( var->GetType() == BFFVariable::VAR_ARRAY_OF_STRUCTS )
		{
			thisArrayLen = (int)var->GetArrayOfStructs().GetSize();
		}
		else
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionForEach.cpp", 153 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		}

		if ( loopLen == -1 )
		{
			
			loopLen = thisArrayLen;
		}
		else
		{
			
			if ( loopLen != thisArrayLen )
			{
				Error::Error_1204_LoopVariableLengthsDiffer( arrayVarNameBegin, this, arrayVarName.Get(), (uint32_t)thisArrayLen, (uint32_t)loopLen );
				return false;
			}
		}
		arrayVars.Append( var );

		
		pos.SkipWhiteSpace();
		if ( *pos == ',' )
		{
			pos++;
		}
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( localNames.GetSize() == arrayVars.GetSize() ) ) { if ( AssertHandler::Failure( "localNames.GetSize() == arrayVars.GetSize()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionForEach.cpp", 180 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( loopLen < 1 )
	{
		return true;
	}

	for ( uint32_t i=0; i<(uint32_t)loopLen; ++i )
	{
		
		BFFStackFrame loopStackFrame;
		for ( uint32_t j=0; j<localNames.GetSize(); ++j )
		{
			if ( arrayVars[ j ]->GetType() == BFFVariable::VAR_ARRAY_OF_STRINGS )
			{
				loopStackFrame.SetVarString( localNames[ j ], arrayVars[ j ]->GetArrayOfStrings()[ i ] );
			}
			else if ( arrayVars[ j ]->GetType() == BFFVariable::VAR_ARRAY_OF_STRUCTS )
			{
				loopStackFrame.SetVarStruct( localNames[ j ], arrayVars[ j ]->GetArrayOfStructs()[ i ]->GetStructMembers() );
			}
			else
			{
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionForEach.cpp", 204 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			}
		}

		
		BFFParser subParser;
		BFFIterator subIter( *functionBodyStartToken );
		subIter++; 
		subIter.SetMax( functionBodyStopToken->GetCurrent() ); 
		if ( subParser.Parse( subIter ) == false )
		{
			return false;
		}

		
		if ( Commit( functionNameStart ) == false )
		{
			return false;
		}
	}

	return true;
}


#line 34 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionLibrary.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionLibrary.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionLibrary.cpp"













#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/LibraryNode.h"


#pragma once










class CompilerNode;
class ObjectNode;



class LibraryNode : public FileNode
{
public:
	explicit LibraryNode( const AString & libraryName,
						  const Dependencies & inputNodes,
						  CompilerNode * compiler,
						  const AString & compilerArgs,
						  const AString & compilerArgsDeoptimized,
						  const AString & compilerOutputPath,
						  const AString & librarian,
						  const AString & librarianArgs,
						  uint32_t flags,
						  ObjectNode * precompiledHeader,
						  const Dependencies & compilerForceUsing,
						  const Dependencies & preBuildDependencies,
						  const Dependencies & additionalInputs,
						  bool deoptimizeWritableFiles,
						  bool deoptimizeWritableFilesWithToken );
	virtual ~LibraryNode();

	static inline Node::Type GetType() { return Node::LIBRARY_NODE; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

	const char * GetObjExtension() const;

	void GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const;

	enum Flag
	{
		LIB_FLAG_LIB	= 0x01,	
		LIB_FLAG_AR		= 0x02,	
		LIB_FLAG_ORBIS_AR=0x04, 
		LIB_FLAG_GREENHILLS_AX=0x08, 
	};
	static uint32_t DetermineFlags( const AString & librarianName );
private:
	friend class FunctionLibrary;

	virtual bool DoDynamicDependencies( bool forceClean );
	virtual BuildResult DoBuild( Job * job );

	
	void GetFullArgs( AString & fullArgs ) const;
	bool CreateDynamicObjectNode( Node * inputFile, bool isUnityNode = false, bool isIsolatedFromUnityNode = false );
	void EmitCompilationMessage( const AString & fullArgs ) const;

	virtual Priority GetPriority() const { return PRIORITY_HIGH; }

	inline bool GetFlag( Flag flag ) const { return ( ( m_Flags & (uint32_t)flag ) != 0 ); }

	CompilerNode * m_Compiler;
	AString m_CompilerArgs;
	AString m_CompilerArgsDeoptimized;
	AString m_CompilerOutputPath;
	Dependencies m_CompilerForceUsing;
	AString m_LibrarianPath;
	AString m_LibrarianArgs;
	uint32_t m_Flags;
	ObjectNode * m_PrecompiledHeader;
	AString m_ObjExtensionOverride;
	Dependencies m_AdditionalInputs;
	bool m_DeoptimizeWritableFiles;
	bool m_DeoptimizeWritableFilesWithToken;
};


#line 88 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/LibraryNode.h"
#line 21 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionLibrary.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectNode.h"


#pragma once







#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/AutoPtr.h"


#pragma once









class DefaultDeletor
{
public:
	static inline void Delete( void * ptr ) { ::Free( ptr ); }
};



template < class T, class DELETOR = DefaultDeletor >
class AutoPtr
{
public:
	explicit inline AutoPtr() : m_Pointer( nullptr ) {}
	explicit inline AutoPtr( T * ptr ) : m_Pointer( ptr ) {}
	inline		   ~AutoPtr() { DELETOR::Delete( m_Pointer ); }

	
	inline		 T * Get()		 { return m_Pointer; }
	inline const T * Get() const { return m_Pointer; }

	
	inline void operator = ( T * newPtr ) { DELETOR::Delete( m_Pointer ); m_Pointer = newPtr; }

	
	inline void Destroy() { DELETOR::Delete( m_Pointer ); m_Pointer = nullptr; }

	
	inline T * Release() { T * ptr = m_Pointer; m_Pointer = nullptr; return ptr; }
private:
	T * m_Pointer;
};


#line 47 "c:\\Users\\Franta\\p4\\Code\\Core/Containers/AutoPtr.h"
#line 12 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectNode.h"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"


#pragma once










class Process
{
public:
	Process();
	~Process();

	bool Spawn( const char * executable,
				const char * args,
				const char * workingDir,
				const char * environment,
				bool shareHandles = false );
	bool IsRunning() const;
	int WaitForExit();
	void Detach();

	
	
	void ReadAllData( AutoPtr< char > & memOut, uint32_t * memOutSize,
					  AutoPtr< char > & errOut, uint32_t * errOutSize );

    
        
        
        char * ReadStdOut( uint32_t * bytesRead = nullptr );
        char * ReadStdErr( uint32_t * bytesRead = nullptr );

        
        uint32_t ReadStdOut( char * outputBuffer, uint32_t outputBufferSize );
        uint32_t ReadStdErr( char * outputBuffer, uint32_t outputBufferSize );

		
		inline void DisableHandleRedirection() { m_RedirectHandles = false; }
    #line 47 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
    
	static uint32_t GetCurrentId();
private:
    
        void Read( void * handle, AutoPtr< char > & buffer, uint32_t & sizeSoFar, uint32_t & bufferSize );
        char * Read( void * handle, uint32_t * bytesRead );
        uint32_t Read( void * handle, char * outputBuffer, uint32_t outputBufferSize );
    

#line 57 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
        
    
        
        inline struct _PROCESS_INFORMATION & GetProcessInfo() const
        { 
            return (_PROCESS_INFORMATION &)m_ProcessInfo;
        }
    #line 65 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
    
	
		uint32_t m_ProcessInfo[ 2 + 2 + 1 + 1 ]; 
	

#line 71 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
            
	bool m_Started;
    
		bool m_SharingHandles;
		bool m_RedirectHandles;
    #line 77 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"

    
        void * m_StdOutRead;	
        void * m_StdOutWrite;	
        void * m_StdErrRead;	
        void * m_StdErrWrite;	
    #line 84 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
    
    





#line 92 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
};


#line 96 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Process.h"
#line 14 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectNode.h"



class NodeProxy;



class ObjectNode : public FileNode
{
public:
	explicit ObjectNode( const AString & objectName,
						 Node * inputNode,
						 Node * compilerNode,
						 const AString & compilerArgs,
						 const AString & compilerArgsDeoptimized,
						 Node * precompiledHeader,
						 uint32_t flags,
						 const Dependencies & compilerForceUsing,
						 bool deoptimizeWritableFiles,
						 bool deoptimizeWritableFilesWithToken );
	
	explicit ObjectNode( const AString & objectName,
						 NodeProxy * srcFile,
						 const AString & compilerArgs,
						 uint32_t flags );
	virtual ~ObjectNode();

	static inline Node::Type GetType() { return Node::OBJECT_NODE; }


	enum Flags
	{
		FLAG_CAN_BE_CACHED		=	0x01,
		FLAG_CAN_BE_DISTRIBUTED	=	0x02,
		FLAG_USING_PCH			=	0x04,
		FLAG_GCC				=	0x10,
		FLAG_MSVC				=	0x20,
		FLAG_CREATING_PCH		=   0x40,
		FLAG_SNC				=	0x80,
		FLAG_USING_CLR			=   0x100,
		FLAG_CLANG				=	0x200,
		FLAG_UNITY				=   0x400,
		FLAG_ISOLATED_FROM_UNITY=	0x800,
		FLAG_USING_PDB			=   0x1000,
		CODEWARRIOR_WII			=	0x2000,
		GREENHILLS_WIIU			=	0x4000,
		FLAG_CUDA_NVCC			=   0x10000,
	};
	static uint32_t DetermineFlags( const Node * compilerNode, const AString & args );

	inline bool IsCreatingPCH() const { return GetFlag( FLAG_CREATING_PCH ); }
	inline bool IsMSVC() const { return GetFlag( FLAG_MSVC ); }
	inline bool IsUsingPDB() const { return GetFlag( FLAG_USING_PDB ); }

	virtual void Save( IOStream & stream ) const;
	static Node * Load( IOStream & stream );

	virtual void SaveRemote( IOStream & stream ) const;
	static Node * LoadRemote( IOStream & stream );

	inline Node * GetCompiler() const { return m_StaticDependencies[ 0 ].GetNode(); }
	inline Node * GetSourceFile() const { return m_StaticDependencies[ 1 ].GetNode(); }
	inline Node * GetPrecompiledHeaderCPPFile() const { do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( GetFlag( FLAG_CREATING_PCH ) ) ) { if ( AssertHandler::Failure( "GetFlag( FLAG_CREATING_PCH )", "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectNode.h", 76 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); return m_StaticDependencies[ 1 ].GetNode(); }

	void GetPDBName( AString & pdbName ) const;

	virtual Priority GetPriority() const override;

	const char * GetObjExtension() const;
private:
	virtual BuildResult DoBuild( Job * job );
	virtual BuildResult DoBuild2( Job * job, bool racingRemoteJob );
	virtual bool Finalize();

	BuildResult DoBuildMSCL_NoCache( Job * job, bool useDeoptimization );
	BuildResult DoBuildWithPreProcessor( Job * job, bool useDeoptimization, bool useCache );
	BuildResult DoBuildWithPreProcessor2( Job * job, bool useDeoptimization, bool stealingRemoteJob, bool racingRemoteJob );
	BuildResult DoBuildOther( Job * job, bool useDeoptimization );

	bool ProcessIncludesMSCL( const char * output, uint32_t outputSize );
	bool ProcessIncludesWithPreProcessor( Job * job );

	const AString & GetCacheName( Job * job ) const;
	bool RetrieveFromCache( Job * job );
	void WriteToCache( Job * job );

	static void DumpOutput( Job * job, const char * data, uint32_t dataSize, const AString & name, bool treatAsWarnings = false );

	void EmitCompilationMessage( const AString & fullArgs, bool useDeoptimization, bool stealingRemoteJob = false, bool racingRemoteJob = false ) const;

	enum Pass
	{
		PASS_PREPROCESSOR_ONLY,
		PASS_COMPILE_PREPROCESSED,
		PASS_COMPILE
	};
	static bool StripTokenWithArg( const char * tokenToCheckFor, const AString & token, size_t & index );
	static bool StripToken( const char * tokenToCheckFor, const AString & token, bool allowStartsWith = false );
	void BuildFullArgs( const Job * job, AString & fullArgs, Pass pass, bool useDeoptimization ) const;

	void ExpandTokenList( const Dependencies & nodes, AString & fullArgs, const AString & pre, const AString & post ) const;
	bool BuildPreprocessedOutput( const AString & fullArgs, Job * job, bool useDeoptimization ) const;
	bool WriteTmpFile( Job * job, AString & tmpFileName ) const;
	bool BuildFinalOutput( Job * job, const AString & fullArgs ) const;

	inline bool GetFlag( uint32_t flag ) const { return ( ( m_Flags & flag ) != 0 ); }

	static void HandleSystemFailures( Job * job, int result, const char * stdOut, const char * stdErr );
	bool ShouldUseDeoptimization() const;
	friend class Client;
	bool ShouldUseCache() const;

	class CompileHelper
	{
	public:
		CompileHelper( bool handleOutput = true );
		~CompileHelper();

		
		bool SpawnCompiler( Job * job, const AString & name, const AString & compiler, const AString & fullArgs, bool useResponseFile, const char * workingDir = nullptr );

		
		inline int						GetResult() const { return m_Result; }

		
		inline const AutoPtr< char > &	GetOut() const { return m_Out; }
		inline uint32_t					GetOutSize() const { return m_OutSize; }
		inline const AutoPtr< char > &	GetErr() const { return m_Err; }
		inline uint32_t					GetErrSize() const { return m_ErrSize; }

	private:
		bool			m_HandleOutput;
		Process			m_Process;
		AutoPtr< char > m_Out;
		uint32_t		m_OutSize;
		AutoPtr< char > m_Err;
		uint32_t		m_ErrSize;
		int				m_Result;
	};

	Array< AString > m_Includes;
	uint32_t m_Flags;
	AString m_CompilerArgs;
	AString m_CompilerArgsDeoptimized;
	AString m_ObjExtensionOverride;
	Dependencies m_CompilerForceUsing;
	bool m_DeoptimizeWritableFiles;
	bool m_DeoptimizeWritableFilesWithToken;
	bool m_Remote;
};


#line 167 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectNode.h"
#line 22 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionLibrary.cpp"



FunctionLibrary::FunctionLibrary()
: FunctionObjectList()
{
	m_Name = "Library";
}



 bool FunctionLibrary::AcceptsHeader() const
{
	return true;
}



 bool FunctionLibrary::NeedsHeader() const
{
	return false;
}



 bool FunctionLibrary::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * outputLib;
	const BFFVariable * compiler;
	const BFFVariable * compilerOptions;
	AStackString<> compilerOptionsDeoptimized;
	const BFFVariable * compilerOutputPath;
	const BFFVariable * compilerOutputExtension;
	const BFFVariable * librarian;
	const BFFVariable * librarianOptions;
	if ( !GetString( funcStartIter, outputLib, ".LibrarianOutput", true ) ||
		 !GetString( funcStartIter, compiler, ".Compiler", true ) ||
		 !GetString( funcStartIter, compilerOptions, ".CompilerOptions", true ) ||
		 !GetString( funcStartIter, compilerOptionsDeoptimized, ".CompilerOptionsDeoptimized", false ) ||
		 !GetString( funcStartIter, compilerOutputPath, ".CompilerOutputPath", true ) ||
		 !GetString( funcStartIter, compilerOutputExtension, ".CompilerOutputExtension", false ) ||
		 !GetString( funcStartIter, librarian, ".Librarian", true ) ||
		 !GetString( funcStartIter, librarianOptions, ".LibrarianOptions", true ) )
	{
		return false;
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	CompilerNode * compilerNode = nullptr;
	if ( !FunctionObjectList::GetCompilerNode( funcStartIter, compiler->GetString(), compilerNode ) )
	{
		return false; 
	}

	
	uint32_t objFlags = ObjectNode::DetermineFlags( compilerNode, compilerOptions->GetString() );
	if ( ( objFlags & ObjectNode::FLAG_MSVC ) && ( objFlags & ObjectNode::FLAG_CREATING_PCH ) )
	{
		
		Error::Error_1303_PCHCreateOptionOnlyAllowedOnPCH( funcStartIter, this, "/Yc", "CompilerOptions" );
		return false;
	}

	
	{
		const AString & args = compilerOptions->GetString();
		bool hasInputToken = ( args.Find( "%1" ) || args.Find( "\"%1\"" ) );
		if ( hasInputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".CompilerOptions", "%1" );
			return false;
		}
		bool hasOutputToken = ( args.Find( "%2" ) || args.Find( "\"%2\"" ) );
		if ( hasOutputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".CompilerOptions", "%2" );
			return false;
		}
	}

	
	{
		const AString & args = librarianOptions->GetString();
		bool hasInputToken = ( args.Find( "%1" ) || args.Find( "\"%1\"" ) );
		if ( hasInputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".LibrarianOptions", "%1" );
			return false;
		}
		bool hasOutputToken = ( args.Find( "%2" ) || args.Find( "\"%2\"" ) );
		if ( hasOutputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".LibrarianOptions", "%2" );
			return false;
		}
	}

	
	Dependencies compilerForceUsing;
	if ( !GetNodeList( funcStartIter, ".CompilerForceUsing", compilerForceUsing, false ) )
	{
		return false; 
	}

	
	Dependencies preBuildDependencies;
	if ( !GetNodeList( funcStartIter, ".PreBuildDependencies", preBuildDependencies, false ) )
	{
		return false; 
	}

	
	bool deoptimizeWritableFiles = false;
	bool deoptimizeWritableFilesWithToken = false;
	if ( !GetBool( funcStartIter, deoptimizeWritableFiles, ".DeoptimizeWritableFiles", false, false ) )
	{
		return false; 
	}
	if ( !GetBool( funcStartIter, deoptimizeWritableFilesWithToken, ".DeoptimizeWritableFilesWithToken", false, false ) )
	{
		return false; 
	}
	if ( ( deoptimizeWritableFiles || deoptimizeWritableFilesWithToken ) && compilerOptionsDeoptimized.IsEmpty() )
	{
		Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".CompilerOptionsDeoptimized" ) );
		return false;
	}

	
	ObjectNode * precompiledHeaderNode = nullptr;
	if ( !GetPrecompiledHeaderNode( funcStartIter, compilerNode, objFlags, compilerOptions, compilerForceUsing, precompiledHeaderNode, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken ) )
	{
		return false; 
	}

	Dependencies staticDeps( 32, true );
	if ( !GetInputs( funcStartIter, staticDeps ) )
	{
		return false; 
	}

	
	Dependencies additionalInputs;
	if ( !GetNodeList( funcStartIter, ".LibrarianAdditionalInputs", additionalInputs, false ) )
	{
		return false;
	}

	if ( staticDeps.IsEmpty() && additionalInputs.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	uint32_t flags = LibraryNode::DetermineFlags( librarian->GetString() );

	
	if ( ng.FindNode( outputLib->GetString() ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, outputLib->GetString() );
		return false;
	}
	LibraryNode * libNode = ng.CreateLibraryNode( outputLib->GetString(),
						  staticDeps,
						  compilerNode,
						  compilerOptions->GetString(),
						  compilerOptionsDeoptimized,
						  compilerOutputPath->GetString(),
						  librarian->GetString(),
						  librarianOptions->GetString(),
						  flags,
						  precompiledHeaderNode,
						  compilerForceUsing,
						  preBuildDependencies,
						  additionalInputs,
						  deoptimizeWritableFiles,
						  deoptimizeWritableFilesWithToken );
	if ( compilerOutputExtension )
	{
		libNode->m_ObjExtensionOverride = compilerOutputExtension->GetString();
	}

	return ProcessAlias( funcStartIter, libNode );
}


#line 37 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionObjectList.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionObjectList.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionObjectList.cpp"












#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectListNode.h"


#pragma once










class CompilerNode;
class ObjectNode;



class ObjectListNode : public Node
{
public:
	explicit ObjectListNode( const AString & listName,
							 const Dependencies & inputNodes,
							 CompilerNode * compiler,
							 const AString & compilerArgs,
							 const AString & compilerArgsDeoptimized,
							 const AString & compilerOutputPath,
							 ObjectNode * precompiledHeader,
							 const Dependencies & compilerForceUsing,
							 const Dependencies & preBuildDependencies,
							 bool deoptimizeWritableFiles,
							 bool deoptimizeWritableFilesWithToken );
	virtual ~ObjectListNode();

	static inline Node::Type GetType() { return Node::OBJECT_LIST_NODE; }

	virtual bool IsAFile() const;

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

	const char * GetObjExtension() const;

	void GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const;
private:
	friend class FunctionObjectList;

	virtual bool DoDynamicDependencies( bool forceClean );
	virtual BuildResult DoBuild( Job * job );

	
	bool CreateDynamicObjectNode( Node * inputFile, bool isUnityNode = false, bool isIsolatedFromUnityNode = false );

	CompilerNode *	m_Compiler;
	AString			m_CompilerArgs;
	AString			m_CompilerArgsDeoptimized;
	AString			m_CompilerOutputPath;
	Dependencies	m_CompilerForceUsing;
	ObjectNode *	m_PrecompiledHeader;
	AString			m_ObjExtensionOverride;
	bool			m_DeoptimizeWritableFiles;
	bool			m_DeoptimizeWritableFilesWithToken;
};


#line 67 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/ObjectListNode.h"
#line 20 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionObjectList.cpp"




FunctionObjectList::FunctionObjectList()
: Function( "ObjectList" )
{
}



 bool FunctionObjectList::AcceptsHeader() const
{
	return true;
}



 bool FunctionObjectList::NeedsHeader() const
{
	return true;
}



 bool FunctionObjectList::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * compiler;
	const BFFVariable * compilerOptions;
	AStackString<> compilerOptionsDeoptimized;
	const BFFVariable * compilerOutputPath;
	const BFFVariable * compilerOutputExtension;
	if ( !GetString( funcStartIter, compiler, ".Compiler", true ) ||
		 !GetString( funcStartIter, compilerOptions, ".CompilerOptions", true ) ||
		 !GetString( funcStartIter, compilerOptionsDeoptimized, ".CompilerOptionsDeoptimized", false ) ||
		 !GetString( funcStartIter, compilerOutputPath, ".CompilerOutputPath", true ) ||
		 !GetString( funcStartIter, compilerOutputExtension, ".CompilerOutputExtension", false ) )
	{
		return false;
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	CompilerNode * compilerNode = nullptr;
	if ( !FunctionObjectList::GetCompilerNode( funcStartIter, compiler->GetString(), compilerNode ) )
	{
		return false; 
	}

	
	uint32_t objFlags = ObjectNode::DetermineFlags( compilerNode, compilerOptions->GetString() );
	if ( ( objFlags & ObjectNode::FLAG_MSVC ) && ( objFlags & ObjectNode::FLAG_CREATING_PCH ) )
	{
		
		Error::Error_1303_PCHCreateOptionOnlyAllowedOnPCH( funcStartIter, this, "/Yc", "CompilerOptions" );
		return false;
	}

	
	{
		const AString & args = compilerOptions->GetString();
		bool hasInputToken = ( args.Find( "%1" ) || args.Find( "\"%1\"" ) );
		if ( hasInputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".CompilerOptions", "%1" );
			return false;
		}
		bool hasOutputToken = ( args.Find( "%2" ) || args.Find( "\"%2\"" ) );
		if ( hasOutputToken == false )
		{
			Error::Error_1106_MissingRequiredToken( funcStartIter, this, ".CompilerOptions", "%2" );
			return false;
		}
	}

	
	Dependencies compilerForceUsing;
	if ( !GetNodeList( funcStartIter, ".CompilerForceUsing", compilerForceUsing, false ) )
	{
		return false; 
	}

	
	Dependencies preBuildDependencies;
	if ( !GetNodeList( funcStartIter, ".PreBuildDependencies", preBuildDependencies, false ) )
	{
		return false; 
	}

	
	bool deoptimizeWritableFiles = false;
	bool deoptimizeWritableFilesWithToken = false;
	if ( !GetBool( funcStartIter, deoptimizeWritableFiles, ".DeoptimizeWritableFiles", false, false ) )
	{
		return false; 
	}
	if ( !GetBool( funcStartIter, deoptimizeWritableFilesWithToken, ".DeoptimizeWritableFilesWithToken", false, false ) )
	{
		return false; 
	}
	if ( ( deoptimizeWritableFiles || deoptimizeWritableFilesWithToken ) && compilerOptionsDeoptimized.IsEmpty() )
	{
		Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".CompilerOptionsDeoptimized" ) );
		return false;
	}

	
	ObjectNode * precompiledHeaderNode = nullptr;
	if ( !GetPrecompiledHeaderNode( funcStartIter, compilerNode, objFlags, compilerOptions, compilerForceUsing, precompiledHeaderNode, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken ) )
	{
		return false; 
	}

	Dependencies staticDeps( 32, true );
	if ( !GetInputs( funcStartIter, staticDeps ) )
	{
		return false; 
	}

	if ( staticDeps.IsEmpty() )
	{
		Error::Error_1006_NothingToBuild( funcStartIter, this );
		return false;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AliasForFunction.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "m_AliasForFunction.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionObjectList.cpp", 148 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( ng.FindNode( m_AliasForFunction ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, m_AliasForFunction );
		return false;
	}

	
	ObjectListNode * o = ng.CreateObjectListNode( m_AliasForFunction,
												  staticDeps,
												  compilerNode,
												  compilerOptions->GetString(),
												  compilerOptionsDeoptimized,
												  compilerOutputPath->GetString(),
												  precompiledHeaderNode,
												  compilerForceUsing,
												  preBuildDependencies,
												  deoptimizeWritableFiles,
												  deoptimizeWritableFilesWithToken );
	if ( compilerOutputExtension )
	{
		o->m_ObjExtensionOverride = compilerOutputExtension->GetString();
	}

	return true;
}



bool FunctionObjectList::GetCompilerNode( const BFFIterator & iter, const AString & compiler, CompilerNode * & compilerNode ) const
{
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * cn = ng.FindNode( compiler );
	compilerNode = nullptr;
	if ( cn != nullptr )
	{
		if ( cn->GetType() == Node::ALIAS_NODE )
		{
			AliasNode * an = cn->CastTo< AliasNode >();
			cn = an->GetAliasedNodes()[ 0 ].GetNode();
		}
		if ( cn->GetType() != Node::COMPILER_NODE )
		{
			Error::Error_1102_UnexpectedType( iter, this, "Compiler", cn->GetName(), cn->GetType(), Node::COMPILER_NODE );
			return false;
		}
		compilerNode = cn->CastTo< CompilerNode >();
	}
	else
	{
		
		
		const bool allowDistribution = false;
		compilerNode = ng.CreateCompilerNode( compiler, Dependencies( 0, false ), allowDistribution );
	}

	return true;
}



bool FunctionObjectList::GetPrecompiledHeaderNode( const BFFIterator & iter,
												   CompilerNode * compilerNode,
												   uint32_t objFlags,
												   const BFFVariable * compilerOptions,
												   const Dependencies & compilerForceUsing,
												   ObjectNode * & precompiledHeaderNode,
												   bool deoptimizeWritableFiles,
												   bool deoptimizeWritableFilesWithToken ) const
{
	const BFFVariable * pchInputFile = nullptr;
	const BFFVariable * pchOutputFile = nullptr;
	const BFFVariable * pchOptions = nullptr;
	if ( !GetString( iter, pchInputFile, ".PCHInputFile" ) ||
		 !GetString( iter, pchOutputFile, ".PCHOutputFile" ) ||
		 !GetString( iter, pchOptions, ".PCHOptions" ) )
	{
		return false;
	}

	precompiledHeaderNode = nullptr;

	if ( pchInputFile ) 
	{
		if ( !pchOutputFile || !pchOptions )
		{
			Error::Error_1300_MissingPCHArgs( iter, this );
			return false;
		}

		AStackString<> pchOptionsDeoptimized;
		if ( !GetString( iter, pchOptionsDeoptimized, ".PCHOptionsDeoptimized", ( deoptimizeWritableFiles || deoptimizeWritableFilesWithToken ) ) )
		{
			return false;
		}

		NodeGraph & ng = FBuild::Get().GetDependencyGraph();
		Node * pchInputNode = ng.FindNode( pchInputFile->GetString() );
		if ( pchInputNode )
		{
			
			if ( pchInputNode->IsAFile() == false )
			{
				Error::Error_1103_NotAFile( iter, this, "PCHInputFile", pchInputNode->GetName(), pchInputNode->GetType() );
				return false;
			}
		}
		else
		{
			
			pchInputNode = ng.CreateFileNode( pchInputFile->GetString() );
		}

		if ( ng.FindNode( pchOutputFile->GetString() ) )
		{
			Error::Error_1301_AlreadyDefinedPCH( iter, this, pchOutputFile->GetString().Get() );
			return false;
		}

		uint32_t pchFlags = ObjectNode::DetermineFlags( compilerNode, pchOptions->GetString() );
		if ( pchFlags & ObjectNode::FLAG_MSVC )
		{
			

			
			if ( !( pchFlags & ObjectNode::FLAG_CREATING_PCH ) )
			{
				Error::Error_1302_MissingPCHCompilerOption( iter, this, "/Yc", "PCHOptions" );
				return false;
			}
			
			if ( pchOptions->GetString().Find( "/Fp" ) == nullptr )
			{
				Error::Error_1302_MissingPCHCompilerOption( iter, this, "/Fp", "PCHOptions" );
				return false;
			}
			
			if ( pchOptions->GetString().Find( "/Fo" ) == nullptr )
			{
				Error::Error_1302_MissingPCHCompilerOption( iter, this, "/Fo", "PCHOptions" );
				return false;
			}

			
			if ( !( objFlags & ObjectNode::FLAG_USING_PCH ) )
			{
				Error::Error_1302_MissingPCHCompilerOption( iter, this, "/Yu", "CompilerOptions" );
				return false;
			}
			
			if ( compilerOptions->GetString().Find( "/Fp" ) == nullptr )
			{
				Error::Error_1302_MissingPCHCompilerOption( iter, this, "/Fp", "CompilerOptions" );
				return false;
			}
		}

		

		precompiledHeaderNode = ng.CreateObjectNode( pchOutputFile->GetString(),
													 pchInputNode,
													 compilerNode,
													 pchOptions->GetString(),
													 pchOptionsDeoptimized,
													 nullptr,
													 pchFlags,
													 compilerForceUsing,
													 deoptimizeWritableFiles,
													 deoptimizeWritableFilesWithToken );
	}

	return true;
}



bool FunctionObjectList::GetInputs( const BFFIterator & iter, Dependencies & inputs ) const
{
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	const BFFVariable * inputUnity = nullptr;
	if ( !GetString( iter, inputUnity, ".CompilerInputUnity" ) )
	{
		return false;
	}
	if ( inputUnity )
	{
		Node * n = ng.FindNode( inputUnity->GetString() );
		if ( n == nullptr )
		{
			Error::Error_1104_TargetNotDefined( iter, this, "CompilerInputUnity", inputUnity->GetString() );
			return false;
		}
		if ( n->GetType() != Node::UNITY_NODE )
		{
			Error::Error_1102_UnexpectedType( iter, this, "CompilerInputUnity", inputUnity->GetString(), n->GetType(), Node::UNITY_NODE );
			return false;
		}
		inputs.Append( Dependency( n ) );
	}

	
	const BFFVariable * inputPath = BFFStackFrame::GetVar( ".CompilerInputPath" );
	if ( inputPath )
	{
		
		const BFFVariable * patternVar = nullptr;
		if ( !GetString( iter, patternVar, ".CompilerInputPattern", false ) )
		{
			return false; 
		}
		AStackString<> defaultWildCard( "*.cpp" );
		const AString & pattern = patternVar ? patternVar->GetString() : defaultWildCard;

		
		bool recurse = true;
		if ( !GetBool( iter, recurse, ".CompilerInputPathRecurse", true, false ) )
		{
			return false; 
		}

		
		Array< AString > excludePaths;
		if ( !GetFolderPaths( iter, excludePaths, ".CompilerInputExcludePath", false ) )
		{
			return false; 
		}

        Array< AString > filesToExclude;
        if ( !GetStrings( iter, filesToExclude, ".CompilerInputExcludedFiles", false ) ) 
        {
            return false; 
        }
	    CleanFileNames( filesToExclude );

		
		Array< AString > inputPaths;
		if ( !GetFolderPaths( iter, inputPaths, ".CompilerInputPath", false ) )
		{
			return false; 
		}

		Dependencies dirNodes( inputPaths.GetSize() );
		if ( !GetDirectoryListNodeList( iter, inputPaths, excludePaths, filesToExclude, recurse, pattern, "CompilerInputPath", dirNodes ) )
		{
			return false; 
		}
		inputs.Append( dirNodes );
	}

	
	if ( !GetNodeList( iter, ".CompilerInputFiles", inputs, false ) )
	{
		
		return false;
	}

	return true;
}


#line 40 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionPrint.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionPrint.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionPrint.cpp"








FunctionPrint::FunctionPrint()
: Function( "Print" )
{
}



 bool FunctionPrint::AcceptsHeader() const
{
	return true;
}



 bool FunctionPrint::NeedsHeader() const
{
	return true;
}



 bool FunctionPrint::NeedsBody() const
{
	return false;
}


 bool FunctionPrint::ParseFunction( const BFFIterator & functionNameStart,
											   const BFFIterator * functionBodyStartToken, 
											   const BFFIterator * functionBodyStopToken,
											   const BFFIterator * functionHeaderStartToken,
											   const BFFIterator * functionHeaderStopToken ) const
{
	(void)functionNameStart;
	(void)functionBodyStartToken;
	(void)functionBodyStopToken;

	if ( functionHeaderStartToken && functionHeaderStopToken && 
		 ( functionHeaderStartToken->GetDistTo( *functionHeaderStopToken ) >= 1 ) )
	{
		BFFIterator start( *functionHeaderStartToken );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *start == BFFParser::BFF_FUNCTION_ARGS_OPEN ) ) { if ( AssertHandler::Failure( "*start == BFFParser::BFF_FUNCTION_ARGS_OPEN", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionPrint.cpp", 56 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		start++;
		start.SkipWhiteSpace();

		
		const char c = *start;
		if ( ( c != '"' ) && ( c != '\'' ) )
		{
			Error::Error_1001_MissingStringStartToken( start, this ); 
			return false;
		}

		
		BFFIterator stop( start );
		stop.SkipString( c );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stop.GetCurrent() <= functionHeaderStopToken->GetCurrent() ) ) { if ( AssertHandler::Failure( "stop.GetCurrent() <= functionHeaderStopToken->GetCurrent()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionPrint.cpp", 71 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

		
		AStackString< 1024 > tmp;

		start++; 
		if ( BFFParser::PerformVariableSubstitutions( start, stop, tmp ) == false )
		{
			return false; 
		}
		tmp += '\n';

		do { FLog::Build( "%s",tmp.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}

	return true;
}


#line 43 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionSettings.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionSettings.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionSettings.cpp"













 AString FunctionSettings::s_CachePath( 64 );



FunctionSettings::FunctionSettings()
: Function( "Settings" )
{
}



 bool FunctionSettings::IsUnique() const
{
	return true;
}



 bool FunctionSettings::Commit( const BFFIterator & funcStartIter ) const
{
	
	AStackString<> cachePluginDLL;
	if ( !GetString( funcStartIter, cachePluginDLL, ".CachePluginDLL" ) )
	{
		return false;
	}
	FBuild::Get().SetCachePluginDLL( cachePluginDLL );
	if ( !cachePluginDLL.IsEmpty() )
	{
		do { if ( FLog::ShowInfo() ) { FLog::Info( "CachePluginDLL: '%s'",cachePluginDLL.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}

	
	const BFFVariable * cachePathVar;
	if ( !GetString( funcStartIter, cachePathVar, ".CachePath" ) )
	{
		return false;
	}
	if ( cachePathVar )
	{
		s_CachePath = cachePathVar->GetString();

		
		if ( s_CachePath.IsEmpty() == false )
		{
			FBuild::Get().SetCachePath( s_CachePath );
		}
	}

	
	Array< AString > workerList;
	if ( !GetStrings( funcStartIter, workerList, ".Workers" ) )
	{
		return false;
	}
	if ( !workerList.IsEmpty() )
	{
		FBuild::Get().SetWorkerList( workerList );
	}

	
	Array< AString > environment;
	if ( !GetStrings( funcStartIter, environment, ".Environment" ) )
	{
		return false;
	}
	if ( !environment.IsEmpty() )
	{
		ProcessEnvironment( environment );
	}

	return true;
}



void FunctionSettings::ProcessEnvironment( const Array< AString > & envStrings ) const
{
	
	

	
	uint32_t size = 0;
	for ( uint32_t i=0; i<envStrings.GetSize(); ++i )
	{
		size += envStrings[ i ].GetLength() + 1; 
	}

	
	AutoPtr< char > envString( (char *)::AllocFileLine( size + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionSettings.cpp", 109 ) ); 

	
	AStackString<> libEnvVar;

	
	char * dst = envString.Get();
	for ( uint32_t i=0; i<envStrings.GetSize(); ++i )
	{
		if ( envStrings[ i ].BeginsWith( "LIB=" ) )
		{
			libEnvVar.Assign( envStrings[ i ].Get() + 4, envStrings[ i ].GetEnd() );
		}

		const uint32_t thisStringLen = envStrings[ i ].GetLength();
		AString::Copy( envStrings[ i ].Get(), dst, thisStringLen );
		dst += ( thisStringLen + 1 );
	}

	
	*dst = '\000';

	FBuild::Get().SetEnvironmentString( envString.Get(), size, libEnvVar );
}


#line 46 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionTest.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionTest.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionTest.cpp"






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/TestNode.h"


#pragma once













class TestNode : public FileNode
{
public:
	explicit TestNode( const AString & testOutput,
					   FileNode * testExecutable,
					   const AString & m_Arguments,
					   const AString & m_WorkingDir );
	virtual ~TestNode();

	static inline Node::Type GetType() { return Node::TEST_NODE; }

	virtual void Save( IOStream & stream ) const;
	static Node * Load( IOStream & stream );
private:
	virtual BuildResult DoBuild( Job * job );

	void EmitCompilationMessage( const char * workingDir ) const;

	FileNode * m_Executable;
	AString		m_Arguments;
	AString		m_WorkingDir;
};


#line 42 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/TestNode.h"
#line 14 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionTest.cpp"



FunctionTest::FunctionTest()
: Function( "Test" )
{
}



 bool FunctionTest::AcceptsHeader() const
{
	return true;
}



 bool FunctionTest::Commit( const BFFIterator & funcStartIter ) const
{
	
	const BFFVariable * outputV;
	const BFFVariable * executableV;
	const BFFVariable * argsV;
	const BFFVariable * workingDirV;
	if ( !GetString( funcStartIter, outputV,		".TestOutput", true ) ||
		 !GetString( funcStartIter, executableV,	".TestExecutable", true ) ||
		 !GetString( funcStartIter, argsV,			".TestArguments" ) ||
		 !GetString( funcStartIter, workingDirV,	".TestWorkingDir" ) )
	{
		return false;
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	if ( ng.FindNode( outputV->GetString() ) != nullptr )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, outputV->GetString() );
		return false;
	}

	Node * testExeNode = ng.FindNode( executableV->GetString() );
	if ( testExeNode == nullptr )
	{
		testExeNode = ng.CreateFileNode( executableV->GetString() );
	}
	if ( testExeNode->GetType() == Node::ALIAS_NODE )
	{
		AliasNode * an = testExeNode->CastTo< AliasNode >();
		testExeNode = an->GetAliasedNodes()[ 0 ].GetNode();
	}
	if ( testExeNode->IsAFile() == false )
	{
		Error::Error_1103_NotAFile( funcStartIter, this, "TestExecutable", testExeNode->GetName(), testExeNode->GetType() );
		return false;
	}

	
	const AString & arguments(	argsV ?			argsV->GetString()		: AString::GetEmpty() );
	const AString & workingDir( workingDirV ?	workingDirV->GetString(): AString::GetEmpty() );

	
	Node * outputNode = ng.CreateTestNode( outputV->GetString(), 
										   (FileNode *)testExeNode,
										   arguments,
										   workingDir );
	
	return ProcessAlias( funcStartIter, outputNode );
}


#line 49 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionUnity.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUnity.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUnity.cpp"




#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/UnityNode.h"


#pragma once











class BFFIterator;
class DirectoryListNode;
class Function;



class UnityNode : public Node
{
	private: friend class UnityNode_ReflectionInfo; static const ReflectionInfo * s_ReflectionInfo; public: static const ReflectionInfo * GetReflectionInfoS(); virtual const ReflectionInfo * GetReflectionInfoV() const override;
public:
	friend class FunctionUnity;

	explicit UnityNode();
	virtual bool Initialize( const BFFIterator & iter, const Function * function );
	virtual ~UnityNode();

	static inline Node::Type GetType() { return Node::UNITY_NODE; }

	inline const Array< AString > & GetUnityFileNames() const { return m_UnityFileNames; }
	inline const Array< AString > & GetIsolatedFileNames() const { return m_IsolatedFiles; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;
private:
	virtual BuildResult DoBuild( Job * job );

	virtual bool IsAFile() const { return false; }

	void GetFiles( Array< FileIO::FileInfo * > & files );

	
	Array< AString > m_InputPaths;
	bool m_InputPathRecurse;
	AString m_InputPattern;
	Array< AString > m_Files;
	AString m_OutputPath;
	AString m_OutputPattern;
	uint32_t m_NumUnityFilesToCreate;
	AString m_PrecompiledHeader;
	Array< AString > m_PathsToExclude;
	Array< AString > m_FilesToExclude;
	bool m_IsolateWritableFiles;
	uint32_t m_MaxIsolatedFiles;
	Array< AString > m_ExcludePatterns;
	Array< AString > m_IsolatedFiles;

	
	Array< AString > m_UnityFileNames;
	Array< FileIO::FileInfo > m_FilesInfo;
};


#line 68 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/UnityNode.h"
#line 12 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUnity.cpp"



class UnityNode;



FunctionUnity::FunctionUnity()
: Function( "Unity" )
{
}



 bool FunctionUnity::AcceptsHeader() const
{
	return true;
}



 bool FunctionUnity::NeedsHeader() const
{
	return true;
}



 bool FunctionUnity::Commit( const BFFIterator & funcStartIter ) const
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AliasForFunction.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "m_AliasForFunction.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUnity.cpp", 43 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	if ( ng.FindNode( m_AliasForFunction ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, m_AliasForFunction );
		return false;
	}

	UnityNode * un = ng.CreateUnityNode( m_AliasForFunction );

	if ( !PopulateProperties( funcStartIter, un ) )
	{
		return false;
	}

	un->Initialize( funcStartIter, this );

	return true;
}


#line 52 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionUsing.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUsing.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUsing.cpp"









FunctionUsing::FunctionUsing()
: Function( "Using" )
{
}



 bool FunctionUsing::AcceptsHeader() const
{
	return true;
}



 bool FunctionUsing::NeedsHeader() const
{
	return true;
}



 bool FunctionUsing::NeedsBody() const
{
	return false;
}


 bool FunctionUsing::ParseFunction( const BFFIterator & functionNameStart,
											   const BFFIterator * functionBodyStartToken, 
											   const BFFIterator * functionBodyStopToken,
											   const BFFIterator * functionHeaderStartToken,
											   const BFFIterator * functionHeaderStopToken ) const
{
	(void)functionNameStart;
	(void)functionBodyStartToken;
	(void)functionBodyStopToken;

	if ( functionHeaderStartToken && functionHeaderStopToken && 
		 ( functionHeaderStartToken->GetDistTo( *functionHeaderStopToken ) >= 1 ) )
	{
		BFFIterator start( *functionHeaderStartToken );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *start == BFFParser::BFF_FUNCTION_ARGS_OPEN ) ) { if ( AssertHandler::Failure( "*start == BFFParser::BFF_FUNCTION_ARGS_OPEN", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUsing.cpp", 57 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		start++;
		start.SkipWhiteSpace();

		
		const char c = *start;
		if ( c != BFFParser::BFF_DECLARE_VAR_INTERNAL )
		{
			Error::Error_1007_ExpectedVariable( start, this ); 
			return false;
		}

		
		BFFIterator stop( start );
		stop++;
		stop.SkipVariableName();
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stop.GetCurrent() <= functionHeaderStopToken->GetCurrent() ) ) { if ( AssertHandler::Failure( "stop.GetCurrent() <= functionHeaderStopToken->GetCurrent()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUsing.cpp", 73 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		AStackString<> varName( start.GetCurrent(), stop.GetCurrent() );

		
		const BFFVariable * v = BFFStackFrame::GetVar( varName );
		if ( v == nullptr )
		{
			Error::Error_1009_UnknownVariable( start, this );
			return false;
		}
		if ( v->IsStruct() == false )
		{
			Error::Error_1008_VariableOfWrongType( start, this,
												   BFFVariable::VAR_STRUCT,
												   v->GetType() );
			return false;
		}

		
		BFFStackFrame * frame = BFFStackFrame::GetCurrent()->GetParent();
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( frame ) ) { if ( AssertHandler::Failure( "frame", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionUsing.cpp", 93 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		const Array< const BFFVariable * > & members = v->GetStructMembers();
		for ( const BFFVariable ** it = members.Begin();
			  it != members.End();
			  ++it )
		{
			const BFFVariable * member = ( *it );
			BFFStackFrame::SetVar( member, frame );
		}
	}

	return true;
}


#line 55 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/Functions/FunctionVCXProject.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionVCXProject.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionVCXProject.cpp"








#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/VCXProjectNode.h"


#pragma once















class DirectoryListNode;



class VCXProjectNode : public FileNode
{
public:
	explicit VCXProjectNode( const AString & projectOutput,
							 const Array< AString > & projectBasePaths,
							 const Dependencies & paths,
							 const Array< AString > & pathsToExclude,
							 const Array< AString > & allowedFileExtensions,
							 const Array< AString > & files,
							 const Array< AString > & filesToExclude,
							 const AString & rootNamespace,
							 const AString & projectGuid,
							 const AString & defaultLanguage,
							 const AString & applicationEnvironment,
							 const Array< VSProjectConfig > & configs,
							 const Array< VSProjectFileType > & fileTypes,
							 const Array< AString > & references,
							 const Array< AString > & projectReferences );
	virtual ~VCXProjectNode();

	static inline Node::Type GetType() { return Node::VCXPROJECT_NODE; }

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;
private:
	virtual BuildResult DoBuild( Job * job );

	bool Save( const AString & content, const AString & fileName ) const;

	
	void GetFiles( Array< FileIO::FileInfo * > & files ) const;

	void AddFile( VSProjectGenerator & pg, const AString & fileName ) const;

	Array< AString >	m_ProjectBasePaths;
	Array< AString >	m_PathsToExclude;
	Array< AString >	m_AllowedFileExtensions;
	Array< AString >	m_Files;
	Array< AString >	m_FilesToExclude;
	AString				m_RootNamespace;
	AString				m_ProjectGuid;
	AString				m_DefaultLanguage;
	AString				m_ApplicationEnvironment;
	Array< VSProjectConfig > m_Configs;
	Array< VSProjectFileType > m_FileTypes;
	Array< AString >	m_References;
	Array< AString >	m_ProjectReferences;
};


#line 74 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/VCXProjectNode.h"
#line 16 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionVCXProject.cpp"






FunctionVCXProject::FunctionVCXProject()
: Function( "VCXProject" )
{
}



 bool FunctionVCXProject::AcceptsHeader() const
{
	return true;
}



 bool FunctionVCXProject::Commit( const BFFIterator & funcStartIter ) const
{
	
	AStackString<> projectOutput;
	AStackString<> rootNamespace;
	AStackString<> projectGuid;
	AStackString<> defaultLanguage;
	AStackString<> applicationEnvironment;
	if ( !GetString( funcStartIter, projectOutput,		".ProjectOutput", true ) ||
		 !GetString( funcStartIter, rootNamespace,		".RootNamespace", false ) ||
		 !GetString( funcStartIter, projectGuid,		".ProjectGuid", false ) ||
		 !GetString( funcStartIter, defaultLanguage,	".DefaultLanguage", false ) ||
		 !GetString( funcStartIter, applicationEnvironment,	".ApplicationEnvironment", false ) )
	{
		return false;
	}

	
	Array< AString > inputPaths;
	Array< AString > inputPathsExclude;
	if ( !GetStrings( funcStartIter, inputPaths,		".ProjectInputPaths", false ) ||
		 !GetStrings( funcStartIter, inputPathsExclude,	".ProjectInputPathsExclude", false ) )
	{
		return false;
	}

	
	Array< AString > basePaths;
	if ( !GetStrings( funcStartIter, basePaths,	".ProjectBasePath", false ) )
	{
		return false;
	}
	CleanFolderPaths( basePaths );

	
	Array< AString > references;
	Array< AString > projectReferences;
	if ( !GetStrings( funcStartIter, references,		".ProjectReferences", false ) ||
		 !GetStrings( funcStartIter, projectReferences,	".ProjectProjectReferences", false ) )
	{
		return false;
	}

	
	Array< AString > allowedFileExtensions( 8, true );
	if ( !GetStrings( funcStartIter, allowedFileExtensions, ".ProjectAllowedFileExtensions", false ) )
	{
		return true;
	}
	if ( allowedFileExtensions.IsEmpty() )
	{
		const char * extensions[] = { ".cpp", ".hpp", ".cxx",".hxx",".c",".h",".cc",".hh",
									  ".cp",".hp",".cs",".inl",".bff",".rc",".resx",".m",".mm",
									  ".cu",
									  nullptr };
		AStackString<> tmp;
		const char ** item = extensions;
		while ( *item )
		{
			tmp.Assign( *item );
			allowedFileExtensions.Append( tmp );
			++item;
		}
	}

	
	Array< AString > files( 8, true );
	Array< AString > filesToExclude( 8, true );	
	if ( !GetStrings( funcStartIter, files,				".ProjectFiles", false ) ||
 		 !GetStrings( funcStartIter, filesToExclude,	".ProjectFilesToExclude", false ) )
	{
		return false;
	}

	
	Array< VSProjectFileType > fileTypes;
	const BFFVariable * projectFileTypes = BFFStackFrame::GetVar( ".ProjectFileTypes" );
	if ( projectFileTypes )
	{
		if ( projectFileTypes->IsArrayOfStructs() == false )
		{
			Error::Error_1050_PropertyMustBeOfType( funcStartIter, this, ".ProjectFileTypes", projectFileTypes->GetType(), BFFVariable::VAR_ARRAY_OF_STRUCTS );
			return false;
		}

		const Array< const BFFVariable * > & structs = projectFileTypes->GetArrayOfStructs();
		const BFFVariable * const * end = structs.End();
		for ( const BFFVariable ** it = structs.Begin(); it != end; ++it )
		{
			const BFFVariable * s = *it;

			VSProjectFileType ft;

			
			if ( !GetStringFromStruct( s, ".FileType",	ft.m_FileType ) )
			{
				
				Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".FileType" ) );
				return false;
			}

			
			if ( !GetStringFromStruct( s, ".Pattern",	ft.m_Pattern ) )
			{
				
				Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".Pattern" ) );
				return false;
			}

			fileTypes.Append( ft );
		}
	}

	
	CleanFolderPaths( inputPaths );			
	CleanFolderPaths( inputPathsExclude );	
	CleanFilePaths( files );				

	
	VSProjectConfig baseConfig;

	
	if ( !GetString( funcStartIter, baseConfig.m_BuildCommand,	".ProjectBuildCommand", false ) ||
		 !GetString( funcStartIter, baseConfig.m_RebuildCommand,".ProjectRebuildCommand", false ) ||
		 !GetString( funcStartIter, baseConfig.m_CleanCommand,	".ProjectCleanCommand", false ) ||
		 !GetString( funcStartIter, baseConfig.m_Output,		".Output", false ) ||
		 !GetString( funcStartIter, baseConfig.m_PreprocessorDefinitions,	".PreprocessorDefinitions", false ) ||
		 !GetString( funcStartIter, baseConfig.m_IncludeSearchPath,		".IncludeSearchPath", false ) ||
		 !GetString( funcStartIter, baseConfig.m_ForcedIncludes,		".ForcedIncludes", false ) ||
		 !GetString( funcStartIter, baseConfig.m_AssemblySearchPath,	".AssemblySearchPath", false ) ||
		 !GetString( funcStartIter, baseConfig.m_ForcedUsingAssemblies,	".ForcedUsingAssemblies", false ) ||
		 !GetString( funcStartIter, baseConfig.m_AdditionalOptions,		".AdditionalOptions", false ) ||
		 !GetString( funcStartIter, baseConfig.m_OutputDirectory,		".OutputDirectory", false ) ||
		 !GetString( funcStartIter, baseConfig.m_IntermediateDirectory,	".IntermediateDirectory", false ) ||
		 !GetString( funcStartIter, baseConfig.m_Xbox360DebuggerCommand,".Xbox360DebuggerCommand", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LayoutDir,				".LayoutDir", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LayoutExtensionFilter,	".LayoutExtensionFilter", false ) ||
		 !GetString( funcStartIter, baseConfig.m_DebuggerFlavor,		".DebuggerFlavor", false ) ||
		 !GetString( funcStartIter, baseConfig.m_AumidOverride,			".AumidOverride", false ) ||
		 !GetString( funcStartIter, baseConfig.m_PlatformToolset,		".PlatformToolset", false ) ||
		 !GetString( funcStartIter, baseConfig.m_DeploymentType,		".DeploymentType", false ) ||
		 !GetString( funcStartIter, baseConfig.m_DeploymentFiles,		".DeploymentFiles", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LocalDebuggerCommandArguments,	".LocalDebuggerCommandArguments", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LocalDebuggerWorkingDirectory,	".LocalDebuggerWorkingDirectory", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LocalDebuggerCommand,			".LocalDebuggerCommand", false ) ||
		 !GetString( funcStartIter, baseConfig.m_LocalDebuggerEnvironment,		".LocalDebuggerEnvironment", false ) )
	{
		return false;
	}

	
	Array< VSProjectConfig > configs( 16, true );

	const BFFVariable * projectConfigs = BFFStackFrame::GetVar( ".ProjectConfigs" );
	if ( projectConfigs )
	{
		if ( projectConfigs->IsArrayOfStructs() == false )
		{
			Error::Error_1050_PropertyMustBeOfType( funcStartIter, this, ".ProjectConfigs", projectConfigs->GetType(), BFFVariable::VAR_ARRAY_OF_STRUCTS );
			return false;
		}

		const Array< const BFFVariable * > & structs = projectConfigs->GetArrayOfStructs();
		const BFFVariable * const * end = structs.End();
		for ( const BFFVariable ** it = structs.Begin(); it != end; ++it )
		{
			const BFFVariable * s = *it;

			
			VSProjectConfig newConfig( baseConfig );

			
			if ( !GetStringFromStruct( s, ".Platform",	newConfig.m_Platform ) )
			{
				
				Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".Platform" ) );
				return false;
			}

			
			if ( !GetStringFromStruct( s, ".Config",	newConfig.m_Config ) )
			{
				
				Error::Error_1101_MissingProperty( funcStartIter, this, AStackString<>( ".Config" ) );
				return false;
			}

			GetStringFromStruct( s, ".ProjectBuildCommand",		newConfig.m_BuildCommand );
			GetStringFromStruct( s, ".ProjectRebuildCommand",	newConfig.m_RebuildCommand );
			GetStringFromStruct( s, ".ProjectCleanCommand",		newConfig.m_CleanCommand );
			GetStringFromStruct( s, ".Output",					newConfig.m_Output );
			GetStringFromStruct( s, ".PreprocessorDefinitions",	newConfig.m_PreprocessorDefinitions );
			GetStringFromStruct( s, ".IncludeSearchPath",		newConfig.m_IncludeSearchPath );
			GetStringFromStruct( s, ".ForcedIncludes",			newConfig.m_ForcedIncludes );
			GetStringFromStruct( s, ".AssemblySearchPath",		newConfig.m_AssemblySearchPath );
			GetStringFromStruct( s, ".ForcedUsingAssemblies",	newConfig.m_ForcedUsingAssemblies );
			GetStringFromStruct( s, ".AdditionalOptions",		newConfig.m_AdditionalOptions );
			GetStringFromStruct( s, ".OutputDirectory",			newConfig.m_OutputDirectory );
			GetStringFromStruct( s, ".IntermediateDirectory",	newConfig.m_IntermediateDirectory );
		 	GetStringFromStruct( s, ".LayoutDir",				newConfig.m_LayoutDir );
			GetStringFromStruct( s, ".LayoutExtensionFilter",	newConfig.m_LayoutExtensionFilter );
			GetStringFromStruct( s, ".Xbox360DebuggerCommand",	newConfig.m_Xbox360DebuggerCommand );
			GetStringFromStruct( s, ".DebuggerFlavor",			newConfig.m_DebuggerFlavor );
			GetStringFromStruct( s, ".AumidOverride",			newConfig.m_AumidOverride );
			GetStringFromStruct( s, ".PlatformToolset",			newConfig.m_PlatformToolset );
			GetStringFromStruct( s, ".DeploymentType",			newConfig.m_DeploymentType );
			GetStringFromStruct( s, ".DeploymentFiles",			newConfig.m_DeploymentFiles );
			GetStringFromStruct( s, ".LocalDebuggerCommandArguments",	newConfig.m_LocalDebuggerCommandArguments );
			GetStringFromStruct( s, ".LocalDebuggerWorkingDirectory",	newConfig.m_LocalDebuggerWorkingDirectory );
			GetStringFromStruct( s, ".LocalDebuggerCommand",			newConfig.m_LocalDebuggerCommand );
			GetStringFromStruct( s, ".LocalDebuggerEnvironment",		newConfig.m_LocalDebuggerEnvironment );

			configs.Append( newConfig );
		}
	}
	else
	{
		

		
		VSProjectConfig config( baseConfig );

		
		config.m_Platform	= "Win32";
		config.m_Config		= "Debug";
		configs.Append( config );
		config.m_Config		= "Release";
		configs.Append( config );
		config.m_Platform	= "x64";
		configs.Append( config );
		config.m_Config		= "Debug";
		configs.Append( config );
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	AStackString<> inputPattern( "*" );
	Dependencies dirNodes( inputPaths.GetSize() );
	if ( !GetDirectoryListNodeList( funcStartIter, inputPaths, Array< AString >(), Array< AString >(), true, inputPattern, "ProjectInputPaths", dirNodes ) )
	{
		return false; 
	}

	
	if ( ng.FindNode( projectOutput ) )
	{
		Error::Error_1100_AlreadyDefined( funcStartIter, this, projectOutput );
		return false;
	}

	VCXProjectNode * pn = ng.CreateVCXProjectNode( projectOutput,
												   basePaths,
												   dirNodes,
												   inputPathsExclude, 
												   allowedFileExtensions,
												   files,
												   filesToExclude,
												   rootNamespace,
												   projectGuid,
												   defaultLanguage,
												   applicationEnvironment,
												   configs,
												   fileTypes,
												   references,
												   projectReferences );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( pn ) ) { if ( AssertHandler::Failure( "pn", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\Functions\\FunctionVCXProject.cpp", 303 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	return ProcessAlias( funcStartIter, pn );
}



bool FunctionVCXProject::GetStringFromStruct( const BFFVariable * s, const char * name, AString & result ) const
{
	const Array< const BFFVariable * > & members = s->GetStructMembers();
	const BFFVariable * const * end = members.End();
	for ( const BFFVariable ** it = members.Begin(); it != end; ++it )
	{
		const BFFVariable * v = *it;
		if ( v->IsString() == false )
		{
			continue; 
		}
		if ( v->GetName() == name )
		{
			result = v->GetString();
			return true; 
		}
	}
	return false; 
}


#line 58 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/BFFIterator.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFIterator.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFIterator.cpp"






void BFFIterator::operator = ( const BFFIterator & iter )
{
	m_Pos = iter.m_Pos;
	m_MinPos = iter.m_MinPos;
	m_MaxPos = iter.m_MaxPos;
	m_FileName = iter.m_FileName;
	m_FileTimeStamp = iter.m_FileTimeStamp;
}



void BFFIterator::SkipWhiteSpace()
{
	while ( !IsAtEnd() )
	{
		if ( IsAtWhitespace() )
		{
			(*this)++;
		}
		else
		{
			break;
		}
	}
}



void BFFIterator::SkipComment()
{
	
	while ( !IsAtEnd() )
	{
		bool atLineEnd = (*m_Pos == '\n' );
		(*this)++;
		if ( atLineEnd )
		{
			break;
		}
	}
}



void BFFIterator::SkipString( char quote )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *m_Pos == quote ) ) { if ( AssertHandler::Failure( "*m_Pos == quote", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFIterator.cpp", 60 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	while ( !IsAtEnd() )
	{
		m_Pos++;

		const char c = *m_Pos;

		
		if ( c == '^' )
		{
			m_Pos++; 
			continue;
		}

		
		if ( *m_Pos == quote )
		{
			return;
		}
	}
}



void BFFIterator::SkipWhiteSpaceAndComments()
{
	SkipWhiteSpace();
	while ( IsAtComment() )
	{
		SkipComment();
		SkipWhiteSpace();
	}
}



void BFFIterator::SkipVariableName()
{
	while ( !IsAtEnd() )
	{
		if ( !IsAtValidVariableNameCharacter() )
		{
			return;
		}

		
		(*this)++;
	}
}



void BFFIterator::SkipFunctionName()
{
	while ( !IsAtEnd() )
	{
		if ( IsAtValidFunctionNameCharacter() )
		{
			
			(*this)++;
			continue;
		}

		break; 
	}
}




void BFFIterator::SkipDirectiveName()
{
	while ( !IsAtEnd() )
	{
		if ( IsAtValidDirectiveNameCharacter() )
		{
			
			(*this)++;
			continue;
		}

		break; 
	}
}



bool BFFIterator::ParseToNext( char c )
{
	if ( IsAtEnd() )
	{
		return false;
	}

	char prev = '\000';
	do
	{
		(*this)++;
		if ( *m_Pos == c )
		{
			if ( prev != '^' )
			{
				return true;
			}
		}
		prev = *m_Pos;
	} while ( !IsAtEnd() );

	return false;
}



bool BFFIterator::ParseToMatchingBrace( char openBrace, char closeBrace )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *m_Pos == openBrace ) ) { if ( AssertHandler::Failure( "*m_Pos == openBrace", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFIterator.cpp", 176 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	do
	{
		m_Pos++;
		SkipWhiteSpaceAndComments();

		
		if ( *m_Pos == openBrace )
		{
			if ( ParseToMatchingBrace( openBrace, closeBrace ) == false )
			{
				return false;
			}
			continue;
		}

		
		if ( ( *m_Pos == '\'' ) || ( *m_Pos == '"' ) )
		{
			SkipString( *m_Pos );
		}

		
		if ( *m_Pos == closeBrace )
		{
			return true;
		}

		

	} while ( !IsAtEnd() );

	return false;
}



bool BFFIterator::IsAtValidVariableNameCharacter() const
{
	const char c = *m_Pos;
	return ( ( ( c >= 'a' ) && ( c <= 'z' ) ) ||
			 ( ( c >= 'A' ) && ( c <= 'Z' ) ) ||
			 ( ( c >= '0' ) && ( c <= '9' ) ) ||
			 ( c == '_' ) );
}



bool BFFIterator::IsAtValidFunctionNameCharacter() const
{
	const char c = *m_Pos;
	return ( ( ( c >= 'a' ) && ( c <= 'z' ) ) ||
			 ( ( c >= 'A' ) && ( c <= 'Z' ) ) ||
			 ( ( c >= '0' ) && ( c <= '9' ) ) ||
			 ( c == '_' ) );
}



bool BFFIterator::IsAtValidDirectiveNameCharacter() const
{
	const char c = *m_Pos;
	return ( ( c >= 'a' ) && ( c <= 'z' ) );
}



bool BFFIterator::IsAtWhitespace() const
{
	char c = *m_Pos;
	return ( ( c == '\n' ) ||
			 ( c == '\r' ) ||
			 ( c == '\t' ) ||
			 ( c == ' ' ) );
}



bool BFFIterator::IsAtComment() const
{
	const char c = *m_Pos;
	if ( c == BFFParser::BFF_COMMENT_SEMICOLON )
	{
		return true;
	}
	if ( ( c == BFFParser::BFF_COMMENT_SLASH ) && ( *( m_Pos + 1  ) == BFFParser::BFF_COMMENT_SLASH ) )
	{
		return true;
	}
	return false;
}



void BFFIterator::GetPosInfo( uint32_t & line,
							  uint32_t & column,
							  const char * & lineStart ) const
{
	
	
	const char * p = m_MinPos;
	lineStart = m_MinPos;
	line = 1;
	while ( p < m_Pos ) 
	{
		bool atLineEnd = ( *p == '\n' );
		p++;
		if ( atLineEnd )
		{
			lineStart = p;
			line++;
		}
	}
	column = (uint32_t)( ( p - lineStart ) + 1 );
}


#line 61 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/BFFParser.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"


















#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Tracing/Tracing.h"


#pragma once










	
	



#line 20 "c:\\Users\\Franta\\p4\\Code\\Core/Tracing/Tracing.h"





class Tracing
{
public:
	static inline void DoNothing() {}

	
		static void DebugSpam( const char * message );
		static void DebugSpamFormat( const char * fmtString, ... );
		static void Warning( const char * file, uint32_t line, const char * message );
		static void WarningFormat( const char * file, uint32_t line, const char * fmtString, ... );
	#line 36 "c:\\Users\\Franta\\p4\\Code\\Core/Tracing/Tracing.h"
	static void Output( const char * message );
	static void OutputFormat( const char * fmtString, ... );
	static void FatalError( const char * message );
	static void FatalErrorFormat( const char * fmtString, ... );

	typedef bool Callback( const char * mesage );
	static void SetCallbackDebugSpam( Callback callback );
	static void SetCallbackOutput( Callback callback );

private:
	static Callback * m_CallbackDebugSpam;
	static Callback * m_CallbackOutput;
};


#line 52 "c:\\Users\\Franta\\p4\\Code\\Core/Tracing/Tracing.h"
#line 26 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"





 uint32_t BFFParser::s_Depth( 0 );
 uint32_t BFFParser::s_IfDepth( 0 );



BFFParser::BFFParser()
: m_SeenAVariable( false )
{
	++s_Depth;
}



BFFParser::~BFFParser()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_Depth > 0 ) ) { if ( AssertHandler::Failure( "s_Depth > 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 46 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	--s_Depth;
}



bool BFFParser::Parse( const char * dataWithSentinel, 
					   uint32_t sizeExcludingSentinel, 
					   const char * fileName,
					   uint64_t fileTimeStamp,
					   bool pushStackFrame )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( dataWithSentinel[ sizeExcludingSentinel ] == '\000' ) ) { if ( AssertHandler::Failure( "dataWithSentinel[ sizeExcludingSentinel ] == '\\000'", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 59 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	if ( FBuild::IsValid() ) 
	{
		
		AStackString<> fileNameClean;
		NodeGraph::CleanPath( AStackString<>( fileName ), fileNameClean );
		FBuild::Get().GetDependencyGraph().AddUsedFile( fileNameClean, fileTimeStamp );
	}

	
	BFFIterator iter( dataWithSentinel, sizeExcludingSentinel, fileName, fileTimeStamp );
	if ( pushStackFrame )
	{
		BFFStackFrame stackFrame;
		return Parse( iter );
	}
	else
	{
		return Parse( iter );
	}
}



bool BFFParser::Parse( BFFIterator & iter )
{
	for (;;)
	{
		iter.SkipWhiteSpace();

		
		if ( iter.IsAtComment() )
		{
			iter.SkipComment();
			continue;
		}

		const char c = *iter;
		switch ( c )
		{
			case BFF_DECLARE_VAR_INTERNAL:
			{
				if ( ParseNamedVariableDeclaration( iter ) == false )
				{
					return false;
				}
				continue;
			}
			case BFF_VARIABLE_CONCATENATION:
			{
				
				if ( ParseUnnamedVariableConcatenation( iter ) == false )
				{
					return false;
				}
				continue;
			}
			case BFF_SCOPE_OPEN:
			{
				
				if ( ParseUnnamedScope( iter ) == false )
				{
					return false;
				}
				continue;
			}
			case BFF_PREPROCESSOR_START:
			{
				if ( ParsePreprocessorDirective( iter ) == false )
				{
					return false;
				}
				continue;
			}
			default:
			{
				if ( iter.IsAtValidFunctionNameCharacter() )
				{
					if ( ParseFunction( iter ) == false )
					{
						return false;
					}
					continue;
				}
			}
		}

		iter.SkipWhiteSpace();
		if ( iter.IsAtEnd() == false )
		{
			Error::Error_1010_UnknownConstruct( iter );
			return false;
		}

		break;  
	}

	return true;
}



bool BFFParser::ParseUnnamedVariableConcatenation( BFFIterator & iter )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *iter == BFF_VARIABLE_CONCATENATION ) ) { if ( AssertHandler::Failure( "*iter == BFF_VARIABLE_CONCATENATION", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 164 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( m_SeenAVariable == false )
	{
		Error::Error_1011_UnnamedConcatMustFollowAssignment( iter );
		return false;
	}

	return ParseVariableDeclaration( iter, m_LastVarNameStart, m_LastVarNameEnd );
}



bool BFFParser::ParseNamedVariableDeclaration( BFFIterator & iter )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *iter == BFF_DECLARE_VAR_INTERNAL ) ) { if ( AssertHandler::Failure( "*iter == BFF_DECLARE_VAR_INTERNAL", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 181 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_LastVarNameStart = iter; 
	iter++;

	
	if ( iter.IsAtEnd() )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}

	
	if ( iter.IsAtValidVariableNameCharacter() == false )
	{
		Error::Error_1013_UnexpectedCharInVariableName( iter, nullptr );
		return false;
	}

	
	iter.SkipVariableName();
	if ( iter.IsAtEnd() )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}
	m_LastVarNameEnd = iter;

	
	size_t varNameLen = m_LastVarNameStart.GetDistTo( m_LastVarNameEnd );
	if ( varNameLen > MAX_VARIABLE_NAME_LENGTH )
	{
		Error::Error_1014_VariableNameIsTooLong( iter, (uint32_t)varNameLen, (uint32_t)MAX_VARIABLE_NAME_LENGTH );
		return false;
	}

	
	iter.SkipWhiteSpaceAndComments();
	if ( iter.IsAtEnd() )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}

	return ParseVariableDeclaration( iter, m_LastVarNameStart, m_LastVarNameEnd );
}



bool BFFParser::ParseVariableDeclaration( BFFIterator & iter, const BFFIterator & varNameStart,
															  const BFFIterator & varNameEnd )
{
	m_SeenAVariable = true;

	
	BFFIterator operatorIter( iter );
	bool concatenation = false;
	if ( *iter == BFF_VARIABLE_ASSIGNMENT )
	{
		
	}
	else if ( *iter == BFF_VARIABLE_CONCATENATION )
	{
		
		concatenation = true;
	}
	else
	{
		Error::Error_1016_UnexepectedCharFollowingVariableName( iter );
		return false;
	}

	
	iter++;
	iter.SkipWhiteSpaceAndComments();
	if ( iter.IsAtEnd() )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}

	AStackString< 64 > varName( varNameStart.GetCurrent(), varNameEnd.GetCurrent() );

	char openToken = *iter;
	char closeToken = 0;
	bool ok = false;
	if ( ( openToken == '"' ) || ( openToken == '\'' ) )
	{
		closeToken = openToken;
		ok = true;
	}
	else if ( openToken == BFF_SCOPE_OPEN )
	{
		closeToken = BFF_SCOPE_CLOSE;
		ok = true;
	}
	else if ( openToken == BFF_STRUCT_OPEN )
	{
		closeToken = BFF_STRUCT_CLOSE;
		ok = true;
	}
	else if ( ( openToken >= '0' ) && ( openToken <= '9' ) )
	{
		if ( concatenation )
		{
			Error::Error_1027_CannotConcatenate( operatorIter, varName, BFFVariable::VAR_ANY, BFFVariable::VAR_INT );
			return false;
		}

		
		BFFIterator startIntValue( iter );
		while ( iter.IsAtEnd() == false )
		{
			iter++;
			if ( ( *iter < '0' ) || ( *iter > '9' ) )
			{
				break; 
			}
		}
		if ( startIntValue.GetDistTo( iter ) > 10 )
		{
			Error::Error_1018_IntegerValueCouldNotBeParsed( startIntValue );
			return false;
		}
		AStackString<> intAsString( startIntValue.GetCurrent(), iter.GetCurrent() );
		int i = 0;
		if ( sscanf( intAsString.Get(), "%i", &i ) != 1 )
		{
			Error::Error_1018_IntegerValueCouldNotBeParsed( startIntValue );
			return false;
		}
		return StoreVariableInt( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), i );
	}
	else if ( ( *iter == 't' ) || ( *iter == 'f' ) )
	{
		
		BFFIterator startBoolValue( iter );
		if ( iter.ParseToNext( 'e' ) == true )
		{
			iter++;
			if ( ( startBoolValue.GetDistTo( iter ) <= 5 ) )
			{
				AStackString<8> value( startBoolValue.GetCurrent(), iter.GetCurrent() );
				if ( value == "true" )
				{
					if ( concatenation )
					{
						Error::Error_1027_CannotConcatenate( operatorIter, varName, BFFVariable::VAR_ANY, BFFVariable::VAR_BOOL );
						return false;
					}
					return StoreVariableBool( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), true );
				}
				else if ( value == "false" )
				{
					if ( concatenation )
					{
						Error::Error_1027_CannotConcatenate( operatorIter, varName, BFFVariable::VAR_ANY, BFFVariable::VAR_BOOL );
						return false;
					}
					return StoreVariableBool( m_LastVarNameStart.GetCurrent(), m_LastVarNameEnd.GetCurrent(), false );
				}
			}
		}

		
	}
	else if ( *iter == '.' )
	{
		
		BFFIterator varNameStartSrc( iter );
		iter++; 
		if ( iter.IsAtValidVariableNameCharacter() == false )
		{
			Error::Error_1013_UnexpectedCharInVariableName( iter, nullptr );
			return false;
		}
		iter.SkipVariableName();
		return StoreVariableToVariable( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), 
										varNameStartSrc, iter, operatorIter );
	}
	
	if ( !ok )
	{
		Error::Error_1017_UnexepectedCharInVariableValue( iter );
		return false;
	}

	bool result = false;

	
	BFFIterator openTokenPos( iter );
	BFFIterator openTokenForError( iter ); 
	openTokenPos++; 
	if ( openToken == BFF_SCOPE_OPEN )
	{
		if ( iter.ParseToMatchingBrace( openToken, closeToken ) )
		{
			result = StoreVariableArray( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), 
										 openTokenPos, iter, operatorIter );
		}
		else
		{
			Error::Error_1002_MatchingClosingTokenNotFound( openTokenForError, nullptr, closeToken );
		}
	}
	else if ( openToken == BFF_STRUCT_OPEN )
	{
		if ( iter.ParseToMatchingBrace( openToken, closeToken ) )
		{
			result = StoreVariableStruct( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), 
										  openTokenPos, iter, operatorIter );
		}
		else
		{
			Error::Error_1002_MatchingClosingTokenNotFound( openTokenForError, nullptr, closeToken );
		}
	}
	else
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( openToken == '\'' ) || ( openToken == '"' ) ) ) { if ( AssertHandler::Failure( "( openToken == '\\'' ) || ( openToken == '\"' )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 399 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		iter.SkipString( closeToken );
		if ( *iter == closeToken )
		{
			result = StoreVariableString( varNameStart.GetCurrent(), varNameEnd.GetCurrent(), 
										  openTokenPos, iter, operatorIter );
		}
		else		
		{
			Error::Error_1002_MatchingClosingTokenNotFound( openTokenForError, nullptr, closeToken );
		}
	}

	if ( result )
	{
		iter++; 
	}

	
	return result;
}



bool BFFParser::ParseFunction( BFFIterator & iter )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( iter.IsAtValidFunctionNameCharacter() ) ) { if ( AssertHandler::Failure( "iter.IsAtValidFunctionNameCharacter()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 425 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	BFFStackFrame stackFrame;

	BFFIterator functionNameStart( iter );
	iter.SkipFunctionName();
	if ( iter.IsAtEnd() )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}

	
	if ( functionNameStart.GetDistTo( iter ) > MAX_FUNCTION_NAME_LENGTH )
	{
		
		Error::Error_1015_UnknownFunction( functionNameStart );
		return false;
	}

	
	AStackString<MAX_FUNCTION_NAME_LENGTH> functionName( functionNameStart.GetCurrent(), iter.GetCurrent() );
	const Function * func = Function::Find( functionName );
	if ( func == nullptr )
	{
		Error::Error_1015_UnknownFunction( functionNameStart );
		return false;
	}
	iter.SkipWhiteSpace();

	if ( func->IsUnique() && func->GetSeen() )
	{
		Error::Error_1020_FunctionCanOnlyBeInvokedOnce( functionNameStart, func );
		return false;
	}
	func->SetSeen();

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Function call '%s'",functionName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	
	bool hasHeader = false;
	BFFIterator functionArgsStartToken( iter );
	BFFIterator functionArgsStopToken( iter );
	if ( *iter == BFF_FUNCTION_ARGS_OPEN )
	{
		
		if ( func->AcceptsHeader() == false )
		{
			Error::Error_1021_UnexpectedHeaderForFunction( iter, func );
			return false;
		}

		
		if ( iter.ParseToMatchingBrace( BFF_FUNCTION_ARGS_OPEN, BFF_FUNCTION_ARGS_CLOSE ) == false )
		{
			Error::Error_1022_MissingFunctionHeaderCloseToken( functionArgsStartToken, func );
			return false;
		}
		functionArgsStopToken = iter;
		hasHeader = true;
		iter++; 
		iter.SkipWhiteSpaceAndComments();
	}

	if ( func->NeedsHeader() && ( hasHeader == false ) )
	{
		Error::Error_1023_FunctionRequiresAHeader( iter, func );
		return false;
	}

	
	bool hasBody = false;

	BFFIterator functionBodyStartToken( iter );
	BFFIterator functionBodyStopToken( iter );
	if ( func->NeedsBody() )
	{
		
		if ( *iter != BFF_SCOPE_OPEN )
		{
			Error::Error_1024_FunctionRequiresABody( functionNameStart, func );
			return false;
		}

		if ( iter.ParseToMatchingBrace( BFF_SCOPE_OPEN, BFF_SCOPE_CLOSE ) == false )
		{
			Error::Error_1025_MissingScopeCloseToken( functionBodyStartToken, func );
			return false;
		}

		functionBodyStopToken = iter;
		iter++;
		hasBody = true;
	}

	return func->ParseFunction( functionNameStart,
								hasBody ? &functionBodyStartToken : nullptr, 
								hasBody ? &functionBodyStopToken : nullptr,
								hasHeader ? &functionArgsStartToken : nullptr,
								hasHeader ? &functionArgsStopToken : nullptr );}



bool BFFParser::ParseUnnamedScope( BFFIterator & iter )
{
	
	BFFIterator scopeStart( iter );
	if ( iter.ParseToMatchingBrace( BFF_SCOPE_OPEN, BFF_SCOPE_CLOSE ) == false )
	{
		Error::Error_1025_MissingScopeCloseToken( scopeStart, nullptr );
		return false;
	}

	
	BFFStackFrame stackFrame;

	
	BFFParser subParser;
	BFFIterator subIter( scopeStart );
	subIter++; 
	subIter.SetMax( iter.GetCurrent() ); 
	if ( subParser.Parse( subIter ) == false )
	{
		return false;
	}

	iter++; 

	return true;
}



bool BFFParser::ParsePreprocessorDirective( BFFIterator & iter )
{
	const BFFIterator directiveStart( iter );

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( *iter == BFF_PREPROCESSOR_START ) ) { if ( AssertHandler::Failure( "*iter == BFF_PREPROCESSOR_START", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 564 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	iter++;

	
	iter.SkipWhiteSpace();

	
	BFFIterator directiveStartIter( iter );

	
	while ( iter.IsAtValidDirectiveNameCharacter() )
	{
		iter++;
	}
	BFFIterator directiveEndIter( iter );

	iter.SkipWhiteSpace();

	
	AStackString< MAX_DIRECTIVE_NAME_LENGTH > directive( directiveStartIter.GetCurrent(), directiveEndIter.GetCurrent() );
	if ( directive == "include" )
	{
		return ParseIncludeDirective( iter );
	}
	else if ( directive == "once" )
	{
		FBuild::Get().GetDependencyGraph().SetCurrentFileAsOneUse();
		return true;
	}
	else if ( directive == "if" )
	{
		return ParseIfDirective( directiveStart, iter );
	}
	else if ( directive == "endif" )
	{
		return ParseEndIfDirective( directiveStartIter );
	}

	
	Error::Error_1030_UnknownDirective( directiveStartIter, directive );
	return false;
}



bool BFFParser::ParseIncludeDirective( BFFIterator & iter )
{
	
	if ( s_Depth >= 128 )
	{
		Error::Error_1035_ExcessiveDepthComplexity( iter );
		return false;
	}

	
	if ( *iter != '"' )
	{
		Error::Error_1031_UnexpectedCharFollowingDirectiveName( iter, AStackString<>( "include" ), '"' ); 
		return false;
	}

	BFFIterator stringStart( iter );
	stringStart++; 

	
	if ( iter.ParseToNext( '"' ) == false )
	{
		Error::Error_1012_UnexpectedEndOfFile( iter );
		return false;
	}

	AStackString<> include( stringStart.GetCurrent(), iter.GetCurrent() );
	iter++; 

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Including: %s\n",include.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	

	
	const char * lastSlash = iter.GetFileName().FindLast( ( '\\' ) );
	lastSlash = lastSlash ? lastSlash : iter.GetFileName().FindLast( ( '/' ) );
	lastSlash = lastSlash ? ( lastSlash + 1 ): iter.GetFileName().Get(); 
	AStackString<> includeToUse( iter.GetFileName().Get(), lastSlash );
	includeToUse += include;
	AStackString<> includeToUseClean;
	NodeGraph::CleanPath( includeToUse, includeToUseClean );
	FileStream f;
	if ( f.Open( includeToUseClean.Get(), FileStream::READ_ONLY ) == false )
	{
		Error::Error_1032_UnableToOpenInclude( stringStart, includeToUseClean );
		return false;
	}

	
	if ( FBuild::Get().GetDependencyGraph().IsOneUseFile( includeToUseClean ) )
	{
		
		return true;
	}

	uint64_t includeTimeStamp = FileIO::GetFileLastWriteTime( includeToUseClean );

	
	const uint32_t fileSize = (uint32_t)f.GetFileSize();
	AutoPtr< char > mem( (char *)::AllocFileLine( fileSize + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 668 ) );
	if ( f.Read( mem.Get(), fileSize ) != fileSize )
	{
		Error::Error_1033_ErrorReadingInclude( stringStart, include, Env::GetLastErr() );
		return false;
	}
	mem.Get()[ fileSize ] = '\000'; 
	BFFParser parser;
	const bool pushStackFrame = false; 
	return parser.Parse( mem.Get(), fileSize, includeToUseClean.Get(), includeTimeStamp, pushStackFrame ); 
}



bool BFFParser::ParseIfDirective( const BFFIterator & directiveStart, BFFIterator & iter )
{
	
	const BFFIterator conditionStart( iter );
	while ( ( iter.IsAtEnd() == false ) &&
			( *iter != '\r' ) &&
			( *iter != '\n' ) )
	{
		iter++;
	}
	const BFFIterator conditionEnd( iter );

	
	bool result;
	if ( CheckIfCondition( conditionStart, conditionEnd, result ) == false )
	{
		return false; 
	}

	if ( result )
	{
		++s_IfDepth; 
		return true; 
	}

	
	size_t depth = 1; 
	while ( depth > 0 )
	{
		
		if ( iter.IsAtEnd() )
		{
			(void)directiveStart; 
			Error::Error_1012_UnexpectedEndOfFile( iter ); 
			return false;
		}

		
		iter.SkipWhiteSpace();
		if ( *iter == BFF_PREPROCESSOR_START )
		{
			iter++; 
			iter.SkipWhiteSpace(); 
			const BFFIterator directiveNameStart( iter );
			while ( iter.IsAtValidDirectiveNameCharacter() )
			{
				iter++;
			}
			const BFFIterator directiveNameEnd( iter );
			AStackString<> directiveName( directiveNameStart.GetCurrent(), directiveNameEnd.GetCurrent() );
			if ( directiveName == "endif" )
			{
				--depth;
			}
			else if ( directiveName == "if" )
			{
				++depth;
			}

			
		}

		
		while ( ( iter.IsAtEnd() == false ) &&
				( *iter != '\r' ) &&
				( *iter != '\n' ) )
		{
			iter++;
		}
	}

	return true;
}



bool BFFParser::ParseEndIfDirective( const BFFIterator & directiveStart )
{
	if ( s_IfDepth == 0 )
	{
		
		Error::Error_1037_EndIfWithoutIf( directiveStart );
		return false;
	}

	s_IfDepth--;
	return true;
}



bool BFFParser::CheckIfCondition( const BFFIterator & conditionStart, const BFFIterator & conditionEnd, bool & result )
{
	
	AStackString<> condition( conditionStart.GetCurrent(), conditionEnd.GetCurrent() );
	condition.Replace( '\t', ' ' );
	condition.Replace( " ", "" );

	result = false;

	
	if ( condition == "__WINDOWS__" )
	{
		
			result = true;
		#line 788 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"
		return true;
	}
	if ( condition == "__LINUX__" )
	{
		

#line 795 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"
		return true;
	}
	if ( condition == "__OSX__" )
	{
		

#line 802 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp"
		return true;
	}

	
	Error::Error_1036_UnknownTokenInIfDirective( conditionStart );
	return false;
}



bool BFFParser::StoreVariableString( const char * varNameStart, const char * varNameEnd, 
									 const BFFIterator & valueStart, const BFFIterator & valueEnd,
									 const BFFIterator & operatorIter )
{
	
	AStackString< 2048 > value;
	if ( PerformVariableSubstitutions( valueStart, valueEnd, value ) == false )
	{
		return false;
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameStart ) ) { if ( AssertHandler::Failure( "varNameStart", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 823 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameEnd ) ) { if ( AssertHandler::Failure( "varNameEnd", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 824 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AStackString< MAX_VARIABLE_NAME_LENGTH > name( varNameStart, varNameEnd );

	
	const BFFVariable * varToConcat = nullptr;
	if ( *operatorIter == BFF_VARIABLE_CONCATENATION )
	{
		
		varToConcat = BFFStackFrame::GetVar( name );
		if ( varToConcat == nullptr )
		{
			Error::Error_1026_VariableNotFoundForConcatenation( operatorIter, name );
			return false;
		}

		
		if ( varToConcat->IsString() )
		{
			
			AStackString< 1024 > finalValue( varToConcat->GetString() );
			finalValue += value;

			BFFStackFrame::SetVarString( name, finalValue );
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Appended '%s' to <String> variable '%s' with result '%s'",value.Get(), name.Get(), finalValue.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
		else if ( varToConcat->IsArrayOfStrings() )
		{
			
			Array< AString > finalValues( varToConcat->GetArrayOfStrings().GetSize() + 1, false );
			finalValues = varToConcat->GetArrayOfStrings();
			finalValues.Append( value );

			BFFStackFrame::SetVarArrayOfStrings( name, finalValues );
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Appended '%s' to <ArrayOfStrings> variable '%s' with result of %i items",value.Get(), name.Get(), finalValues.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
		else
		{
			Error::Error_1027_CannotConcatenate( operatorIter, name, varToConcat->GetType(), BFFVariable::VAR_STRING );
			return false;
		}
	}

	
	BFFStackFrame::SetVarString( name, value );
	do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <string> variable '%s' with value '%s'",name.Get(), value.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	return true;
}



bool BFFParser::StoreVariableArray( const char * varNameStart, const char * varNameEnd, 
									const BFFIterator & valueStart, const BFFIterator & valueEnd,
									const BFFIterator & operatorIter )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameStart ) ) { if ( AssertHandler::Failure( "varNameStart", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 880 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameEnd ) ) { if ( AssertHandler::Failure( "varNameEnd", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 881 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AStackString< MAX_VARIABLE_NAME_LENGTH > name( varNameStart, varNameEnd );

	Array< AString > values( 32, true );
	Array< const BFFVariable * > structValues( 32, true );

	
	if ( *operatorIter == BFF_VARIABLE_CONCATENATION )
	{
		
		const BFFVariable * var = BFFStackFrame::GetVar( name );
		if ( var == nullptr )
		{
			Error::Error_1026_VariableNotFoundForConcatenation( operatorIter, name );
			return false;
		}

		
		if ( var->IsArrayOfStrings() )
		{
			
			values = var->GetArrayOfStrings();
		}
		else if ( var->IsArrayOfStructs() )
		{
			
			structValues = var->GetArrayOfStructs();
		}
		else
		{
			
			Error::Error_1027_CannotConcatenate( operatorIter, name, var->GetType(), BFFVariable::VAR_ARRAY_OF_STRINGS );
			return false;
		}
	}

	
	BFFIterator iter( valueStart );
	for (;;)
	{
		iter.SkipWhiteSpaceAndComments();

		
		if ( iter.GetCurrent() == valueEnd.GetCurrent() )
		{
			break;
		}

		const char c = *iter;
		if ( ( c == '"' ) || ( c == '\'' ) )
		{
			

			
			if ( structValues.IsEmpty() == false )
			{
				
				Error::Error_1034_OperationNotSupported( iter, 
														 BFFVariable::VAR_ARRAY_OF_STRUCTS,
														 BFFVariable::VAR_STRING,
														 operatorIter );
				return false;
			}

			
			BFFIterator elementValueStart( iter );
			iter.SkipString( c );
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( iter.GetCurrent() <= valueEnd.GetCurrent() ) ) { if ( AssertHandler::Failure( "iter.GetCurrent() <= valueEnd.GetCurrent()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 948 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			elementValueStart++; 
			AStackString< 2048 > elementValue;

			
			if ( PerformVariableSubstitutions( elementValueStart, iter, elementValue ) == false )
			{
				return false;
			}

			values.Append( elementValue );

			iter++; 
		}
		else if ( c == '.' )
		{
			
			BFFIterator elementStartValue( iter );
			iter++; 
			iter.SkipVariableName();

			
			AStackString<> varName( elementStartValue.GetCurrent(), iter.GetCurrent() );
			const BFFVariable * var = BFFStackFrame::GetVar( varName );
			if ( var == nullptr )
			{
				Error::Error_1026_VariableNotFoundForConcatenation( operatorIter, varName );
				return false;
			}

			if ( var->IsString() || var->IsArrayOfStrings() )
			{
				
				if ( structValues.IsEmpty() == false )
				{
					
					Error::Error_1034_OperationNotSupported( elementStartValue, 
															 BFFVariable::VAR_ARRAY_OF_STRUCTS,
															 var->GetType(),
															 operatorIter );
					return false;
				}

				if ( var->IsString() )
				{
					values.Append( var->GetString() );
				}
				else
				{
					values.Append( var->GetArrayOfStrings() );
				}
			}
			else if ( var->IsStruct() || var->IsArrayOfStructs() )
			{
				
				if ( values.IsEmpty() == false )
				{
					
					Error::Error_1034_OperationNotSupported( elementStartValue, 
															 BFFVariable::VAR_ARRAY_OF_STRINGS,
															 var->GetType(),
															 operatorIter );
					return false;
				}

				if ( var->IsStruct() )
				{
					structValues.Append( var );
				}
				else
				{
					structValues.Append( var->GetArrayOfStructs() );
				}
			}
			else
			{
				Error::Error_1050_PropertyMustBeOfType( iter, nullptr, name.Get(), 
														var->GetType(),
														BFFVariable::VAR_STRING,
														BFFVariable::VAR_STRUCT );
				return false;
			}
		}
		else
		{
			Error::Error_1001_MissingStringStartToken( iter, nullptr );
			return false;
		}

		iter.SkipWhiteSpaceAndComments();
		if ( *iter == ',' ) 
		{ 
			iter++; 
		}

		
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( values.IsEmpty() || structValues.IsEmpty() ) ) { if ( AssertHandler::Failure( "values.IsEmpty() || structValues.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 1047 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( structValues.IsEmpty() == false )
	{
		
		BFFStackFrame::SetVarArrayOfStructs( name, structValues );
		do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStructs> variable '%s' with %u elements",name.Get(), structValues.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}
	else
	{
		
		BFFStackFrame::SetVarArrayOfStrings( name, values );
		do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStrings> variable '%s' with %u elements",name.Get(), values.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}

	return true;
}



bool BFFParser::StoreVariableStruct( const char * varNameStart, const char * varNameEnd, 
									 const BFFIterator & valueStart, const BFFIterator & valueEnd,
									 const BFFIterator & operatorIter )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameStart ) ) { if ( AssertHandler::Failure( "varNameStart", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 1072 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varNameEnd ) ) { if ( AssertHandler::Failure( "varNameEnd", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 1073 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AStackString< MAX_VARIABLE_NAME_LENGTH > name( varNameStart, varNameEnd );

	
	if ( *operatorIter == BFF_VARIABLE_CONCATENATION )
	{
		
		Error::Error_1027_CannotConcatenate( operatorIter, name, BFFVariable::VAR_STRUCT, BFFVariable::VAR_ANY );
		return false;
	}

	
	BFFStackFrame stackFrame;

	
	BFFParser subParser;
	BFFIterator subIter( valueStart );
	subIter.SetMax( valueEnd.GetCurrent() ); 
	if ( subParser.Parse( subIter ) == false )
	{
		return false; 
	}

	
	const Array< const BFFVariable * > & structMembers = stackFrame.GetLocalVariables();

	
	BFFStackFrame::SetVarStruct( name, structMembers, stackFrame.GetParent() );
	do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <struct> variable '%s' with %u members",name.Get(), structMembers.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return true;
}




bool BFFParser::StoreVariableBool( const char * varNameStart, const char * varNameEnd, bool value )
{
	
	AStackString< MAX_VARIABLE_NAME_LENGTH > name( varNameStart, varNameEnd );
	BFFStackFrame::SetVarBool( name, value );

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <bool> variable '%s' with value '%s'",name.Get(), value ? "true" : "false" ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return true;
}



bool BFFParser::StoreVariableInt( const char * varNameStart, const char * varNameEnd, int value )
{
	AStackString< MAX_VARIABLE_NAME_LENGTH > name( varNameStart, varNameEnd );
	BFFStackFrame::SetVarInt( name, value );

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <int> variable '%s' with value '%i'",name.Get(), value ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return true;
}



bool BFFParser::StoreVariableToVariable( const char * varNameDstStart, const char * varNameDstEnd,
						  				 const BFFIterator & varNameSrcStart, const BFFIterator & varNameSrcEnd,
										 const BFFIterator & operatorIter )
{
	
	AStackString<> dstName( varNameDstStart, varNameDstEnd );
	AStackString<> srcName( varNameSrcStart.GetCurrent(), varNameSrcEnd.GetCurrent() );
	const BFFVariable * varDst = BFFStackFrame::GetVar( dstName );
	const BFFVariable * varSrc = BFFStackFrame::GetVar( srcName );

	
	if ( varSrc == nullptr )
	{
		Error::Error_1009_UnknownVariable( varNameSrcStart, nullptr );
		return false;
	}

	const bool concat = ( *operatorIter == BFF_VARIABLE_CONCATENATION );

	
	if ( concat )
	{
		
		if ( varDst == nullptr )
		{
			Error::Error_1026_VariableNotFoundForConcatenation( operatorIter, dstName );
			return false;
		}
	}

	
	BFFVariable::VarType srcType = varSrc->GetType(); 
	BFFVariable::VarType dstType = BFFVariable::VAR_ANY; 
	if ( varDst )
	{
		dstType = varDst->GetType();
	}
	else 
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( concat == false ) ) { if ( AssertHandler::Failure( "concat == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 1173 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		dstType = srcType;
	}

	

	if ( srcType != dstType )
	{
		

		
		if ( ( dstType == BFFVariable::VAR_ARRAY_OF_STRINGS ) && 
			 ( srcType == BFFVariable::VAR_STRING ) )
		{
			uint32_t num = (uint32_t)( 1 + ( concat ? varDst->GetArrayOfStrings().GetSize() : 0 ) );
			Array< AString > values( num, false );
			if ( concat )
			{
				values.Append( varDst->GetArrayOfStrings() );
			}
			values.Append( varSrc->GetString() );

			BFFStackFrame::SetVarArrayOfStrings( dstName, values );
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStrings> variable '%s' with %u elements",dstName.Get(), num ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}

		
		if ( ( dstType == BFFVariable::VAR_ARRAY_OF_STRUCTS ) && 
			 ( srcType == BFFVariable::VAR_STRUCT ) )
		{
			uint32_t num = (uint32_t)( 1 + ( concat ? varDst->GetArrayOfStructs().GetSize() : 0 ) );
			Array< const BFFVariable * > values( num, false );
			if ( concat )
			{
				values.Append( varDst->GetArrayOfStructs() );
			}
			values.Append( varSrc );

			BFFStackFrame::SetVarArrayOfStructs( dstName, values );
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStructs> variable '%s' with %u elements",dstName.Get(), num ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}

	}
	else
	{
		

		if ( srcType == BFFVariable::VAR_STRING )
		{
			AStackString< 2048 > finalValue;
			if ( concat )
			{
				finalValue = varDst->GetString();
			}
			finalValue += varSrc->GetString();

			BFFStackFrame::SetVarString( dstName, finalValue );
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <string> variable '%s' with value '%s'",dstName.Get(), finalValue.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
	
		if ( srcType == BFFVariable::VAR_ARRAY_OF_STRINGS )
		{
			if ( concat )
			{
				const unsigned int num = (unsigned int)( varSrc->GetArrayOfStrings().GetSize() + varDst->GetArrayOfStrings().GetSize() );
				Array< AString > values( num, false );
				values.Append( varDst->GetArrayOfStrings() );
				values.Append( varSrc->GetArrayOfStrings() );
				BFFStackFrame::SetVarArrayOfStrings( dstName, values );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStrings> variable '%s' with %u elements",dstName.Get(), num ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			else
			{
				BFFStackFrame::SetVarArrayOfStrings( dstName, varSrc->GetArrayOfStrings() );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStrings> variable '%s' with %u elements",dstName.Get(), (unsigned int)varSrc->GetArrayOfStrings().GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			return true;
		}

		if ( srcType == BFFVariable::VAR_ARRAY_OF_STRUCTS )
		{
			if ( concat )
			{
				const unsigned int num = (unsigned int)( varSrc->GetArrayOfStructs().GetSize() + varDst->GetArrayOfStructs().GetSize() );
				Array< const BFFVariable * > values( num, false );
				values.Append( varDst->GetArrayOfStructs() );
				values.Append( varSrc->GetArrayOfStructs() );
				BFFStackFrame::SetVarArrayOfStructs( dstName, values );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStructs> variable '%s' with %u elements",dstName.Get(), num ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			else
			{
				BFFStackFrame::SetVarArrayOfStructs( dstName, varSrc->GetArrayOfStructs() );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <ArrayOfStructs> variable '%s' with %u elements",dstName.Get(), (unsigned int)varSrc->GetArrayOfStructs().GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			return true;
		}

		if ( srcType == BFFVariable::VAR_INT )
		{
			int newVal( varSrc->GetInt() );
			if ( concat )
			{
				newVal += varDst->GetInt();
			}
			return StoreVariableInt( varNameDstStart, varNameDstEnd, newVal );
		}

		if ( srcType == BFFVariable::VAR_BOOL )
		{
			
			if ( concat == false )
			{
				return StoreVariableBool( varNameDstStart, varNameDstEnd, varSrc->GetBool() );
			}
		}

		if ( srcType == BFFVariable::VAR_STRUCT )
		{
			const Array< const BFFVariable * > & srcMembers = varSrc->GetStructMembers();
			if ( concat )
			{
				
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( varDst ) ) { if ( AssertHandler::Failure( "varDst", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFParser.cpp", 1299 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
				const Array< const BFFVariable * > & dstMembers = varDst->GetStructMembers();

				
				Array< const BFFVariable * > allMembers( srcMembers.GetSize() + dstMembers.GetSize(), false );
				allMembers = srcMembers;

				
				for ( const BFFVariable ** it = dstMembers.Begin(); it != dstMembers.End(); ++it )
				{
					
					bool exists = false;
					for ( const BFFVariable ** it2 = srcMembers.Begin(); it2 != srcMembers.End(); ++it2 )
					{
						if ( ( *it2 )->GetName() == ( *it )->GetName() )
						{
							
							exists = true;
							break;
						}
					}
					if ( exists == false )
					{
						
						allMembers.Append( *it );
					}
				}

				BFFStackFrame::SetVarStruct( dstName, allMembers );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <struct> variable '%s' with %u members",dstName.Get(), allMembers.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			else
			{
				
				BFFStackFrame::SetVarStruct( dstName, srcMembers );
				do { if ( FLog::ShowInfo() ) { FLog::Info( "Registered <struct> variable '%s' with %u members",dstName.Get(), srcMembers.GetSize() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
			return true;
		}
	}

	Error::Error_1034_OperationNotSupported( varNameSrcStart, 
											 varDst ? varDst->GetType() : varSrc->GetType(),
											 varSrc->GetType(),
											 operatorIter );
	return false;
}



 bool BFFParser::PerformVariableSubstitutions( const BFFIterator & startIter,
											  const BFFIterator & endIter,
											  AString & value )
{
	AStackString< 4096 > output;

	BFFIterator src( startIter );
	BFFIterator end( endIter );

	while ( src < end )
	{
		switch ( *src )
		{
			case '^':
			{
				src++; 
				if ( src < end )
				{
					output += *src; 
				}
				break;
			}
			case '$':
			{
				BFFIterator firstToken( src );
				src++; 

				
				BFFIterator startName( src );
				const char * endName = nullptr;
				while ( src < end )
				{
					if ( *src == '$' )
					{
						endName = src.GetCurrent();
						break;
					}
					src++;
				}
				if ( ( endName == nullptr ) ||
					 ( ( endName - startName.GetCurrent() ) < 1 ) )
				{
					Error::Error_1028_MissingVariableSubstitutionEnd( firstToken );
					return false; 
				}
				AStackString< MAX_VARIABLE_NAME_LENGTH > varName( startName.GetCurrent(), endName );
				const BFFVariable * var = BFFStackFrame::GetVarAny( varName );
				if ( var == nullptr )
				{
					Error::Error_1009_UnknownVariable( startName, nullptr );
					return false; 
				}
				if ( var->IsString() == false )
				{
					Error::Error_1029_VariableForSubstitutionIsNotAString( startName, varName, var->GetType() );
					return false; 
				}
				output += var->GetString();
				break;
			}
			default:
			{
				output += *src;
				break;
			}
		}
		src++;
	}

	value = output;
	return true;
}



#line 64 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/BFFStackFrame.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp"







 BFFStackFrame * BFFStackFrame::s_StackHead = nullptr;



BFFStackFrame::BFFStackFrame()
: m_Variables( 32, true )
{
	
	m_Next = s_StackHead;
	s_StackHead = this;
}



BFFStackFrame::~BFFStackFrame()
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_StackHead == this ) ) { if ( AssertHandler::Failure( "s_StackHead == this", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 31 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	s_StackHead = m_Next;

	
	Array< BFFVariable * >::Iter i = m_Variables.Begin();
	Array< BFFVariable * >::Iter end = m_Variables.End();
	for( ; i < end ; ++i )
	{
		delete *i;
	}
}



 void BFFStackFrame::SetVarString( const AString & name,
									   		 const AString & value,
									   		 BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueString( value );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 59 ) BFFVariable( name, value );
	frame->m_Variables.Append( v );
}



 void BFFStackFrame::SetVarArrayOfStrings( const AString & name,
													 const Array< AString > & values,
													 BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueArrayOfStrings( values );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 79 ) BFFVariable( name, values );
	frame->m_Variables.Append( v );
}



 void BFFStackFrame::SetVarBool( const AString & name, bool value, BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueBool( value );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 97 ) BFFVariable( name, value );
	frame->m_Variables.Append( v );
}



 void BFFStackFrame::SetVarInt( const AString & name, int value, BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueInt( value );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 115 ) BFFVariable( name, value );
	frame->m_Variables.Append( v );
}



 void BFFStackFrame::SetVarStruct( const AString & name,
											 const Array< const BFFVariable * > & members,
											 BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueStruct( members );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 135 ) BFFVariable( name, members );
	frame->m_Variables.Append( v );
}



 void BFFStackFrame::SetVarArrayOfStructs( const AString & name,
													 const Array< const BFFVariable * > & structs,
													 BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	BFFVariable * var = frame->GetVarMutableNoRecurse( name );
	if ( var )
	{
		var->SetValueArrayOfStructs( structs );
		return;
	}

	
	BFFVariable * v = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 155 ) BFFVariable( name, structs, BFFVariable::VAR_ARRAY_OF_STRUCTS );
	frame->m_Variables.Append( v );
}




 void BFFStackFrame::SetVar( const BFFVariable * var, BFFStackFrame * frame )
{
	frame = frame ? frame : s_StackHead;

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( var ) ) { if ( AssertHandler::Failure( "var", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 166 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	switch ( var->GetType() )
	{		
		case BFFVariable::VAR_ANY:				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 170 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
		case BFFVariable::VAR_STRING:			SetVarString( var->GetName(), var->GetString(), frame ); break;
		case BFFVariable::VAR_BOOL:				SetVarBool( var->GetName(), var->GetBool(), frame ); break;
		case BFFVariable::VAR_ARRAY_OF_STRINGS:	SetVarArrayOfStrings( var->GetName(), var->GetArrayOfStrings(), frame ); break;
		case BFFVariable::VAR_INT:				SetVarInt( var->GetName(), var->GetInt(), frame ); break;
		case BFFVariable::VAR_STRUCT:			SetVarStruct( var->GetName(), var->GetStructMembers(), frame ); break;
		case BFFVariable::VAR_ARRAY_OF_STRUCTS:	SetVarArrayOfStructs( var->GetName(), var->GetArrayOfStructs(), frame ); break;
		case BFFVariable::MAX_VAR_TYPES: do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 177 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
	}
}



 const BFFVariable * BFFStackFrame::GetVar( const char * name )
{
	AStackString<> strName( name );
	return GetVar( strName );
}



 const BFFVariable * BFFStackFrame::GetVar( const AString & name )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_StackHead ) ) { if ( AssertHandler::Failure( "s_StackHead", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 194 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	return s_StackHead->GetVariableRecurse( name );
}



const BFFVariable * BFFStackFrame::GetVariableRecurse( const AString & name ) const
{
	
	Array< BFFVariable * >::Iter i = m_Variables.Begin();
	Array< BFFVariable * >::Iter end = m_Variables.End();
	for( ; i < end ; ++i )
	{
		if ( ( *i )->GetName() == name )
		{
			return *i;
		}
	}
	
	
	if ( m_Next )
	{
		return m_Next->GetVariableRecurse( name );
	}

	
	return nullptr;
}



 const BFFVariable * BFFStackFrame::GetVarAny( const AString & name )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_StackHead ) ) { if ( AssertHandler::Failure( "s_StackHead", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 230 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	return s_StackHead->GetVariableRecurse( name, BFFVariable::VAR_ANY );
}



const BFFVariable * BFFStackFrame::GetVariableRecurse( const AString & nameOnly, 
												 BFFVariable::VarType type ) const
{
	
	Array< BFFVariable * >::Iter i = m_Variables.Begin();
	Array< BFFVariable * >::Iter end = m_Variables.End();
	for( ; i < end ; ++i )
	{
		
		if ( ( *i )->GetName().GetLength() == ( nameOnly.GetLength() + 1 ) )
		{
			
			if ( ( type == BFFVariable::VAR_ANY ) ||
				 ( type == ( *i )->GetType() ) )
			{
				
				if ( nameOnly == ( ( *i )->GetName().Get() + 1 ) )
				{
					return *i;
				}
			}
		}
	}
	
	
	if ( m_Next )
	{
		return m_Next->GetVariableRecurse( nameOnly, type );
	}

	
	return nullptr;
}



BFFVariable * BFFStackFrame::GetVarMutableNoRecurse( const AString & name )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_StackHead ) ) { if ( AssertHandler::Failure( "s_StackHead", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFStackFrame.cpp", 276 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	Array< BFFVariable * >::Iter i = m_Variables.Begin();
	Array< BFFVariable * >::Iter end = m_Variables.End();
	for( ; i < end ; ++i )
	{
		if ( ( *i )->GetName() == name )
		{
			return *i;
		}
	}

	return nullptr;
}


#line 67 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/BFF/BFFVariable.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp"







 const char * BFFVariable::s_TypeNames[] =
{
	"Any",
	"String",
	"Bool",
	"ArrayOfStrings",
	"Int",
	"Struct",
	"ArrayOfStructs"
};



BFFVariable::BFFVariable( const BFFVariable & other )
: m_Name( other.m_Name )
, m_Type( other.m_Type )

, m_BoolValue( false )
, m_ArrayValues( 0, true )
, m_IntValue( 0 )
, m_StructMembers( 0, true )
, m_ArrayOfStructs( 0, true )
{
	switch( m_Type )
	{
		case VAR_ANY:				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp", 39 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
		case VAR_STRING:			SetValueString( other.GetString() ); break;
		case VAR_BOOL:				SetValueBool( other.GetBool() ); break;
		case VAR_ARRAY_OF_STRINGS:	SetValueArrayOfStrings( other.GetArrayOfStrings() ); break;
		case VAR_INT:				SetValueInt( other.GetInt() ); break;
		case VAR_STRUCT:			SetValueStruct( other.GetStructMembers() ); break;
		case VAR_ARRAY_OF_STRUCTS:	SetValueArrayOfStructs( other.GetArrayOfStructs() ); break;
		case MAX_VAR_TYPES:	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp", 46 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
	}
}



BFFVariable::BFFVariable( const AString & name, const AString & value )
: m_Name( name )
, m_Type( VAR_STRING )
, m_StringValue( value )
, m_BoolValue( false )
, m_ArrayValues( 0, false )
, m_IntValue( 0 )
, m_StructMembers( 0, true )
, m_ArrayOfStructs( 0, false )
{
}



BFFVariable::BFFVariable( const AString & name, bool value )
: m_Name( name )
, m_Type( VAR_BOOL )

, m_BoolValue( value )
, m_ArrayValues( 0, false )
, m_IntValue( 0 )
, m_StructMembers( 0, false )
, m_ArrayOfStructs( 0, false )
{
}



BFFVariable::BFFVariable( const AString & name, const Array< AString > & values )
: m_Name( name )
, m_Type( VAR_ARRAY_OF_STRINGS )

, m_BoolValue( false )
, m_ArrayValues( 0, true )
, m_IntValue( 0 )
, m_StructMembers( 0, false )
, m_ArrayOfStructs( 0, false )
{
	m_ArrayValues = values;
}



BFFVariable::BFFVariable( const AString & name, int i )
: m_Name( name )
, m_Type( VAR_INT )

, m_BoolValue( false )
, m_ArrayValues( 0, true )
, m_IntValue( i )
, m_StructMembers( 0, true )
, m_ArrayOfStructs( 0, false )
{
}



BFFVariable::BFFVariable( const AString & name, const Array< const BFFVariable * > & values )
: m_Name( name )
, m_Type( VAR_STRUCT )

, m_BoolValue( false )
, m_ArrayValues( 0, false )
, m_IntValue( 0 )
, m_StructMembers( values.GetSize(), true )
, m_ArrayOfStructs( 0, false )
{
	SetValueStruct( values );
}



BFFVariable::BFFVariable( const AString & name, 
						  const Array< const BFFVariable * > & structs, 
						  VarType type ) 
: m_Name( name )
, m_Type( VAR_ARRAY_OF_STRUCTS )

, m_BoolValue( false )
, m_ArrayValues( 0, false )
, m_IntValue( 0 )
, m_StructMembers( 0, false )
, m_ArrayOfStructs( structs.GetSize(), true )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( type == VAR_ARRAY_OF_STRUCTS ) ) { if ( AssertHandler::Failure( "type == VAR_ARRAY_OF_STRUCTS", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp", 137 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); (void)type;

	SetValueArrayOfStructs( structs );
}



BFFVariable::~BFFVariable()
{
	
	for ( BFFVariable ** it = m_StructMembers.Begin();
		  it != m_StructMembers.End();
		  ++it )
	{
		delete *it;
	}

	
	for ( BFFVariable ** it = m_ArrayOfStructs.Begin();
		  it != m_ArrayOfStructs.End();
		  ++it )
	{
		delete *it;
	}
}



void BFFVariable::SetValueString( const AString & value )
{
	m_Type = VAR_STRING;
	m_StringValue = value;
}



void BFFVariable::SetValueBool( bool value )
{
	m_Type = VAR_BOOL;
	m_BoolValue = value;
}



void BFFVariable::SetValueArrayOfStrings( const Array< AString > & values )
{
	m_Type = VAR_ARRAY_OF_STRINGS;
	m_ArrayValues = values;
}



void BFFVariable::SetValueInt( int i )
{
	m_Type = VAR_INT;
	m_IntValue = i;
}



void BFFVariable::SetValueStruct( const Array< const BFFVariable * > & values )
{
	
	
	Array< BFFVariable * > newVars( values.GetSize(), false );

	m_Type = VAR_STRUCT;
	for ( const BFFVariable ** it = values.Begin();
		  it != values.End();
		  ++it )
	{
		const BFFVariable * var = *it;
		BFFVariable * newV = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp", 209 ) BFFVariable( *var );
		newVars.Append( newV );
	}

	
	for ( BFFVariable ** it = m_StructMembers.Begin();
		  it != m_StructMembers.End();
		  ++it )
	{
		delete *it;
	}

	
	m_StructMembers.Swap( newVars );
}



void BFFVariable::SetValueArrayOfStructs( const Array< const BFFVariable * > & values )
{
	
	
	Array< BFFVariable * > newVars( values.GetSize(), false );

	m_Type = VAR_ARRAY_OF_STRUCTS;
	for ( const BFFVariable ** it = values.Begin();
		  it != values.End();
		  ++it )
	{
		const BFFVariable * var = *it;
		BFFVariable * newV = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\BFF\\BFFVariable.cpp", 239 ) BFFVariable( *var );
		newVars.Append( newV );
	}

	
	for ( BFFVariable ** it = m_ArrayOfStructs.Begin();
		  it != m_ArrayOfStructs.End();
		  ++it )
	{
		delete *it;
	}

	m_ArrayOfStructs.Swap( newVars );
}


#line 70 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Cache/Cache.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\Cache.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\Cache.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\Cache.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\ICache.h"


#pragma once





class AString;



class ICache
{
public:
	inline virtual ~ICache() {}

	virtual bool Init( const AString & cachePath ) = 0;
	virtual void Shutdown() = 0;
	virtual bool Publish( const AString & cacheId, const void * data, size_t dataSize ) = 0;
	virtual bool Retrieve( const AString & cacheId, void * & data, size_t & dataSize ) = 0;
	virtual void FreeMemory( void * data, size_t dataSize ) = 0;
};


#line 27 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\ICache.h"
#line 10 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\Cache.h"




class Cache : public ICache
{
public:
	explicit Cache();
	virtual ~Cache();

	virtual bool Init( const AString & cachePath );
	virtual void Shutdown();
	virtual bool Publish( const AString & cacheId, const void * data, size_t dataSize );
	virtual bool Retrieve( const AString & cacheId, void * & data, size_t & dataSize );
	virtual void FreeMemory( void * data, size_t dataSize );
private:
	void GetCacheFileName( const AString & cacheId, AString & path ) const;

	AString m_CachePath;
};


#line 33 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\Cache.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\Cache.cpp"














 Cache::Cache()
{
}



 Cache::~Cache()
{
}



 bool Cache::Init( const AString & cachePath )
{
	m_CachePath = cachePath;
	PathUtils::EnsureTrailingSlash( m_CachePath );
	if ( FileIO::EnsurePathExists( m_CachePath ) )
	{
		return true;
	}

	do { FLog::Warning( "Cache inaccessible - Caching disabled (Path '%s')",m_CachePath.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	return false;
}



 void Cache::Shutdown()
{
	
}



 bool Cache::Publish( const AString & cacheId, const void * data, size_t dataSize )
{
	AStackString<> cacheFileName;
	GetCacheFileName( cacheId, cacheFileName );

	
	char * lastSlash = cacheFileName.FindLast( ( '\\' ) );
	*lastSlash = 0;
	if ( !FileIO::EnsurePathExists( cacheFileName ) )
	{
		return false;
	}
	*lastSlash = ( '\\' );

	
	AStackString<> cacheFileTmpName( cacheFileName );
	cacheFileTmpName += ".tmp";
	FileStream cacheTmpFile;
	if( !cacheTmpFile.Open( cacheFileTmpName.Get(), FileStream::WRITE_ONLY ) )
	{
		return false;
	}

	
	bool cacheTmpWriteOk = ( cacheTmpFile.Write( data, dataSize ) == dataSize );
	cacheTmpFile.Close();

	if ( !cacheTmpWriteOk )
	{
		
		FileIO::FileDelete( cacheFileTmpName.Get() ); 
		return false;
	}

	
	if ( FileIO::FileMove( cacheFileTmpName, cacheFileName ) == false )
	{
		
		FileIO::FileDelete( cacheFileName.Get() );

		
		if ( FileIO::FileMove( cacheFileTmpName, cacheFileName ) == false )
		{
			
			FileIO::FileDelete( cacheFileTmpName.Get() ); 
			return false;
		}
	}

	return true;
}



 bool Cache::Retrieve( const AString & cacheId, void * & data, size_t & dataSize )
{
	data = nullptr;
	dataSize = 0;

	AStackString<> cacheFileName;
	GetCacheFileName( cacheId, cacheFileName );

	FileStream cacheFile;
	if ( cacheFile.Open( cacheFileName.Get(), FileStream::READ_ONLY ) )
	{
		const size_t cacheFileSize = (size_t)cacheFile.GetFileSize();
		AutoPtr< char > mem( (char *)::AllocFileLine( cacheFileSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\Cache.cpp", 123 ) );
		if ( cacheFile.Read( mem.Get(), cacheFileSize ) == cacheFileSize )
		{
			dataSize = cacheFileSize;
			data = mem.Release();
			return true;
		}
	}

	return false;
}



 void Cache::FreeMemory( void * data, size_t  )
{
	::Free( data );
}



void Cache::GetCacheFileName( const AString & cacheId, AString & path ) const
{
	
	path.Format( "%s%c%c\\%c%c\\%s", m_CachePath.Get(), 
									   cacheId[ 0 ],
									   cacheId[ 1 ],
									   cacheId[ 2 ],
									   cacheId[ 3 ],
									   cacheId.Get() );
}


#line 73 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Cache/CachePlugin.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePlugin.h"


#pragma once






#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePluginInterface.h"


#pragma once















typedef bool (*CacheInitFunc)( const char * cachePath );







typedef void (*CacheShutdownFunc)();












typedef bool (*CachePublishFunc)( const char * cacheId, const void * data, unsigned long long dataSize );











typedef bool (*CacheRetrieveFunc)( const char * cacheId, void * & data, unsigned long long & dataSize );










typedef void (*CacheFreeMemoryFunc)( void * data, unsigned long long dataSize );





#line 70 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePluginInterface.h"
#line 11 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePlugin.h"



class AString;



class CachePlugin : public ICache
{
public:
	explicit CachePlugin( const AString & dllName );
	virtual ~CachePlugin();

	virtual bool Init( const AString & cachePath );
	virtual void Shutdown();
	virtual bool Publish( const AString & cacheId, const void * data, size_t dataSize );
	virtual bool Retrieve( const AString & cacheId, void * & data, size_t & dataSize );
	virtual void FreeMemory( void * data, size_t dataSize );
private:
	void * GetFunction( const char * friendlyName, const char * mangledName ) const;

	
		void *				m_DLL;
	#line 35 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePlugin.h"
	CacheInitFunc		m_InitFunc;
	CacheShutdownFunc	m_ShutdownFunc;
	CachePublishFunc	m_PublishFunc;
	CacheRetrieveFunc	m_RetrieveFunc;
	CacheFreeMemoryFunc	m_FreeMemoryFunc;
};


#line 44 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\cache\\CachePlugin.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"













    
#line 24 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"



 CachePlugin::CachePlugin( const AString & dllName ) :
	
		m_DLL( nullptr ),
	#line 31 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"
		m_InitFunc( nullptr ),
		m_ShutdownFunc( nullptr ),
		m_PublishFunc( nullptr ),
		m_RetrieveFunc( nullptr ),
		m_FreeMemoryFunc( nullptr )
{
    
        m_DLL = ::LoadLibraryA( dllName.Get() );
        if ( !m_DLL )
        {
            do { FLog::Warning( "Cache plugin '%s' load failed (0x%x).",dllName.Get(), ::GetLastError() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
            return;
        }

        m_InitFunc		= (CacheInitFunc)		GetFunction( "CacheInit",		"?CacheInit@@YA_NPEBD@Z" );
        m_ShutdownFunc	= (CacheShutdownFunc)	GetFunction( "CacheShutdown",	"?CacheShutdown@@YAXXZ"  );
        m_PublishFunc	= (CachePublishFunc)	GetFunction( "CachePublish",	"?CachePublish@@YA_NPEBDPEBX_K@Z" );
        m_RetrieveFunc	= (CacheRetrieveFunc)	GetFunction( "CacheRetrieve",	"?CacheRetrieve@@YA_NPEBDAEAPEAXAEA_K@Z" );
        m_FreeMemoryFunc= (CacheFreeMemoryFunc)	GetFunction( "CacheFreeMemory", "?CacheFreeMemory@@YAXPEAX_K@Z" );
    





#line 57 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"
}



 CachePlugin::~CachePlugin()
{
}



void * CachePlugin::GetFunction( const char * friendlyName, const char * mangledName ) const
{
    
        do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_DLL ) ) { if ( AssertHandler::Failure( "m_DLL", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp", 70 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
        void * func = ::GetProcAddress( (HMODULE)m_DLL, mangledName );
        if ( !func )
        {
            do { FLog::Warning( "Missing CachePluginDLL function '%s' (Mangled: %s)",friendlyName, mangledName ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
        }
        return func;
    





#line 84 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"
}



 void CachePlugin::Shutdown()
{
    if ( m_ShutdownFunc )
    {
        (*m_ShutdownFunc)();
    }

    
        if ( m_DLL )
        {
            ::FreeLibrary( (HMODULE)m_DLL );
        }
    





#line 107 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp"
}



 bool CachePlugin::Init( const AString & cachePath )
{
	
	if ( m_InitFunc && m_ShutdownFunc && m_PublishFunc && m_RetrieveFunc && m_FreeMemoryFunc )
	{
		
		return (*m_InitFunc)( cachePath.Get() );
	}

	return false;
}



 bool CachePlugin::Publish( const AString & cacheId, const void * data, size_t dataSize )
{
	if ( m_PublishFunc )
	{
		return (*m_PublishFunc)( cacheId.Get(), data, dataSize );
	}
	return false;
}



 bool CachePlugin::Retrieve( const AString & cacheId, void * & data, size_t & dataSize )
{
	if ( m_RetrieveFunc )
	{
		unsigned long long size;
		bool ok = (*m_RetrieveFunc)( cacheId.Get(), data, size );
		dataSize = (size_t)size;
		return ok;
	}
	return false;
}



 void CachePlugin::FreeMemory( void * data, size_t dataSize )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_FreeMemoryFunc ) ) { if ( AssertHandler::Failure( "m_FreeMemoryFunc", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Cache\\CachePlugin.cpp", 152 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	if ( m_FreeMemoryFunc )
	{
		return (*m_FreeMemoryFunc)( data, dataSize );
	}
}


#line 76 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/MetaData/Meta_Name.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\MetaData\\Meta_Name.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\MetaData\\Meta_Name.cpp"




const ReflectionInfo * Meta_Name::GetReflectionInfoV() const { return Meta_Name::GetReflectionInfoS(); } class IMetaData_ReflectionInfo; extern IMetaData_ReflectionInfo g_IMetaData_ReflectionInfo; class Meta_Name_ReflectionInfo; extern Meta_Name_ReflectionInfo g_Meta_Name_ReflectionInfo; const ReflectionInfo * Meta_Name::s_ReflectionInfo( nullptr ); const ReflectionInfo * Meta_Name::GetReflectionInfoS() { return reinterpret_cast< const ReflectionInfo * >( &g_Meta_Name_ReflectionInfo ); } class Meta_Name_ReflectionInfo : public ReflectionInfo { public: typedef Meta_Name objectType; explicit Meta_Name_ReflectionInfo() { SetTypeName( "Meta_Name" ); Meta_Name::s_ReflectionInfo = this; AddProperties(); m_StructSize = 0; m_IsAbstract = false; m_SuperClass = reinterpret_cast< const ReflectionInfo * >( &g_IMetaData_ReflectionInfo ); AddMetaData( MetaNone() ); } virtual ~Meta_Name_ReflectionInfo() { Meta_Name::s_ReflectionInfo = nullptr; } virtual void * Create() const override { return new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\MetaData\\Meta_Name.cpp", 11 ) Meta_Name; } void AddProperties() { Meta_Name * c = nullptr; IMetaData * b = static_cast< IMetaData * >( c ); (void)b;
} }; Meta_Name_ReflectionInfo g_Meta_Name_ReflectionInfo; void Meta_Name_ReflectionInfo_Bind() { ReflectionInfo::BindReflection( g_Meta_Name_ReflectionInfo ); }



Meta_Name::Meta_Name()
{
}



Meta_Name::Meta_Name( const char * name )
	: m_Name( name )
{
}



Meta_Name::~Meta_Name()
{
}


#line 79 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/AliasNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\AliasNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\AliasNode.cpp"











AliasNode::AliasNode( const AString & groupName,
					  const Dependencies & targets )
: Node( groupName, Node::ALIAS_NODE, Node::FLAG_TRIVIAL_BUILD )
{
	m_LastBuildTimeMs = 1; 
	m_StaticDependencies = targets;
}



AliasNode::~AliasNode()
{
}



 bool AliasNode::DetermineNeedToBuild( bool forceClean ) const
{
	(void)forceClean;
	return true;
}



 Node::BuildResult AliasNode::DoBuild( Job *  )
{
	const Dependencies::Iter end = m_StaticDependencies.End();
	for ( Dependencies::Iter it = m_StaticDependencies.Begin();
		  it != end;
		  ++it )
	{
		
		const Node * n = it->GetNode();
		if ( n->GetType() == Node::FILE_NODE )
		{
			
			if ( n->GetStamp() == 0 )
			{
				
				do { FLog::Error( "Alias: %s\nFailed due to missing file: %s\n",GetName().Get(), n->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return Node::NODE_RESULT_FAILED;
			}
		}
	}
	return NODE_RESULT_OK;
}



 Node * AliasNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	Dependencies targets( 0, true ); if ( targets.Load( stream ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	return ng.CreateAliasNode( name, targets );
}



 void AliasNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	m_StaticDependencies.Save( stream );;
}


#line 82 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/CompilerNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CompilerNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CompilerNode.cpp"















const ReflectionInfo * CompilerNode::GetReflectionInfoV() const { return CompilerNode::GetReflectionInfoS(); } class Node_ReflectionInfo; extern Node_ReflectionInfo g_Node_ReflectionInfo; class CompilerNode_ReflectionInfo; extern CompilerNode_ReflectionInfo g_CompilerNode_ReflectionInfo; const ReflectionInfo * CompilerNode::s_ReflectionInfo( nullptr ); const ReflectionInfo * CompilerNode::GetReflectionInfoS() { return reinterpret_cast< const ReflectionInfo * >( &g_CompilerNode_ReflectionInfo ); } class CompilerNode_ReflectionInfo : public ReflectionInfo { public: typedef CompilerNode objectType; explicit CompilerNode_ReflectionInfo() { SetTypeName( "CompilerNode" ); CompilerNode::s_ReflectionInfo = this; AddProperties(); m_StructSize = 0; m_IsAbstract = false; m_SuperClass = reinterpret_cast< const ReflectionInfo * >( &g_Node_ReflectionInfo ); AddMetaData( MetaName( "Executable" ) + MetaFile() ); } virtual ~CompilerNode_ReflectionInfo() { CompilerNode::s_ReflectionInfo = nullptr; } virtual void * Create() const override { return new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CompilerNode.cpp", 22 ) CompilerNode; } void AddProperties() { CompilerNode * c = nullptr; Node * b = static_cast< Node * >( c ); (void)b;
	AddPropertyArray( &((objectType *)0)->m_ExtraFiles, "ExtraFiles" ); AddPropertyMetaData( MetaOptional() + MetaFile() );
} }; CompilerNode_ReflectionInfo g_CompilerNode_ReflectionInfo; void CompilerNode_ReflectionInfo_Bind() { ReflectionInfo::BindReflection( g_CompilerNode_ReflectionInfo ); }



CompilerNode::CompilerNode()
	: FileNode( AString::GetEmpty(), Node::FLAG_NO_DELETE_ON_FAIL )
{
	m_Type = Node::COMPILER_NODE;
}



CompilerNode::CompilerNode( const AString & exe,
						    const Dependencies & extraFiles,
							bool allowDistribution )
	: FileNode( exe, Node::FLAG_NO_DELETE_ON_FAIL )
{
	m_StaticDependencies = extraFiles;
	m_Type = Node::COMPILER_NODE;
	m_AllowDistribution = allowDistribution;
}



bool CompilerNode::Initialize( const BFFIterator & iter, const Function * function )
{
	
	Dependencies extraFiles( 32, true );
	if ( !function->GetNodeList( iter, ".ExtraFiles", extraFiles, false ) ) 
	{
		return false; 
	}

	m_StaticDependencies = extraFiles;

	return true;
}



CompilerNode::~CompilerNode()
{
}



 Node::BuildResult CompilerNode::DoBuild( Job * job )
{
	
	FileNode::DoBuild( job );

	if ( !m_Manifest.Generate( this, m_StaticDependencies ) )
	{
		return Node::NODE_RESULT_FAILED; 
	}

	m_Stamp = m_Manifest.GetTimeStamp();
	return Node::NODE_RESULT_OK;
}



 Node * CompilerNode::Load( IOStream & stream )
{
	AStackString<> exeName; if ( stream.Read( exeName ) == false ) { return nullptr; };
	Dependencies staticDeps( 16, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	bool allowDistribution; if ( stream.Read( allowDistribution ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	CompilerNode * n = ng.CreateCompilerNode( exeName, staticDeps, allowDistribution );
	n->m_Manifest.Deserialize( stream );
	return n;
}



 void CompilerNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	m_StaticDependencies.Save( stream );;
	stream.Write( m_AllowDistribution );;
	m_Manifest.Serialize( stream );
}


#line 85 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/CopyDirNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\CopyDirNode.h"


#pragma once












class CopyDirNode : public Node
{
public:
	explicit CopyDirNode( const AString & name,
						  Dependencies & staticDeps,
						  const AString & destPath,
						  const Dependencies & preBuildDeps );
	virtual ~CopyDirNode();

	static inline Node::Type GetType() { return Node::COPY_DIR_NODE; }
	virtual bool IsAFile() const;

	static Node * Load( IOStream & stream );
	virtual void Save( IOStream & stream ) const;

private:
	virtual bool DoDynamicDependencies( bool forceClean );
	virtual BuildResult DoBuild( Job * job );

	AString m_DestPath;
};


#line 40 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\graph\\CopyDirNode.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp"












CopyDirNode::CopyDirNode( const AString & name,
						  Dependencies & staticDeps,
						  const AString & destPath,
						  const Dependencies & preBuildDeps )
: Node( name, Node::COPY_DIR_NODE, Node::FLAG_NONE )
, m_DestPath( destPath )
{
	m_StaticDependencies.Append( staticDeps );
	m_PreBuildDependencies = preBuildDeps;
}



CopyDirNode::~CopyDirNode()
{
}



 bool CopyDirNode::IsAFile() const
{
	return false;
}



 bool CopyDirNode::DoDynamicDependencies( bool forceClean )
{
	(void)forceClean; 

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_StaticDependencies.IsEmpty() ) ) { if ( AssertHandler::Failure( "!m_StaticDependencies.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp", 51 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	const Dependency * const depEnd = m_StaticDependencies.End();
	for ( const Dependency * dep = m_StaticDependencies.Begin();
		  dep != depEnd;
		  ++dep )
	{
		
		DirectoryListNode * dln = dep->GetNode()->CastTo< DirectoryListNode >();
		const Array< FileIO::FileInfo > & files = dln->GetFiles();
		const FileIO::FileInfo * const fEnd = files.End();
		for ( const FileIO::FileInfo * fIt = files.Begin();
			  fIt != fEnd;
			  ++fIt )
		{
			

			
			const AString & srcFile = fIt->m_Name;

			
			const AStackString<> srcFileRel( srcFile.Get() + dln->GetPath().GetLength() );

			
			Node * srcFileNode = ng.FindNode( srcFile );
			if ( srcFileNode == nullptr )
			{
				srcFileNode = ng.CreateFileNode( srcFile );
			}
			else if ( srcFileNode->IsAFile() == false )
			{
				do { FLog::Error( "CopyDir() Node '%s' is not a FileNode (type: %s)",srcFile.Get(), srcFileNode->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}

			
			const AStackString<> dstFile( m_DestPath );
			(AString &)dstFile += (AString &)srcFileRel;

			
			Node * n = ng.FindNode( dstFile );
			if ( n == nullptr )
			{
				n = ng.CreateCopyNode( dstFile, srcFileNode, m_PreBuildDependencies ); 
			}
			else if ( n->GetType() != Node::COPY_NODE )
			{
				do { FLog::Error( "Node '%s' is not a CopyNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}
			else
			{
				CopyNode * cn = n->CastTo< CopyNode >();
				if ( srcFileNode != cn->GetSourceNode() )
				{
					do { FLog::Error( "Conflicting objects found during CopyDir:\n" " File A: %s\n" " File B: %s\n" " Both copy to: %s\n",srcFile.Get(), cn->GetSourceNode()->GetName().Get(), dstFile.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 116 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp"
					return false;
				}
			}

			m_DynamicDependencies.Append( Dependency( n ) );
		}
	}
	return true;
}



 Node::BuildResult CopyDirNode::DoBuild( Job *  )
{
	
	uint64_t timeStamp = 0;
	const Dependency * const end = m_DynamicDependencies.End();
	for ( const Dependency * it = m_DynamicDependencies.Begin(); it != end; ++it )
	{
		CopyNode * cn = it->GetNode()->CastTo< CopyNode >();
		timeStamp = Math::Max< uint64_t >( timeStamp, cn->GetStamp() );
	}
	m_Stamp = timeStamp;

	return NODE_RESULT_OK;
}



 Node * CopyDirNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	Dependencies staticDeps( 4, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	AStackString<> destPath; if ( stream.Read( destPath ) == false ) { return nullptr; };
	Dependencies preBuildDeps( 0, true ); if ( preBuildDeps.Load( stream ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	CopyDirNode * n = ng.CreateCopyDirNode( name, staticDeps, destPath, preBuildDeps );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyDirNode.cpp", 154 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}



 void CopyDirNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	m_StaticDependencies.Save( stream );;
	stream.Write( m_DestPath );;
	m_PreBuildDependencies.Save( stream );;
}


#line 88 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/CopyNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp"














CopyNode::CopyNode( const AString & dstFileName,
					FileNode * sourceFile,
					const Dependencies & preBuildDependencies )
: FileNode( dstFileName, Node::FLAG_NONE )
, m_SourceFile( sourceFile )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( sourceFile ) ) { if ( AssertHandler::Failure( "sourceFile", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 27 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( sourceFile->IsAFile() ) ) { if ( AssertHandler::Failure( "sourceFile->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 28 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( Dependency( m_SourceFile ) );
	m_Type = Node::COPY_NODE;

	m_PreBuildDependencies = preBuildDependencies;
}



CopyNode::~CopyNode()
{
}



 Node::BuildResult CopyNode::DoBuild( Job *  )
{
	EmitCopyMessage();

	
	if ( FileIO::FileCopy( m_SourceFile->GetName().Get(), m_Name.Get() ) == false )
	{
		do { FLog::Error( "Copy failed (error %i) '%s'",Env::GetLastErr(), GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED; 
	}

	if ( FileIO::SetReadOnly( m_Name.Get(), false ) == false )
	{
		do { FLog::Error( "Copy read-only flag set failed (error %i) '%s'",Env::GetLastErr(), GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED; 
	}

	
	
	
	
	
	m_Stamp = FileIO::GetFileLastWriteTime( m_SourceFile->GetName() );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Stamp ) ) { if ( AssertHandler::Failure( "m_Stamp", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 66 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( FileIO::SetFileLastWriteTime( m_Name, m_Stamp ) == false )
	{
		do { FLog::Error( "Copy set last write time failed (error %i) '%s'",Env::GetLastErr(), GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		m_Stamp = 0;
		return NODE_RESULT_FAILED; 
	}

	return NODE_RESULT_OK;
}



 Node * CopyNode::Load( IOStream & stream )
{
	AStackString<> fileName; if ( stream.Read( fileName ) == false ) { return nullptr; };
	AStackString<> sourceFile; if ( stream.Read( sourceFile ) == false ) { return nullptr; };
	Dependencies preBuildDependencies( 0, true ); if ( preBuildDependencies.Load( stream ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * srcNode = ng.FindNode( sourceFile );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( srcNode ) ) { if ( AssertHandler::Failure( "srcNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 87 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( srcNode->IsAFile() ) ) { if ( AssertHandler::Failure( "srcNode->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 88 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	CopyNode * n = ng.CreateCopyNode( fileName, (FileNode *)srcNode, preBuildDependencies );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CopyNode.cpp", 90 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}



 void CopyNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	stream.Write( m_SourceFile->GetName() );;
	m_PreBuildDependencies.Save( stream );;
}



void CopyNode::EmitCopyMessage() const
{
	
	
	AStackString<> output;
	output += "Copy: ";
	output += m_StaticDependencies[ 0 ].GetNode()->GetName();
	output += " -> ";
	output += GetName();
	output += '\n';
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}


#line 91 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/CSNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp"






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/CIncludeParser.h"



#pragma once










class CIncludeParser
{
public:
	explicit CIncludeParser();
	~CIncludeParser();

	bool ParseMSCL_Output( const char * compilerOutput, size_t compilerOutputSize );
	bool ParseMSCL_Preprocessed( const char * compilerOutput, size_t compilerOutputSize );
	bool ParseGCC_Preprocessed( const char * compilerOutput, size_t compilerOutputSize );

	const Array< AString > & GetIncludes() const { return m_Includes; }

	
	void SwapIncludes( Array< AString > & includes );
	
		inline size_t GetNonUniqueCount() const { return m_NonUniqueCount; }
	#line 32 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/CIncludeParser.h"

private:
	void AddInclude( const char * begin, const char * end );

	
	uint32_t			m_LastCRC1;
	Array< uint32_t >	m_CRCs1;
	uint32_t			m_LastCRC2;
	Array< uint32_t >	m_CRCs2;

	
	Array< AString > m_Includes;	
	
		size_t m_NonUniqueCount;	
	#line 47 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/CIncludeParser.h"
};


#line 51 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/CIncludeParser.h"
#line 14 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/ResponseFile.h"


#pragma once





class AString;








class ResponseFile
{
public:
	explicit ResponseFile();
	~ResponseFile();

	bool Create( const AString & contents );
	const AString & GetResponseFilePath() const { return m_ResponseFilePath; }

	void SetEscapeSlashes() { m_EscapeSlashes = true; }
private:
	bool CreateInternal( const AString & contents );

	FileStream m_File;
	AStackString<> m_ResponseFilePath;
	bool m_EscapeSlashes;
};


#line 38 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/ResponseFile.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp"



#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Math/CRC32.h"


#pragma once










class CRC32
{
public:
	static inline uint32_t	Start() { return 0xFFFFFFFF; }
	static uint32_t			Update( uint32_t crc32, const void * buffer, size_t len );
	static uint32_t			UpdateLower( uint32_t crc32, const void * buffer, size_t len );
	static inline uint32_t	Stop( uint32_t crc32 ) { return ( crc32 ^ 0xFFFFFFFF ); }

	static uint32_t			Calc( const void * buffer, size_t len );
	static uint32_t			CalcLower( const void * buffer, size_t len );

	inline static uint32_t	Calc( const AString & string )		{ return Calc( string.Get(), string.GetLength() ); }
	inline static uint32_t	CalcLower( const AString & string ) { return CalcLower( string.Get(), string.GetLength() ); }
};


#line 31 "c:\\Users\\Franta\\p4\\Code\\Core/Math/CRC32.h"
#line 19 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp"






CSNode::CSNode( const AString & compilerOutput,
				const Dependencies & inputNodes,
				const AString & compiler,
				const AString & compilerArgs,
				const Dependencies & extraRefs )
: FileNode( compilerOutput, Node::FLAG_NONE )
, m_ExtraRefs( extraRefs )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !inputNodes.IsEmpty() ) ) { if ( AssertHandler::Failure( "!inputNodes.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp", 33 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	m_StaticDependencies.SetCapacity( inputNodes.GetSize() + extraRefs.GetSize() );
	m_StaticDependencies.Append( inputNodes );
	m_StaticDependencies.Append( extraRefs );

	
	m_CompilerPath = compiler; 
	m_CompilerArgs = compilerArgs;

	m_Type = CS_NODE;
	m_LastBuildTimeMs = 5000; 
}



CSNode::~CSNode()
{
}



 bool CSNode::DoDynamicDependencies( bool  )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_DynamicDependencies.GetSize() == 0 ) ) { if ( AssertHandler::Failure( "m_DynamicDependencies.GetSize() == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp", 57 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	m_DynamicDependencies.SetCapacity( m_StaticDependencies.GetSize() );

	
	
	size_t numDeps = m_StaticDependencies.GetSize() - m_ExtraRefs.GetSize();
	for ( size_t i=0; i<numDeps; ++i ) 
	{
		Node * n = m_StaticDependencies[ i ].GetNode();

		if ( n->IsAFile() )
		{
			m_DynamicDependencies.Append( Dependency( n ) );
			continue;
		}

		if ( n->GetType() == Node::DIRECTORY_LIST_NODE )
		{
			
			DirectoryListNode * dln = n->CastTo< DirectoryListNode >();
			const Array< FileIO::FileInfo > & files = dln->GetFiles();
			m_DynamicDependencies.SetCapacity( m_DynamicDependencies.GetSize() + files.GetSize() );
			for ( Array< FileIO::FileInfo >::Iter fIt = files.Begin();
					fIt != files.End();
					fIt++ )
			{
				
				Node * sn = ng.FindNode( fIt->m_Name );
				if ( sn == nullptr )
				{
					sn = ng.CreateFileNode( fIt->m_Name );
				}
				else if ( sn->IsAFile() == false )
				{
					do { FLog::Error( "CSAssembly() .CompilerInputFile '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				m_DynamicDependencies.Append( Dependency( sn ) );
			}
			continue;
		}

		do { FLog::Error( "'%s' is not a supported node type (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	return true;
}



 Node::BuildResult CSNode::DoBuild( Job * job )
{
	
	AStackString< 4 * (1024) > fullArgs;
	GetFullArgs( fullArgs );

	
	const char * workingDir = nullptr;

	const char * environment = FBuild::Get().GetEnvironmentString();

	EmitCompilationMessage( fullArgs );

	
	ResponseFile rf;
	AStackString<> responseFileArgs;
	if ( !rf.Create( fullArgs ) )
	{
		return NODE_RESULT_FAILED; 
	}

	
	responseFileArgs.Format( "@\"%s\"", rf.GetResponseFilePath().Get() );

	
	Process p;
	if ( p.Spawn( m_CompilerPath.Get(), responseFileArgs.Get(),
				  workingDir, environment ) == false )
	{
		do { FLog::Error( "Failed to spawn process to build '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	AutoPtr< char > memOut;
	AutoPtr< char > memErr;
	uint32_t memOutSize = 0;
	uint32_t memErrSize = 0;
	p.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !p.IsRunning() ) ) { if ( AssertHandler::Failure( "!p.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp", 154 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	int result = p.WaitForExit();
	bool ok = ( result == 0 );

	if ( !ok )
	{
		
		Node::DumpOutput( job, memOut.Get(), memOutSize );
		Node::DumpOutput( job, memErr.Get(), memErrSize );
		goto failed;
	}

	if ( !FileIO::FileExists( m_Name.Get() ) )
	{
		do { FLog::Error( "Object missing despite success for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );

	return NODE_RESULT_OK;

failed:
	do { FLog::Error( "Failed to build Object (error %i) '%s'",result, GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return NODE_RESULT_FAILED;
}



 Node * CSNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	Dependencies staticDeps( 2, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	AStackString<> compilerPath; if ( stream.Read( compilerPath ) == false ) { return nullptr; };
	AStackString<> compilerArgs; if ( stream.Read( compilerArgs ) == false ) { return nullptr; };
	Dependencies extraRefs( 0, true ); if ( extraRefs.Load( stream ) == false ) { return nullptr; };

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( staticDeps.GetSize() >= 1 ) ) { if ( AssertHandler::Failure( "staticDeps.GetSize() >= 1", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\CSNode.cpp", 193 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * on = ng.CreateCSNode( name, staticDeps, compilerPath, compilerArgs, extraRefs );
	CSNode * csNode = on->CastTo< CSNode >();
	return csNode;
}



 void CSNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;

	
	size_t numBaseDeps = m_StaticDependencies.GetSize() - m_ExtraRefs.GetSize();
	Dependencies staticDeps( numBaseDeps, false );
	for ( size_t i=0; i<numBaseDeps; ++i )
	{
		staticDeps.Append( Dependency( m_StaticDependencies[ i ].GetNode() ) );
	}
	staticDeps.Save( stream );;

	stream.Write( m_CompilerPath );;
	stream.Write( m_CompilerArgs );;
	m_ExtraRefs.Save( stream );;
}



void CSNode::EmitCompilationMessage( const AString & fullArgs ) const
{
	
	
	
	AStackString<> output;
	output += "C#: ";
	output += GetName();
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += m_CompilerPath;
		output += ' ';
		output += fullArgs;
		output += '\n';
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



void CSNode::GetFullArgs( AString & fullArgs ) const
{
	
	Array< AString > tokens( 1024, true );
	m_CompilerArgs.Tokenize( tokens );

	AStackString<> quote( "\"" );

	const AString * const end = tokens.End();
	for ( const AString * it = tokens.Begin(); it!=end; ++it )
	{
		const AString & token = *it;
		if ( token.EndsWith( "%1" ) )
		{
			
			AStackString<> pre;
			if ( token.GetLength() > 2 )
			{
				pre.Assign( token.Get(), token.GetEnd() - 2 );
			}

			
			GetInputFiles( fullArgs, pre, AString::GetEmpty() );
		}
		else if ( token.EndsWith( "\"%1\"" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 3 ); 

			
			GetInputFiles( fullArgs, pre, quote );
		}
		else if ( token.EndsWith( "%2" ) )
		{
			
			if ( token.GetLength() > 2 )
			{
				fullArgs += AStackString<>( token.Get(), token.GetEnd() - 2 );
			}
			fullArgs += m_Name;
		}
		else if ( token.EndsWith( "\"%2\"" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 3 ); 
			fullArgs += pre;
			fullArgs += m_Name;
			fullArgs += '"'; 
		}
		else if ( token.EndsWith( "%3" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 2 );
			fullArgs += pre;

			
			GetExtraRefs( fullArgs, AString::GetEmpty(), AString::GetEmpty() );
		}
		else if ( token.EndsWith( "\"%3\"" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 4 );
			fullArgs += pre;

			
			GetExtraRefs( fullArgs, quote, quote );
		}
		else
		{
			fullArgs += token;
		}

		fullArgs += ' ';
	}
}



void CSNode::GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const
{
	bool first = true;
	const Dependency * const end = m_DynamicDependencies.End();
	for ( const Dependency * it = m_DynamicDependencies.Begin();
		  it != end;
		  ++it )
	{
		if ( !first )
		{
			fullArgs += ' ';
		}
		fullArgs += pre;
		fullArgs += it->GetNode()->GetName();
		fullArgs += post;
		first = false;
	}
}



void CSNode::GetExtraRefs( AString & fullArgs, const AString & pre, const AString & post ) const
{
	bool first = true;
	const Dependency * const end = m_ExtraRefs.End();
	for ( const Dependency * it = m_ExtraRefs.Begin(); it!=end; ++it )
	{
		if ( !first )
		{
			fullArgs += ',';
		}
		fullArgs += pre;
		fullArgs += it->GetNode()->GetName();
		fullArgs += post;
		first = false;
	}
}


#line 94 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/Dependencies.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Dependencies.cpp"






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 8 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Dependencies.cpp"



























void Dependencies::Save( IOStream & stream ) const
{
	size_t numDeps = GetSize();
	stream.Write( (uint32_t)numDeps );

	Iter end = End();
	for ( Iter it = Begin(); it != end; ++it )
	{
		const Dependency & dep = *it;

		
		uint32_t index = dep.GetNode()->GetIndex();
		stream.Write( index );

		
		bool isWeak = dep.IsWeak();
		stream.Write( isWeak );
	}
}



bool Dependencies::Load( IOStream & stream )
{
	uint32_t numDeps;
	if ( stream.Read( numDeps ) == false )
	{
		return false;
	}
	if ( GetCapacity() < GetSize() + numDeps )
	{
		SetCapacity( GetSize() + numDeps );
	}
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	for ( uint32_t i=0; i<numDeps; ++i )
	{
		
		uint32_t index( ( (uint32_t)0xFFFFFFFF ) );
		if ( stream.Read( index ) == false )
		{
			return false;
		}

		
		Node * node = ng.GetNodeByIndex( index );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node ) ) { if ( AssertHandler::Failure( "node", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Dependencies.cpp", 80 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		
		bool isWeak( false );
		if ( stream.Read( isWeak ) == false )
		{
			return false;
		}

		
		Append( Dependency( node, isWeak ) );
	}
	return true;
}

#line 97 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/DirectoryListNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp"















DirectoryListNode::DirectoryListNode( const AString & name,
									  const AString & path,
									  const AString & wildcard,
								      bool recursive,
									  const Array< AString > & excludePaths,
                                      const Array< AString > & filesToExclude )
: Node( name, Node::DIRECTORY_LIST_NODE, Node::FLAG_NONE )
	, m_Path( path )
	, m_WildCard( wildcard )
	, m_ExcludePaths( excludePaths )
	, m_Recursive( recursive )
    , m_FilesToExclude( filesToExclude )
	, m_Files( 4096, true )
{
	
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name.BeginsWith( path ) ) ) { if ( AssertHandler::Failure( "name.BeginsWith( path )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 38 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name[ path.GetLength() ] == '|' ) ) { if ( AssertHandler::Failure( "name[ path.GetLength() ] == '|'", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 39 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( name.Find( wildcard.Get() ) == name.Get() + path.GetLength() + 1 ) ) { if ( AssertHandler::Failure( "name.Find( wildcard.Get() ) == name.Get() + path.GetLength() + 1", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 40 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( recursive && name.Find( "|true|" ) ) || ( !recursive && name.Find( "|false|" ) ) ) ) { if ( AssertHandler::Failure( "( recursive && name.Find( \"|true|\" ) ) || ( !recursive && name.Find( \"|false|\" ) )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 42 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
#line 43 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp"

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( path.EndsWith( ( '\\' ) ) ) ) { if ( AssertHandler::Failure( "path.EndsWith( NATIVE_SLASH )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 45 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	
		const AString * const end = excludePaths.End();
		for ( const AString * it=excludePaths.Begin(); it != end; ++it )
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( *it ).EndsWith( ( '\\' ) ) ) ) { if ( AssertHandler::Failure( "( *it ).EndsWith( NATIVE_SLASH )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 52 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		}
	#line 55 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp"
}



DirectoryListNode::~DirectoryListNode()
{
}



 void DirectoryListNode::FormatName( const AString & path,
											   const AString & pattern,
											   bool recursive,
											   const Array< AString > & excludePaths,
                                               const Array< AString > & excludeFiles,
											   AString & result )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( path.EndsWith( ( '\\' ) ) ) ) { if ( AssertHandler::Failure( "path.EndsWith( NATIVE_SLASH )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 72 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( pattern.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "pattern.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 73 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	result.Format( "%s|%s|%s|", path.Get(),
								  pattern.Get(),
								  recursive ? "true" : "false" );

	const AString * const end = excludePaths.End();
	for ( const AString * it = excludePaths.Begin(); it!=end; ++it )
	{
		const AString & excludePath = *it;
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( excludePath.EndsWith( ( '\\' ) ) ) ) { if ( AssertHandler::Failure( "excludePath.EndsWith( NATIVE_SLASH )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 83 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		result += excludePath;
		result += '<';
	}

    if ( !excludeFiles.IsEmpty() )
    {
        result += '|';
        const AString * const endFiles = excludeFiles.End();
        for ( const AString * itFiles = excludeFiles.Begin(); itFiles != endFiles; ++itFiles )
        {
            const AString & excludedFile = *itFiles;
            result += excludedFile;
            result += '<';
        }
    }
}



 Node::BuildResult DirectoryListNode::DoBuild( Job *  )
{
	
	

	Array< FileIO::FileInfo > files( 4096, true );
	FileIO::GetFilesEx( m_Path, m_WildCard, m_Recursive, &files );

	m_Files.SetCapacity( files.GetSize() );

	
	const FileIO::FileInfo * const end = files.End();
	for ( const FileIO::FileInfo * it = files.Begin(); it != end; it++ )
	{
		bool excluded = false;
        
		
		const AString * const eEnd = m_ExcludePaths.End();
		for ( const AString * eIt=m_ExcludePaths.Begin(); eIt != eEnd; ++eIt )
		{
			if ( PathUtils::PathBeginsWith( it->m_Name, *eIt ) )
			{
				excluded = true;
				break;
			}
		}

        
		if ( !excluded )
		{
	        const AString * fit = m_FilesToExclude.Begin();
	        const AString * const fend = m_FilesToExclude.End();
	        for ( ; fit != fend; ++fit )
	        {
				if ( PathUtils::PathEndsWithFile( it->m_Name, *fit ) )
	            {
	                excluded = true;
	                break;
	            }
	        }
		}

		if ( !excluded )
		{
			m_Files.Append( *it );
		}
	}

	if ( FLog::ShowInfo() )
	{
		const size_t numFiles = m_Files.GetSize();
		do { if ( FLog::ShowInfo() ) { FLog::Info( "Dir: '%s' (found %u files)\n",m_Name.Get(), (uint32_t)numFiles ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 157 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp"
		for ( size_t i=0; i<numFiles; ++i )
		{
			do { if ( FLog::ShowInfo() ) { FLog::Info( " - %s\n",m_Files[ i ].m_Name.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		}
	}

	return NODE_RESULT_OK;
}



 Node * DirectoryListNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	AStackString<> path; if ( stream.Read( path ) == false ) { return nullptr; };
	AStackString<> wildCard; if ( stream.Read( wildCard ) == false ) { return nullptr; };
	Array< AString > excludePaths; if ( stream.Read( excludePaths ) == false ) { return nullptr; };
	bool recursive; if ( stream.Read( recursive ) == false ) { return nullptr; };
    Array< AString > filesToExclude; if ( stream.Read( filesToExclude ) == false ) { return nullptr; };


	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * n = ng.CreateDirectoryListNode( name, path, wildCard, recursive, excludePaths, filesToExclude );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DirectoryListNode.cpp", 180 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}



 void DirectoryListNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	stream.Write( m_Path );;
	stream.Write( m_WildCard );;
	stream.Write( m_ExcludePaths );;
	stream.Write( m_Recursive );;
    stream.Write( m_FilesToExclude );;
}


#line 100 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/DLLNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DLLNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\DLLNode.cpp"











DLLNode::DLLNode( const AString & linkerOutputName,
				  const Dependencies & inputLibraries,
				  const Dependencies & otherLibraries,
				  const AString & linker,
				  const AString & linkerArgs,
				  uint32_t flags,
				  const Dependencies & assemblyResources,
				  const AString & importLibName,
				  Node * linkerStampExe,
				  const AString & linkerStampExeArgs )
: LinkerNode( linkerOutputName, inputLibraries, otherLibraries, linker, linkerArgs, flags, assemblyResources, linkerStampExe, linkerStampExeArgs )
, m_ImportLibName( importLibName )
{
	m_Type = DLL_NODE;
}



DLLNode::~DLLNode()
{
}



void DLLNode::GetImportLibName( AString & importLibName ) const
{
	
	if ( m_ImportLibName.IsEmpty() == false )
	{
		importLibName = m_ImportLibName;
		return;
	}

	
	const char * lastDot = GetName().FindLast( '.' );
	lastDot = lastDot ? lastDot : GetName().GetEnd();
	importLibName.Assign( GetName().Get(), lastDot );

	
	importLibName += ".lib";
}



 Node * DLLNode::Load( IOStream & stream )
{
    
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	AStackString<> linker; if ( stream.Read( linker ) == false ) { return nullptr; };
	AStackString<> linkerArgs; if ( stream.Read( linkerArgs ) == false ) { return nullptr; };
	Dependencies inputLibs( 0, true ); if ( inputLibs.Load( stream ) == false ) { return nullptr; };
	uint32_t flags; if ( stream.Read( flags ) == false ) { return nullptr; };
	Dependencies assemblyResources( 0, true ); if ( assemblyResources.Load( stream ) == false ) { return nullptr; };
	Dependencies otherLibs( 0, true ); if ( otherLibs.Load( stream ) == false ) { return nullptr; };
    Node * linkerStampExe = nullptr; if ( Node::LoadNode( stream, linkerStampExe ) == false ) { return nullptr; };
    AStackString<> linkerStampExeArgs; if ( stream.Read( linkerStampExeArgs ) == false ) { return nullptr; };

    
	AStackString<> importLibName; if ( stream.Read( importLibName ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	DLLNode * dn = ng.CreateDLLNode( name, inputLibs, otherLibs, linker, linkerArgs, flags, assemblyResources, importLibName, linkerStampExe, linkerStampExeArgs );
	return dn;
}



 void DLLNode::Save( IOStream & stream ) const
{
	
	LinkerNode::Save( stream );

	
	stream.Write( m_ImportLibName );;
}


#line 103 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/ExecNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp"















ExecNode::ExecNode( const AString & dstFileName,
					    FileNode * sourceFile,
						FileNode * executable,
						const AString & arguments,
						const AString & workingDir,
						int32_t expectedReturnCode,
						const Dependencies & preBuildDependencies )
: FileNode( dstFileName, Node::FLAG_NONE )
, m_SourceFile( sourceFile )
, m_Executable( executable )
, m_Arguments( arguments )
, m_WorkingDir( workingDir )
, m_ExpectedReturnCode( expectedReturnCode )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( sourceFile ) ) { if ( AssertHandler::Failure( "sourceFile", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 36 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( executable ) ) { if ( AssertHandler::Failure( "executable", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 37 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.SetCapacity( 2 );
	m_StaticDependencies.Append( Dependency( sourceFile ) );
	m_StaticDependencies.Append( Dependency( executable ) );
	m_Type = EXEC_NODE;

	m_PreBuildDependencies = preBuildDependencies;
}



ExecNode::~ExecNode()
{
}



 Node::BuildResult ExecNode::DoBuild( Job * job )
{
	
	const char * workingDir = m_WorkingDir.IsEmpty() ? nullptr : m_WorkingDir.Get();

	AStackString<> fullArgs( m_Arguments );
	fullArgs.Replace( "%1", m_SourceFile->GetName().Get() );
	fullArgs.Replace( "%2", GetName().Get() );

	EmitCompilationMessage( fullArgs );

	
	Process p;
	bool spawnOK = p.Spawn( m_Executable->GetName().Get(),
							fullArgs.Get(),
							workingDir,
							FBuild::Get().GetEnvironmentString() );

	if ( !spawnOK )
	{
		do { FLog::Error( "Failed to spawn process for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	AutoPtr< char > memOut;
	AutoPtr< char > memErr;
	uint32_t memOutSize = 0;
	uint32_t memErrSize = 0;
	p.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !p.IsRunning() ) ) { if ( AssertHandler::Failure( "!p.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 85 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	
	int result = p.WaitForExit();

	
	if ( result != m_ExpectedReturnCode )
	{
		
		Node::DumpOutput( job, memOut.Get(), memOutSize );
		Node::DumpOutput( job, memErr.Get(), memErrSize );

		do { FLog::Error( "Execution failed (error %i) '%s'",result, GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );
	return NODE_RESULT_OK;
}



 Node * ExecNode::Load( IOStream & stream )
{
	AStackString<> fileName; if ( stream.Read( fileName ) == false ) { return nullptr; };
	AStackString<> sourceFile; if ( stream.Read( sourceFile ) == false ) { return nullptr; };
	AStackString<> executable; if ( stream.Read( executable ) == false ) { return nullptr; };
	AStackString<> arguments; if ( stream.Read( arguments ) == false ) { return nullptr; };
	AStackString<> workingDir; if ( stream.Read( workingDir ) == false ) { return nullptr; };
	int32_t expectedReturnCode; if ( stream.Read( expectedReturnCode ) == false ) { return nullptr; };
	Dependencies preBuildDependencies( 0, true ); if ( preBuildDependencies.Load( stream ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * srcNode = ng.FindNode( sourceFile );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( srcNode ) ) { if ( AssertHandler::Failure( "srcNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 119 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( srcNode->IsAFile() ) ) { if ( AssertHandler::Failure( "srcNode->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 120 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	Node * execNode = ng.FindNode( executable );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( execNode ) ) { if ( AssertHandler::Failure( "execNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 122 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( execNode->IsAFile() ) ) { if ( AssertHandler::Failure( "execNode->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 123 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	ExecNode * n = ng.CreateExecNode( fileName, 
								  (FileNode *)srcNode,
								  (FileNode *)execNode,
								  arguments,
								  workingDir,
								  expectedReturnCode,
								  preBuildDependencies );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExecNode.cpp", 131 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	return n;
}



 void ExecNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	stream.Write( m_SourceFile->GetName() );;
	stream.Write( m_Executable->GetName() );;
	stream.Write( m_Arguments );;
	stream.Write( m_WorkingDir );;
	stream.Write( m_ExpectedReturnCode );;
	m_PreBuildDependencies.Save( stream );;
}



void ExecNode::EmitCompilationMessage( const AString & args ) const
{
	
	AStackString< 2048 > output;
	output += "Run: ";
	output += GetName();
	output += '\n';

	
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		AStackString< 1024 > verboseOutput;
		verboseOutput.Format( "%s %s\nWorkingDir: %s\nExpectedReturnCode: %i\n", 
							  m_Executable->GetName().Get(), 
							  args.Get(),
							  m_WorkingDir.Get(),
							  m_ExpectedReturnCode );
		output += verboseOutput;
	}

	
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}


#line 106 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/ExeNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExeNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ExeNode.cpp"











ExeNode::ExeNode( const AString & linkerOutputName,
				  const Dependencies & inputLibraries,
				  const Dependencies & otherLibraries,
				  const AString & linker,
				  const AString & linkerArgs,
				  uint32_t flags,
				  const Dependencies & assemblyResources,
				  Node * linkerStampExe,
				  const AString & linkerStampExeArgs )
: LinkerNode( linkerOutputName, inputLibraries, otherLibraries, linker, linkerArgs, flags, assemblyResources, linkerStampExe, linkerStampExeArgs )
{
	m_Type = EXE_NODE;
}



ExeNode::~ExeNode()
{
}



 Node * ExeNode::Load( IOStream & stream )
{
    
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	AStackString<> linker; if ( stream.Read( linker ) == false ) { return nullptr; };
	AStackString<> linkerArgs; if ( stream.Read( linkerArgs ) == false ) { return nullptr; };
	Dependencies inputLibs( 0, true ); if ( inputLibs.Load( stream ) == false ) { return nullptr; };
	uint32_t flags; if ( stream.Read( flags ) == false ) { return nullptr; };
	Dependencies assemblyResources( 0, true ); if ( assemblyResources.Load( stream ) == false ) { return nullptr; };
	Dependencies otherLibs( 0, true ); if ( otherLibs.Load( stream ) == false ) { return nullptr; };
    Node * linkerStampExe = nullptr; if ( Node::LoadNode( stream, linkerStampExe ) == false ) { return nullptr; };
    AStackString<> linkerStampExeArgs; if ( stream.Read( linkerStampExeArgs ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	ExeNode * en = ng.CreateExeNode( name, inputLibs, otherLibs, linker, linkerArgs, flags, assemblyResources, linkerStampExe, linkerStampExeArgs );
	return en;
}


#line 109 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/FileNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp"












FileNode::FileNode( const AString & fileName, uint32_t controlFlags )
: Node( fileName, Node::FILE_NODE, controlFlags )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( fileName.EndsWith( "\\" ) == false ) ) { if ( AssertHandler::Failure( "fileName.EndsWith( \"\\\\\" ) == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp", 22 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( fileName.FindLast( ':' ) == nullptr ) || ( fileName.FindLast( ':' ) == ( fileName.Get() + 1 ) ) ) ) { if ( AssertHandler::Failure( "( fileName.FindLast( ':' ) == nullptr ) || ( fileName.FindLast( ':' ) == ( fileName.Get() + 1 ) )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp", 24 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
#line 25 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp"

	m_LastBuildTimeMs = 1; 
}



FileNode::~FileNode()
{
}



 Node::BuildResult FileNode::DoBuild( Job *  )
{
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );
	return NODE_RESULT_OK;
}



 Node * FileNode::Load( IOStream & stream )
{
	AStackString<> fileName; if ( stream.Read( fileName ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * n = ng.CreateFileNode( fileName );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\FileNode.cpp", 51 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}



 void FileNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
}


#line 112 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/LibraryNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp"






















LibraryNode::LibraryNode( const AString & libraryName,
						  const Dependencies & inputNodes,
						  CompilerNode * compiler,
						  const AString & compilerArgs,
						  const AString & compilerArgsDeoptimized,
						  const AString & compilerOutputPath,
						  const AString & librarian,
						  const AString & librarianArgs,
						  uint32_t flags,
						  ObjectNode * precompiledHeader,
						  const Dependencies & compilerForceUsing,
						  const Dependencies & preBuildDependencies,
						  const Dependencies & additionalInputs,
						  bool deoptimizeWritableFiles,
						  bool deoptimizeWritableFilesWithToken )
: FileNode( libraryName, Node::FLAG_NONE )
, m_CompilerForceUsing( compilerForceUsing )
, m_AdditionalInputs( additionalInputs )
, m_DeoptimizeWritableFiles( deoptimizeWritableFiles )
, m_DeoptimizeWritableFilesWithToken( deoptimizeWritableFilesWithToken )
{
	m_Type = LIBRARY_NODE;
	m_LastBuildTimeMs = 1000; 

	
	m_StaticDependencies = inputNodes;

	
	m_PrecompiledHeader = precompiledHeader;

	
	m_Compiler = compiler;
	m_CompilerArgs = compilerArgs;
	m_CompilerArgsDeoptimized = compilerArgsDeoptimized;
	m_CompilerOutputPath = compilerOutputPath;
	m_LibrarianPath = librarian; 
	m_LibrarianArgs = librarianArgs;
	m_Flags = flags;

	m_PreBuildDependencies = preBuildDependencies;
}



LibraryNode::~LibraryNode()
{
}



 bool LibraryNode::DoDynamicDependencies( bool forceClean )
{
	(void)forceClean; 

	
	m_DynamicDependencies.Clear();

	

	Node * pchCPP = nullptr;
	if ( m_PrecompiledHeader )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_PrecompiledHeader->GetType() == Node::OBJECT_NODE ) ) { if ( AssertHandler::Failure( "m_PrecompiledHeader->GetType() == Node::OBJECT_NODE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp", 91 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		pchCPP = m_PrecompiledHeader->GetPrecompiledHeaderCPPFile();
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	for ( Dependencies::Iter i = m_StaticDependencies.Begin();
		  i != m_StaticDependencies.End();
		  i++ )
	{
		
		if ( i->GetNode()->GetType() == Node::DIRECTORY_LIST_NODE )
		{
			
			DirectoryListNode * dln = i->GetNode()->CastTo< DirectoryListNode >();
			const Array< FileIO::FileInfo > & files = dln->GetFiles();
			m_DynamicDependencies.SetCapacity( m_DynamicDependencies.GetSize() + files.GetSize() );
			for ( Array< FileIO::FileInfo >::Iter fIt = files.Begin();
					fIt != files.End();
					fIt++ )
			{
				
				Node * n = ng.FindNode( fIt->m_Name );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( fIt->m_Name );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() .CompilerInputFile '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				
				if ( pchCPP && ( n == pchCPP ) )
				{
					continue;
				}

				
				if ( CreateDynamicObjectNode( n ) == false )
				{
					return false; 
				}
			}
		}
		else if ( i->GetNode()->GetType() == Node::FILE_NODE )
		{
			
			if ( CreateDynamicObjectNode( i->GetNode() ) == false )
			{
				return false; 
			}
		}
		else if ( i->GetNode()->GetType() == Node::UNITY_NODE )
		{
			
			UnityNode * un = i->GetNode()->CastTo< UnityNode >();

			
			const Array< AString > & unityFiles = un->GetUnityFileNames();
			for ( Array< AString >::Iter it = unityFiles.Begin();
				  it != unityFiles.End();
				  it++ )
			{
				Node * n = ng.FindNode( *it );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( *it );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() .CompilerInputUnity '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				if ( CreateDynamicObjectNode( n, true ) == false )
				{
					return false; 
				}
			}
			
			
			const Array< AString > & isolatedFiles = un->GetIsolatedFileNames();
			for ( Array< AString >::Iter it = isolatedFiles.Begin();
				  it != isolatedFiles.End();
				  it++ )
			{
				Node * n = ng.FindNode( *it );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( *it );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() Isolated '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				if ( CreateDynamicObjectNode( n, false, true ) == false )
				{
					return false; 
				}
			}
		}
		else
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp", 202 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		}
	}

	
	

	
	
	
	
	if ( m_PrecompiledHeader )
	{
		m_DynamicDependencies.Append( Dependency( m_PrecompiledHeader ) );
	}

	
	m_DynamicDependencies.Append( m_AdditionalInputs );

	
	
	if ( m_DynamicDependencies.GetSize() == 0 )
	{
		do { FLog::Error( "No files found to build '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	return true;
}



 Node::BuildResult LibraryNode::DoBuild( Job *  )
{
	
	if ( FileIO::FileExists( GetName().Get() ) )
	{
		FileIO::FileDelete( GetName().Get() );
	}

	
	AStackString< 4 * (1024) > fullArgs;
	GetFullArgs( fullArgs );

	
	const char * workingDir = nullptr;

	const char * environment = FBuild::Get().GetEnvironmentString();

	EmitCompilationMessage( fullArgs );

	
	ResponseFile rf;
	AStackString<> responseFileArgs;
    

#line 259 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp"
        const bool useResponseFile = GetFlag( LIB_FLAG_LIB ) || GetFlag( LIB_FLAG_AR ) || GetFlag( LIB_FLAG_ORBIS_AR ) || GetFlag( LIB_FLAG_GREENHILLS_AX );
    #line 261 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp"
	if ( useResponseFile )
	{
		
		if ( GetFlag( LIB_FLAG_ORBIS_AR ) )
		{
			rf.SetEscapeSlashes();
		}

		
		if ( !rf.Create( fullArgs ) )
		{
			return NODE_RESULT_FAILED; 
		}

		
		responseFileArgs.Format( "@\"%s\"", rf.GetResponseFilePath().Get() );
	}

	
	Process p;
	bool spawnOK = p.Spawn( m_LibrarianPath.Get(),
							useResponseFile ? responseFileArgs.Get() : fullArgs.Get(),
							workingDir,
							environment );

	if ( !spawnOK )
	{
		do { FLog::Error( "Failed to spawn process for Library creation for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	AutoPtr< char > memOut;
	AutoPtr< char > memErr;
	uint32_t memOutSize = 0;
	uint32_t memErrSize = 0;
	p.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !p.IsRunning() ) ) { if ( AssertHandler::Failure( "!p.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp", 299 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	
	int result = p.WaitForExit();

	if ( result != 0 )
	{
		if ( memOut.Get() ) { do { FLog::ErrorDirect( memOut.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }
		if ( memErr.Get() ) { do { FLog::ErrorDirect( memErr.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }
	}

	
	if ( result != 0 )
	{
		do { FLog::Error( "Failed to build Library (error %i) '%s'",result, GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Stamp ) ) { if ( AssertHandler::Failure( "m_Stamp", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp", 318 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	return NODE_RESULT_OK;
}



void LibraryNode::GetFullArgs( AString & fullArgs ) const
{
	Array< AString > tokens( 1024, true );
	m_LibrarianArgs.Tokenize( tokens );

	const AString * const end = tokens.End();
	for ( const AString * it = tokens.Begin(); it!=end; ++it )
	{
		const AString & token = *it;
		if ( token.EndsWith( "%1" ) )
		{
			
			AStackString<> pre;
			if ( token.GetLength() > 2 )
			{
				pre.Assign( token.Get(), token.GetEnd() - 2 );
			}

			
			GetInputFiles( fullArgs, pre, AString::GetEmpty() );
		}
		else if ( token.EndsWith( "\"%1\"" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 3 ); 
			AStackString<> post( "\"" );

			
			GetInputFiles( fullArgs, pre, post );
		}
		else if ( token.EndsWith( "%2" ) )
		{
			
			if ( token.GetLength() > 2 )
			{
				fullArgs += AStackString<>( token.Get(), token.GetEnd() - 2 );
			}
			fullArgs += m_Name;
		}
		else if ( token.EndsWith( "\"%2\"" ) )
		{
			
			AStackString<> pre( token.Get(), token.GetEnd() - 3 ); 
			fullArgs += pre;
			fullArgs += m_Name;
			fullArgs += '"'; 
		}
		else
		{
			fullArgs += token;
		}

		fullArgs += ' ';
	}
}



void LibraryNode::GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const
{
	for ( Dependencies::Iter i = m_DynamicDependencies.Begin();
		  i != m_DynamicDependencies.End();
		  i++ )
	{
		const Node * n = i->GetNode();

		
		if ( n->GetType() == Node::OBJECT_NODE )
		{
			
			const ObjectNode * on = n->CastTo< ObjectNode >();
			if ( on->IsCreatingPCH() )
			{
				if ( on->IsMSVC() )
				{
					fullArgs += pre;
					fullArgs += on->GetName();
					fullArgs += on->GetObjExtension();
					fullArgs += post;
					fullArgs += ' ';
					continue;
				}
				else
				{
					
					continue; 
				}
			}
		}

		
		if ( n->GetType() == Node::OBJECT_LIST_NODE )
		{
			
			ObjectListNode * oln = n->CastTo< ObjectListNode >();
			oln->GetInputFiles( fullArgs, pre, post );
			continue;
		}

		
		fullArgs += pre;
		fullArgs += n->GetName();
		fullArgs += post;
		fullArgs += ' ';
	}
}



 uint32_t LibraryNode::DetermineFlags( const AString & librarianName )
{
	uint32_t flags = 0;
	if ( librarianName.EndsWithI("lib.exe") ||
		 librarianName.EndsWithI("lib") )
	{
		flags |= LIB_FLAG_LIB;
	}
	else if ( librarianName.EndsWithI("ar.exe") ||
		 librarianName.EndsWithI("ar") )
	{
		if ( librarianName.FindI( "orbis-ar" ) )
		{
			flags |= LIB_FLAG_ORBIS_AR;
		}
		else
		{
			flags |= LIB_FLAG_AR;
		}
	}
	else if ( librarianName.EndsWithI( "\\ax.exe" ) ||
			  librarianName.EndsWithI( "\\ax" ) )
	{
		flags |= LIB_FLAG_GREENHILLS_AX;
	}
	return flags;
}



bool LibraryNode::CreateDynamicObjectNode( Node * inputFile, bool isUnityNode, bool isIsolatedFromUnityNode )
{
	const AString & fileName = inputFile->GetName();

	
	
	const char * lastSlash = fileName.FindLast( ( '\\' ) );
	lastSlash = lastSlash ? ( lastSlash + 1 ) : fileName.Get();
	const char * lastDot = fileName.FindLast( '.' );
	lastDot = lastDot && ( lastDot > lastSlash ) ? lastDot : fileName.GetEnd();
	AStackString<> fileNameOnly( lastSlash, lastDot );
	AStackString<> objFile( m_CompilerOutputPath );
	objFile += fileNameOnly;
	objFile += GetObjExtension();

	
	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * on = ng.FindNode( objFile );
	if ( on == nullptr )
	{
		uint32_t flags = ObjectNode::DetermineFlags( m_Compiler, m_CompilerArgs );
		if ( isUnityNode )
		{
			flags |= ObjectNode::FLAG_UNITY;
		}
		if ( isIsolatedFromUnityNode )
		{
			flags |= ObjectNode::FLAG_ISOLATED_FROM_UNITY;
		}

		on = ng.CreateObjectNode( objFile, inputFile, m_Compiler, m_CompilerArgs, m_CompilerArgsDeoptimized, m_PrecompiledHeader, flags, m_CompilerForceUsing, m_DeoptimizeWritableFiles, m_DeoptimizeWritableFilesWithToken );
	}
	else if ( on->GetType() != Node::OBJECT_NODE )
	{
		do { FLog::Error( "Node '%s' is not an ObjectNode (type: %s)",on->GetName().Get(), on->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	else 
	{
		ObjectNode * other = on->CastTo< ObjectNode >();
		if ( inputFile != other->GetSourceFile() )
		{
			do { FLog::Error( "Conflicting objects found:\n" " File A: %s\n" " File B: %s\n" " Both compile to: %s\n",inputFile->GetName().Get(), other->GetSourceFile()->GetName().Get(), objFile.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 514 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LibraryNode.cpp"
			return false;
		}
	}
	m_DynamicDependencies.Append( Dependency( on ) );
	return true;
}



void LibraryNode::EmitCompilationMessage( const AString & fullArgs ) const
{
	AStackString<> output;
	output += "Lib: ";
	output += GetName();
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += m_LibrarianPath;
		output += ' ';
		output += fullArgs;
		output += '\n';
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



 Node * LibraryNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	CompilerNode * compilerNode = nullptr; if ( Node::LoadNode( stream, compilerNode ) == false ) { return nullptr; };
	AStackString<> compilerArgs; if ( stream.Read( compilerArgs ) == false ) { return nullptr; };
	AStackString<> compilerArgsDeoptimized; if ( stream.Read( compilerArgsDeoptimized ) == false ) { return nullptr; };
	AStackString<> compilerOutputPath; if ( stream.Read( compilerOutputPath ) == false ) { return nullptr; };
	AStackString<> librarianPath; if ( stream.Read( librarianPath ) == false ) { return nullptr; };
	AStackString<> librarianArgs; if ( stream.Read( librarianArgs ) == false ) { return nullptr; };
	uint32_t flags; if ( stream.Read( flags ) == false ) { return nullptr; };
	Dependencies staticDeps( 16, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	Node * precompiledHeader = nullptr; if ( Node::LoadNode( stream, precompiledHeader ) == false ) { return nullptr; };
	AStackString<> objExtensionOverride; if ( stream.Read( objExtensionOverride ) == false ) { return nullptr; };
	Dependencies compilerForceUsing( 0, true ); if ( compilerForceUsing.Load( stream ) == false ) { return nullptr; };
	Dependencies preBuildDependencies( 0, true ); if ( preBuildDependencies.Load( stream ) == false ) { return nullptr; };
	Dependencies additionalInputs( 0, true ); if ( additionalInputs.Load( stream ) == false ) { return nullptr; };
	bool deoptimizeWritableFiles; if ( stream.Read( deoptimizeWritableFiles ) == false ) { return nullptr; };
	bool deoptimizeWritableFilesWithToken; if ( stream.Read( deoptimizeWritableFilesWithToken ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	LibraryNode * n = ng.CreateLibraryNode( name, 
								 staticDeps, 
								 compilerNode, 
								 compilerArgs,
								 compilerArgsDeoptimized,
								 compilerOutputPath, 
								 librarianPath, 
								 librarianArgs,
								 flags,
								 precompiledHeader ? precompiledHeader->CastTo< ObjectNode >() : nullptr,
								 compilerForceUsing,
								 preBuildDependencies,
								 additionalInputs,
								 deoptimizeWritableFiles,
								 deoptimizeWritableFilesWithToken );
	n->m_ObjExtensionOverride = objExtensionOverride;

	
	
	
	
	
	
	
	
	return n;
}



 void LibraryNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	Node::SaveNode( stream, m_Compiler );;
	stream.Write( m_CompilerArgs );;
	stream.Write( m_CompilerArgsDeoptimized );;
	stream.Write( m_CompilerOutputPath );;
	stream.Write( m_LibrarianPath );;
	stream.Write( m_LibrarianArgs );;
	stream.Write( m_Flags );;
	m_StaticDependencies.Save( stream );;
	Node::SaveNode( stream, m_PrecompiledHeader );;
	stream.Write( m_ObjExtensionOverride );;
	m_CompilerForceUsing.Save( stream );;
	m_PreBuildDependencies.Save( stream );;
	m_AdditionalInputs.Save( stream );;
	stream.Write( m_DeoptimizeWritableFiles );;
	stream.Write( m_DeoptimizeWritableFilesWithToken );;

	
	
	
	
	
}



const char * LibraryNode::GetObjExtension() const
{
	if ( m_ObjExtensionOverride.IsEmpty() )
	{
		return ".obj";
	}
	return m_ObjExtensionOverride.Get();
}


#line 115 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/LinkerNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp"





















LinkerNode::LinkerNode( const AString & linkerOutputName,
						 const Dependencies & inputLibraries,
						 const Dependencies & otherLibraries,
						 const AString & linker,
						 const AString & linkerArgs,
						 uint32_t flags,
						 const Dependencies & assemblyResources,
						 Node * linkerStampExe, 
						 const AString & linkerStampExeArgs )
: FileNode( linkerOutputName, Node::FLAG_NONE )
, m_Flags( flags )
, m_AssemblyResources( assemblyResources )
, m_OtherLibraries( otherLibraries )
, m_LinkerStampExe( linkerStampExe )
, m_LinkerStampExeArgs( linkerStampExeArgs )
{
	m_LastBuildTimeMs = 20000;

	
	size_t numStaticDeps = inputLibraries.GetSize() + assemblyResources.GetSize() + otherLibraries.GetSize();
	if ( linkerStampExe )
	{
		numStaticDeps++;
	}
	m_StaticDependencies.SetCapacity( numStaticDeps );

	
	m_StaticDependencies.Append( inputLibraries );
	m_StaticDependencies.Append( assemblyResources );
	m_StaticDependencies.Append( otherLibraries );	

	
	if ( linkerStampExe )
	{
		m_StaticDependencies.Append( Dependency( linkerStampExe ) );
	}

	
	m_Linker = linker; 
	m_LinkerArgs = linkerArgs;
}



LinkerNode::~LinkerNode()
{
}



 Node::BuildResult LinkerNode::DoBuild( Job *  )
{
	DoPreLinkCleanup();

	
	AStackString< 4 * (1024) > fullArgs;
	GetFullArgs( fullArgs );

	
	const char * workingDir = nullptr;

	const char * environment = FBuild::Get().GetEnvironmentString();

	EmitCompilationMessage( fullArgs );

	
	ResponseFile rf;
	AStackString<> responseFileArgs;
	const bool useResponseFile = GetFlag( LINK_FLAG_MSVC ) || GetFlag( LINK_FLAG_GCC ) || GetFlag( LINK_FLAG_SNC ) || GetFlag( LINK_FLAG_ORBIS_LD ) || GetFlag( LINK_FLAG_GREENHILLS_ELXR ) || GetFlag( LINK_FLAG_CODEWARRIOR_LD );
	if ( useResponseFile )
	{
		
		if ( GetFlag( LINK_FLAG_ORBIS_LD ) )
		{
			rf.SetEscapeSlashes();
		}

		
		if ( !rf.Create( fullArgs ) )
		{
			return NODE_RESULT_FAILED; 
		}

		
		responseFileArgs.Format( "@\"%s\"", rf.GetResponseFilePath().Get() );
	}

	
	uint32_t attempt( 0 );

	for (;;)
	{
		++attempt;

		
		Process p;
		bool spawnOK = p.Spawn( m_Linker.Get(),
								useResponseFile ? responseFileArgs.Get() : fullArgs.Get(),
								workingDir,
								environment );

		if ( !spawnOK )
		{
			do { FLog::Error( "Failed to spawn process '%s' for %s creation for '%s'",m_Linker.Get(), GetDLLOrExe(), GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return NODE_RESULT_FAILED;
		}

		
		AutoPtr< char > memOut;
		AutoPtr< char > memErr;
		uint32_t memOutSize = 0;
		uint32_t memErrSize = 0;
		p.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );

		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !p.IsRunning() ) ) { if ( AssertHandler::Failure( "!p.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp", 142 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		
		int result = p.WaitForExit();

		
		if ( result != 0 )
		{
			
			if ( GetFlag( LINK_FLAG_MSVC ) && ( result == 1000 ) && ( attempt == 1 ) )
			{
				do { FLog::Warning( "FBuild: Warning: Linker crashed (LNK1000), retrying '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				continue; 
			}

			if ( memOut.Get() ) { do { FLog::ErrorDirect( memOut.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }
			if ( memErr.Get() ) { do { FLog::ErrorDirect( memErr.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }

			
			do { FLog::Error( "Failed to build %s (error %i) '%s'",GetDLLOrExe(), result, GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return NODE_RESULT_FAILED;
		}
		else
		{	
			break; 
		}
	}

	
	if ( m_LinkerStampExe )
	{
		EmitStampMessage();

		Process stampProcess;
		bool spawnOk = stampProcess.Spawn( m_LinkerStampExe->GetName().Get(),
										   m_LinkerStampExeArgs.Get(),
										   nullptr,		
										   nullptr );	
		if ( spawnOk == false )
		{
			do { FLog::Error( "Failed to spawn process '%s' for '%s' stamping of '%s'",m_LinkerStampExe->GetName().Get(), GetDLLOrExe(), GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return NODE_RESULT_FAILED;
		}

		
		AutoPtr< char > memOut;
		AutoPtr< char > memErr;
		uint32_t memOutSize = 0;
		uint32_t memErrSize = 0;
		stampProcess.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !stampProcess.IsRunning() ) ) { if ( AssertHandler::Failure( "!stampProcess.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp", 191 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		
		int result = stampProcess.WaitForExit();

		
		if ( result != 0 )
		{
			if ( memOut.Get() ) { do { FLog::ErrorDirect( memOut.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }
			if ( memErr.Get() ) { do { FLog::ErrorDirect( memErr.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop)); }
			do { FLog::Error( "Failed to stamp %s '%s' (error %i - '%s')",GetDLLOrExe(), GetName().Get(), result, m_LinkerStampExe->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return NODE_RESULT_FAILED;
		}

		
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Stamp ) ) { if ( AssertHandler::Failure( "m_Stamp", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp", 210 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	return NODE_RESULT_OK;
}



void LinkerNode::DoPreLinkCleanup() const
{
	
	if ( GetFlag( LINK_FLAG_MSVC ) == false )
	{
		return;
	}

	bool deleteFiles = false;
	if ( GetFlag( LINK_FLAG_INCREMENTAL ) )
	{
		if ( FBuild::Get().GetOptions().m_ForceCleanBuild )
		{
			deleteFiles = true; 
		}
	}
	else
	{
		
		
		deleteFiles = true;
	}

	if ( deleteFiles )
	{
		
		FileIO::FileDelete( GetName().Get() );

		
		const char * lastDot = GetName().FindLast( '.' );
		AStackString<> ilkName( GetName().Get(), lastDot ? lastDot : GetName().GetEnd() );
		ilkName += ".ilk";
		FileIO::FileDelete( ilkName.Get() );

		
		AStackString<> pdbName( GetName().Get(), lastDot ? lastDot : GetName().GetEnd() );
		pdbName += ".pdb";
		FileIO::FileDelete( pdbName.Get() );
	}
}



void LinkerNode::GetFullArgs( AString & fullArgs ) const
{
	
	Array< AString > tokens( 1024, true );
	m_LinkerArgs.Tokenize( tokens );

	const AString * const end = tokens.End();
	for ( const AString * it = tokens.Begin(); it!=end; ++it )
	{
		const AString & token = *it;

		
		const char * found = token.Find( "%1" );
		if ( found )
		{
			AStackString<> pre( token.Get(), found );
			AStackString<> post( found + 2, token.GetEnd() );
			GetInputFiles( fullArgs, pre, post );
			fullArgs += ' ';
			continue;
		}

		
		found = token.Find( "%2" );
		if ( found )
		{
			fullArgs += AStackString<>( token.Get(), found );
			fullArgs += m_Name;
			fullArgs += AStackString<>( found + 2, token.GetEnd() );
			fullArgs += ' ';
			continue;
		}

		
		if ( GetFlag( LINK_FLAG_MSVC ) )
		{
			found = token.Find( "%3" );
			if ( found )
			{
				AStackString<> pre( token.Get(), found );
				AStackString<> post( found + 2, token.GetEnd() );
				GetAssemblyResourceFiles( fullArgs, pre, post );
				fullArgs += ' ';
				continue;
			}
		}

		
		fullArgs += token;
		fullArgs += ' ';
	}
}



void LinkerNode::GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const
{
	
	const Dependency * end = m_StaticDependencies.End() - ( m_AssemblyResources.GetSize() + m_OtherLibraries.GetSize() );
	if ( m_LinkerStampExe )
	{
		--end; 
	}
	for ( Dependencies::Iter i = m_StaticDependencies.Begin();
		  i != end;
		  i++ )
	{
		Node * n( i->GetNode() );
		GetInputFiles( n, fullArgs, pre, post );
	}
}



void LinkerNode::GetInputFiles( Node * n, AString & fullArgs, const AString & pre, const AString & post ) const
{
	if ( n->GetType() == Node::LIBRARY_NODE )
	{
		bool linkObjectsInsteadOfLibs = GetFlag( LINK_OBJECTS );

		if ( linkObjectsInsteadOfLibs )
		{
			LibraryNode * ln = n->CastTo< LibraryNode >();
			ln->GetInputFiles( fullArgs, pre, post );
		}
		else
		{
			
			fullArgs += pre;
			fullArgs += n->GetName();
			fullArgs += post;
		}
	}
	else if ( n->GetType() == Node::OBJECT_LIST_NODE )
	{
		ObjectListNode * ol = n->CastTo< ObjectListNode >();
		ol->GetInputFiles( fullArgs, pre, post );
	}
	else if ( n->GetType() == Node::DLL_NODE )
	{
		
		DLLNode * dllNode = n->CastTo< DLLNode >();
		AStackString<> importLibName;
		dllNode->GetImportLibName( importLibName );
		fullArgs += pre;
		fullArgs += importLibName;
		fullArgs += post;
	}
	else if ( n->GetType() == Node::COPY_NODE )
	{
		CopyNode * copyNode = n->CastTo< CopyNode >();
		Node * srcNode = copyNode->GetSourceNode();
		GetInputFiles( srcNode, fullArgs, pre, post );
	}
	else
	{
		
		fullArgs += pre;
		fullArgs += n->GetName();
		fullArgs += post;
	}

	fullArgs += ' ';
}



void LinkerNode::GetAssemblyResourceFiles( AString & fullArgs, const AString & pre, const AString & post ) const
{
	const Dependency * const end = m_AssemblyResources.End();
	for ( Dependencies::Iter i = m_AssemblyResources.Begin();
		  i != end;
		  i++ )
	{
		Node * n( i->GetNode() );

		if ( n->GetType() == Node::OBJECT_LIST_NODE )
		{
			ObjectListNode * oln = n->CastTo< ObjectListNode >();
			oln->GetInputFiles( fullArgs, pre, post );
			continue;
		}

		if ( n->GetType() == Node::LIBRARY_NODE )
		{
			LibraryNode * ln = n->CastTo< LibraryNode >();
			ln->GetInputFiles( fullArgs, pre, post );
			continue;
		}

		fullArgs += pre;
		fullArgs += n->GetName();
		fullArgs += post;
		fullArgs += ' ';
	}
}



 uint32_t LinkerNode::DetermineFlags( const AString & linkerName, const AString & args )
{
	uint32_t flags = 0;

	
	if ( ( linkerName.EndsWithI( "link.exe" ) ) ||
		 ( linkerName.EndsWithI( "link" ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_MSVC;
	}
	else if ( ( linkerName.EndsWithI( "gcc.exe" ) ) ||
			  ( linkerName.EndsWithI( "gcc" ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_GCC;
	}
	else if ( ( linkerName.EndsWithI( "ps3ppuld.exe" ) ) ||
			  ( linkerName.EndsWithI( "ps3ppuld" ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_SNC;
	}
	else if ( ( linkerName.EndsWithI( "orbis-ld.exe" ) ) ||
			  ( linkerName.EndsWithI( "orbis-ld" ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_ORBIS_LD;
	}
	else if ( ( linkerName.EndsWithI( "elxr.exe" ) ) ||
			  ( linkerName.EndsWithI( "elxr" ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_GREENHILLS_ELXR;
	}
	else if ( ( linkerName.EndsWithI( "mwldeppc.exe" ) ) ||
			  ( linkerName.EndsWithI( "mwldeppc." ) ) )
	{
		flags |= LinkerNode::LINK_FLAG_CODEWARRIOR_LD;
	}

	if ( flags & ( LINK_FLAG_GCC | LINK_FLAG_SNC | LINK_FLAG_ORBIS_LD ) )
	{
		
		Array< AString > tokens;
		args.Tokenize( tokens );

        const AString * const end = tokens.End();
		for ( const AString * it=tokens.Begin(); it!=end; ++it )
		{
			const AString & token = *it;
			if ( ( token == "-shared" ) || ( token == "-dynamiclib" ) )
			{
				flags |= LinkerNode::LINK_FLAG_DLL;
				continue;
			}
        }
    }

	if ( flags & LINK_FLAG_MSVC )
	{
		
		Array< AString > tokens;
		args.Tokenize( tokens );

		bool debugFlag = false;
		bool incrementalFlag = false;
		bool incrementalNoFlag = false;
		bool optREFFlag = false;
		bool optICFFlag = false;
		bool optLBRFlag = false;
		bool orderFlag = false;

		const AString * const end = tokens.End();
		for ( const AString * it=tokens.Begin(); it!=end; ++it )
		{
			const AString & token = *it;
			if ( token == "/DLL" )
			{
				flags |= LinkerNode::LINK_FLAG_DLL;
				continue;
			}

			if ( token == "/DEBUG" )
			{
				debugFlag = true;
				continue;
			}

			if ( token == "/INCREMENTAL")
			{
				incrementalFlag = true;
				continue;
			}

			if ( token == "/INCREMENTAL:NO")
			{
				incrementalNoFlag = true;
				continue;
			}

			if ( token == "/OPT:REF")
			{
				optREFFlag = true;
				continue;
			}

			if ( token == "/OPT:ICF")
			{
				optICFFlag = true;
				continue;
			}

			if ( token == "/OPT:LBR")
			{
				optLBRFlag = true;
				continue;
			}

			if ( token.BeginsWith( "/ORDER" ) )
			{
				orderFlag = true;
				continue;
			}
		}

		
		bool usingIncrementalLinking = false; 

		
		if ( debugFlag || incrementalFlag )
		{
			usingIncrementalLinking = true;
		}

		
		if ( incrementalNoFlag || optREFFlag || optICFFlag || optLBRFlag || orderFlag )
		{
			usingIncrementalLinking = false;
		}

		if ( usingIncrementalLinking )
		{
			flags |= LINK_FLAG_INCREMENTAL;
		}
	}

	return flags;
}



void LinkerNode::EmitCompilationMessage( const AString & fullArgs ) const
{
	AStackString<> output;
	output += GetDLLOrExe();
	output += ": ";
	output += GetName();
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += m_Linker;
		output += ' ';
		output += fullArgs;
		output += '\n';
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



void LinkerNode::EmitStampMessage() const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_LinkerStampExe ) ) { if ( AssertHandler::Failure( "m_LinkerStampExe", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\LinkerNode.cpp", 587 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString<> output;
	output += "Stamp: ";
	output += GetName();
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += m_LinkerStampExe->GetName();
		output += ' ';
		output += m_LinkerStampExeArgs;
		output += '\n';
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



 void LinkerNode::Save( IOStream & stream ) const
{
	
	size_t count = m_StaticDependencies.GetSize() - ( m_AssemblyResources.GetSize() + m_OtherLibraries.GetSize() );
	if ( m_LinkerStampExe )
	{
		count--;
	}
	Dependencies staticDeps( m_StaticDependencies.Begin(), m_StaticDependencies.Begin() + count );

	stream.Write( m_Name );;
	stream.Write( m_Linker );;
	stream.Write( m_LinkerArgs );;
	staticDeps.Save( stream );;
	stream.Write( m_Flags );;
	m_AssemblyResources.Save( stream );;
	m_OtherLibraries.Save( stream );;
    Node::SaveNode( stream, m_LinkerStampExe );;
    stream.Write( m_LinkerStampExeArgs );;
}


#line 118 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/Node.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp"


















#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/NodeProxy.h"


#pragma once









class NodeProxy : public Node
{
public:
	explicit NodeProxy( const AString & name );
	virtual ~NodeProxy();

	virtual bool IsAFile() const;

protected:
	virtual void Save( IOStream & stream ) const;
	virtual bool DetermineNeedToBuild( bool forceClean ) const;
};


#line 28 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Graph/NodeProxy.h"
#line 26 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp"






#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/Job.h"


#pragma once










class IOStream;
class Node;
class ToolManifest;



class Job
{
public:
	explicit Job( Node * node );
	explicit Job( IOStream & stream );
			~Job();

	inline uint32_t GetJobId() const { return m_JobId; }
	inline bool operator == ( uint32_t jobId ) const { return ( m_JobId == jobId ); }

	inline Node * GetNode() const { return m_Node; }
	inline const AString & GetRemoteName() const { return m_RemoteName; }

	inline void SetCacheName( const AString & cacheName ) { m_CacheName = cacheName; }
	inline const AString & GetCacheName() const { return m_CacheName; }

	
	void	OwnData( void * data, size_t size, bool compressed = false );

	inline void *	GetData() const		{ return m_Data; }
	inline size_t	GetDataSize() const { return m_DataSize; }

	inline void		SetUserData( void * data )	{ m_UserData = data; }
	inline void *	GetUserData() const			{ return m_UserData; }

	inline void				SetToolManifest( ToolManifest * manifest )	{ m_ToolManifest = manifest; }
	inline ToolManifest *	GetToolManifest() const						{ return m_ToolManifest; }

	inline bool		IsDataCompressed() const { return m_DataIsCompressed; }
	inline bool		IsLocal() const		{ return m_IsLocal; }

	inline const Array< AString > & GetMessages() const { return m_Messages; }

	
	void Error( const char * format, ... );

	
	void OnSystemError() { ++m_SystemErrorCount; }
	inline uint8_t GetSystemErrorCount() const { return m_SystemErrorCount; }

	
	void Serialize( IOStream & stream );
	void Deserialize( IOStream & stream );

private:
	friend class JobSubQueue;
	Job * m_Next;

	uint32_t m_JobId;
	Node * m_Node;
	void * m_Data;
	uint32_t m_DataSize;
	void * m_UserData;
	bool m_DataIsCompressed;
	bool m_IsLocal;
	uint8_t m_SystemErrorCount; 
	AString m_RemoteName;
	AString m_CacheName;

	ToolManifest * m_ToolManifest;

	Array< AString > m_Messages;
};


#line 86 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/Job.h"
#line 33 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp"















 const char * const Node::s_NodeTypeNames[] = 
{
	"Proxy",
	"Copy",
	"Directory",
	"Exec",
	"File",
	"Library",
	"Object",
	"Alias",
	"Exe",
	"Unity",
	"C#",
	"Test",
	"Compiler",
	"DLL",
	"VCXProj",
	"ObjectList",
	"CopyDirNode"
};



IMetaData & MetaName( const char * name )
{
	return *new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 73 ) Meta_Name( name );
}



const ReflectionInfo * Node::GetReflectionInfoV() const { return Node::GetReflectionInfoS(); } class Object_ReflectionInfo; extern Object_ReflectionInfo g_Object_ReflectionInfo; class Node_ReflectionInfo; extern Node_ReflectionInfo g_Node_ReflectionInfo; const ReflectionInfo * Node::s_ReflectionInfo( nullptr ); const ReflectionInfo * Node::GetReflectionInfoS() { return reinterpret_cast< const ReflectionInfo * >( &g_Node_ReflectionInfo ); } class Node_ReflectionInfo : public ReflectionInfo { public: typedef Node objectType; explicit Node_ReflectionInfo() { SetTypeName( "Node" ); Node::s_ReflectionInfo = this; AddProperties(); m_StructSize = 0; m_IsAbstract = true; m_SuperClass = reinterpret_cast< const ReflectionInfo * >( &g_Object_ReflectionInfo ); AddMetaData( MetaNone() ); } virtual ~Node_ReflectionInfo() { Node::s_ReflectionInfo = nullptr; } void AddProperties() { Node * c = nullptr; Object * b = static_cast< Object * >( c ); (void)b;
} }; Node_ReflectionInfo g_Node_ReflectionInfo; void Node_ReflectionInfo_Bind() { ReflectionInfo::BindReflection( g_Node_ReflectionInfo ); }



Node::Node( const AString & name, Type type, uint32_t controlFlags )
	: m_State( NOT_PROCESSED )
	, m_BuildPassTag( 0 )
	, m_ControlFlags( controlFlags )
	, m_StatsFlags( 0 )
	, m_Stamp( 0 )
	, m_Type( type )
	, m_Next( nullptr )
	, m_LastBuildTimeMs( 0 )
	, m_ProcessingTime( 0 )
	, m_ProgressAccumulator( 0 )
	, m_Index( ( (uint32_t)0xFFFFFFFF ) )
{
	SetName( name );

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( sizeof( s_NodeTypeNames ) / sizeof(const char *) == NUM_NODE_TYPES ) > (); } while ( false ); __pragma(warning(pop));
}



Node::~Node()
{
}



 bool Node::DoDynamicDependencies( bool )
{
	return true;
}



bool Node::DetermineNeedToBuild( bool forceClean ) const
{
	if ( forceClean )
	{
		return true;
	}

	
	
	if ( m_Stamp == 0 )
	{
		
		if ( GetType() != Node::FILE_NODE )
		{
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (first time)",GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		}
		return true;
	}

	if ( IsAFile() )
	{
		uint64_t lastWriteTime = FileIO::GetFileLastWriteTime( m_Name );

		if ( lastWriteTime == 0 )
		{
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (missing)",GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}

		if ( lastWriteTime != m_Stamp )
		{
			
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (externally modified - stamp = %llu, disk = %llu)",GetName().Get(), m_Stamp, lastWriteTime ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
	}

	
	const Dependencies & staticDeps = GetStaticDependencies();
	for ( Dependencies::ConstIter it = staticDeps.Begin();
		  it != staticDeps.End();
		  it++ )
	{
		Node * n = it->GetNode();

		
		if ( n->GetType() == Node::DIRECTORY_LIST_NODE )
		{
			continue;
		}

		
		if ( n->GetType() == Node::UNITY_NODE )
		{
			continue;
		}

		if ( n->GetType() == Node::UNITY_NODE )
		{
			continue;
		}

		
		if ( it->IsWeak() )
		{
			continue;
		}

		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n->IsAFile() || ( n->GetType() == Node::OBJECT_LIST_NODE ) ) ) { if ( AssertHandler::Failure( "n->IsAFile() || ( n->GetType() == Node::OBJECT_LIST_NODE )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 188 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		if ( n->GetStamp() == 0 )
		{
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (dep missing: '%s')",GetName().Get(), n->GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}

		if ( n->GetStamp() > m_Stamp )
		{
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (dep is newer: '%s' this = %llu, dep = %llu)",GetName().Get(), n->GetName().Get(), m_Stamp, n->GetStamp() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
	}

	
	const Dependencies & dynamicDeps = GetDynamicDependencies();
	for ( Dependencies::ConstIter it = dynamicDeps.Begin();
		  it != dynamicDeps.End();
		  it++ )
	{
		Node * n = it->GetNode();

		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n->IsAFile() || ( n->GetType() == Node::OBJECT_LIST_NODE ) ) ) { if ( AssertHandler::Failure( "n->IsAFile() || ( n->GetType() == Node::OBJECT_LIST_NODE )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 214 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		
		if ( it->IsWeak() )
		{
			continue;
		}

		
		if ( n->GetStamp() == 0 )
		{
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (dep missing: '%s')",GetName().Get(), n->GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}

		if ( n->GetStamp() > m_Stamp )
		{
			
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Need to build '%s' (dep is newer: '%s' this = %llu, dep = %llu)",GetName().Get(), n->GetName().Get(), m_Stamp, n->GetStamp() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return true;
		}
	}


	
	do { if ( FLog::ShowInfo() ) { FLog::Info( "Up-To-Date '%s'",GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	return false;
}



 Node::BuildResult Node::DoBuild( Job *  )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 248 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	return Node::NODE_RESULT_FAILED;
}



 Node::BuildResult Node::DoBuild2( Job * , bool  )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 256 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	return Node::NODE_RESULT_FAILED;
}



 bool Node::Finalize()
{
	
	return true;
}



void Node::SaveNode( IOStream & fileStream, const Node * node ) const
{
	
	if ( node == nullptr )
	{
		fileStream.Write( AString::GetEmpty() );
	}
	else
	{
		
		fileStream.Write( node->GetName() );
	}
}



 bool Node::LoadNode( IOStream & stream, Node * & node )
{
	
	AStackString< 512 > nodeName;
	if ( stream.Read( nodeName ) == false )
	{
        node = nullptr;
		return false;
	}

	
	if ( nodeName.IsEmpty() )
	{
		node = nullptr;
		return true;
	}

	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * n = ng.FindNode( nodeName );
	if ( n == nullptr )
	{
        node = nullptr;
		return false;
	}
	node = n;

	return true;
}



 bool Node::LoadNode( IOStream & stream, CompilerNode * & compilerNode )
{
	Node * node;
	if ( !LoadNode( stream, node ) )
	{
		return false;
	}
	if ( node->GetType() != Node::COMPILER_NODE )
	{
		return false;
	}
	compilerNode = node->CastTo< CompilerNode >();
	return true;
}



 bool Node::LoadNode( IOStream & stream, FileNode * & fileNode )
{
	Node * node;
	if ( !LoadNode( stream, node ) )
	{
		return false;
	}
	if ( !node->IsAFile() )
	{
		return false;
	}
	fileNode = node->CastTo< FileNode >();
	return ( fileNode != nullptr );
}



 bool Node::EnsurePathExistsForFile( const AString & name )
{
	const char * lastSlash = name.FindLast( ( '\\' ) );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( PathUtils::IsFullPath( name ) ) ) { if ( AssertHandler::Failure( "PathUtils::IsFullPath( name )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 355 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	AStackString<> pathOnly( name.Get(), lastSlash );
	if ( FileIO::EnsurePathExists( pathOnly ) == false )
	{
		do { FLog::Error( "Failed to create path '%s'",pathOnly.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	return true;
}



 Node * Node::Load( IOStream & stream )
{
	
	uint32_t nodeType;
	if ( stream.Read( nodeType ) == false )
	{
		return nullptr;
	}

	
	uint64_t stamp( 0 );
	if ( nodeType != Node::FILE_NODE )
	{
		if ( stream.Read( stamp ) == false )
		{
			return nullptr;
		}
	}

	
	Node * n = nullptr;
	switch ( (Node::Type)nodeType )
	{
		case Node::PROXY_NODE:			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 390 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));						break;
		case Node::COPY_NODE:			n = CopyNode::Load( stream );			break;
		case Node::DIRECTORY_LIST_NODE: n = DirectoryListNode::Load( stream );	break;
		case Node::EXEC_NODE:			n = ExecNode::Load( stream );			break;
		case Node::FILE_NODE:			n = FileNode::Load( stream );			break;
		case Node::LIBRARY_NODE:		n = LibraryNode::Load( stream );		break;
		case Node::OBJECT_NODE:			n = ObjectNode::Load( stream );			break;
		case Node::ALIAS_NODE:			n = AliasNode::Load( stream );			break;
		case Node::EXE_NODE:			n = ExeNode::Load( stream );			break;
		case Node::CS_NODE:				n = CSNode::Load( stream );				break;
		case Node::UNITY_NODE:			n = UnityNode::Load( stream );			break;
		case Node::TEST_NODE:			n = TestNode::Load( stream );			break;
		case Node::COMPILER_NODE:		n = CompilerNode::Load( stream );		break;
		case Node::DLL_NODE:			n = DLLNode::Load( stream );			break;
		case Node::VCXPROJECT_NODE:		n = VCXProjectNode::Load( stream );		break;
		case Node::OBJECT_LIST_NODE:	n = ObjectListNode::Load( stream );		break;
		case Node::COPY_DIR_NODE:		n = CopyDirNode::Load( stream );		break;
		case Node::NUM_NODE_TYPES:		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 407 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));						break;
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 410 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( n )
	{
		
		n->m_Stamp = stamp;
	}

	return n;
}



 void Node::Save( IOStream & stream, const Node * node )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node ) ) { if ( AssertHandler::Failure( "node", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 424 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	uint32_t nodeType = (uint32_t)node->GetType();
	stream.Write( nodeType );

	
	if ( nodeType != Node::FILE_NODE )
	{
		uint64_t stamp = node->GetStamp();
		stream.Write( stamp );
	}

	
	node->Save( stream );
}



 Node * Node::LoadRemote( IOStream & stream )
{
	
	uint32_t nodeType;
	if ( stream.Read( nodeType ) == false )
	{
		return nullptr;
	}

	
	Node * n = nullptr;
	switch ( (Node::Type)nodeType )
	{
		case Node::OBJECT_NODE:			n = ObjectNode::LoadRemote( stream );	break;
		default:						do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 457 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));						break;
	}

	return n;
}



 void Node::SaveRemote( IOStream & stream, const Node * node )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node ) ) { if ( AssertHandler::Failure( "node", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 467 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node->GetType() == Node::OBJECT_NODE ) ) { if ( AssertHandler::Failure( "node->GetType() == Node::OBJECT_NODE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 470 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	uint32_t nodeType = (uint32_t)node->GetType();
	stream.Write( nodeType );

	
	node->SaveRemote( stream );
}



 void Node::SaveRemote( IOStream &  ) const
{
	
	
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 487 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



void Node::Serialize( IOStream & stream ) const
{
	
	m_PreBuildDependencies.Save( stream );;
	m_StaticDependencies.Save( stream );;
	m_DynamicDependencies.Save( stream );;

	
	const ReflectionInfo * const ri = GetReflectionInfoV();
	const ReflectionIter end = ri->End();
	for ( ReflectionIter it = ri->Begin(); it != end; ++it )
	{
		const ReflectedProperty & property = *it;

		const PropertyType pt = property.GetType();
		switch ( pt )
		{
			case PT_ASTRING:
			{
				if ( property.IsArray() )
				{
					const Array< AString > * arrayOfStrings( nullptr );
					property.GetProperty( this, arrayOfStrings );
					do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stream.Write( *arrayOfStrings ) ) ) { if ( AssertHandler::Failure( "stream.Write( *arrayOfStrings )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 515 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
				}
				else
				{
					AString string; 
					property.GetProperty( this, &string );
					do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stream.Write( string ) ) ) { if ( AssertHandler::Failure( "stream.Write( string )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 521 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
				}
				break;
			}
			case PT_BOOL:
			{
				bool b( false );
				property.GetProperty( this, &b );
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stream.Write( b ) ) ) { if ( AssertHandler::Failure( "stream.Write( b )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 529 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
				break;
			}
			case PT_UINT32:
			{
				uint32_t u32( 0 );
				property.GetProperty( this, &u32 );
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( stream.Write( u32 ) ) ) { if ( AssertHandler::Failure( "stream.Write( u32 )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 536 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
				break;
			}
			default:
			{
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 541 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
				break;
			}
		}
	}
}



bool Node::Deserialize( IOStream & stream )
{
	
	Dependencies preBuildDeps( 0, true ); if ( preBuildDeps.Load( stream ) == false ) { return nullptr; };
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_PreBuildDependencies.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_PreBuildDependencies.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 554 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_PreBuildDependencies.Append( preBuildDeps );
	Dependencies staticDeps( 0, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_StaticDependencies.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_StaticDependencies.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 557 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( staticDeps );
	Dependencies dynamicDeps( 0, true ); if ( dynamicDeps.Load( stream ) == false ) { return nullptr; };
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_DynamicDependencies.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_DynamicDependencies.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 560 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_DynamicDependencies.Append( dynamicDeps );

	
	const ReflectionInfo * const ri = GetReflectionInfoV();
	const ReflectionIter end = ri->End();
	for ( ReflectionIter it = ri->Begin(); it != end; ++it )
	{
		const ReflectedProperty & property = *it;

		const PropertyType pt = property.GetType();
		switch ( pt )
		{
			case PT_ASTRING:
			{
				if ( property.IsArray() )
				{
					Array< AString > arrayOfStrings; 
					if ( stream.Read( arrayOfStrings ) == false )
					{
						return false;
					}
					property.SetProperty( this, arrayOfStrings );
				}
				else
				{
					AStackString<> string; 
					if ( stream.Read( string ) == false )
					{
						return false;
					}
					property.SetProperty( this, string );
				}
				break;
			}
			case PT_BOOL:
			{
				bool b( false );
				if ( stream.Read( b ) == false )
				{
					return false;
				}
				property.SetProperty( this, b );
				break;
			}
			case PT_UINT32:
			{
				uint32_t u32( 0 );
				if ( stream.Read( u32 ) == false )
				{
					return false;
				}
				property.SetProperty( this, u32 );
				break;
			}
			default:
			{
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 617 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
				break;
			}
		}
	}

	return true;
}



void Node::SetName( const AString & name )
{
	m_Name = name;
	m_NameCRC = CRC32::CalcLower( name );
}



void Node::ReplaceDummyName( const AString & newName )
{
	m_Name = newName;
}



 void Node::DumpOutput( Job * job,
								  const char * data, 
								  uint32_t dataSize,
								  const Array< AString > * exclusions )
{
	if ( ( data == nullptr ) || ( dataSize == 0 ) )
	{
		return;
	}

	
	AString buffer( (1024 * 1024) );

	const char * end = data + dataSize;
	while( data < end )
	{
		
		const char * lineStart = data;
		const char * lineEnd = lineStart;
		while ( lineEnd < end )
		{
			if ( ( *lineEnd == '\r' ) || ( *lineEnd == '\n' ) )
			{
				break;
			}
			lineEnd++;
		}
		if ( lineStart != lineEnd ) 
		{
			
			AStackString< 1024 > copy( lineStart, lineEnd );

			
			bool skip = false;
			if ( exclusions )
			{
				const AString * iter = exclusions->Begin();
				const AString * const endIter = exclusions->End();
				while ( iter != endIter )
				{
					if ( copy.BeginsWith( *iter ) )
					{
						skip = true;
						break;
					}
					iter++;
				}
			}
			if ( !skip )
			{
				copy += '\n';

				
				
				if ( FBuild::IsValid() && FBuild::Get().GetOptions().m_FixupErrorPaths )
				{
					FixupPathForVSIntegration( copy );
				}

				
				if ( buffer.GetLength() + copy.GetLength() > buffer.GetReserved() )
				{
					buffer.SetReserved( buffer.GetReserved() + (1024 * 1024) );
				}
				buffer += copy;
			}
		}
		data = ( lineEnd + 1 );
	}

	
	do { FLog::ErrorDirect( buffer.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	
	if ( job && ( !job->IsLocal() ) )
	{
		job->Error( "%s", buffer.Get() );
	}
}



 void Node::FixupPathForVSIntegration( AString & line )
{
	
	
	
	
	
	
	const char * tag = line.Find( ": warning:" );
	tag = tag ? tag : line.Find( ": note:" );
	tag = tag ? tag : line.Find( ": error:" );
	tag = tag ? tag : line.Find( ": fatal error:" );
	tag = tag ? tag : line.Find( ": remark:" );
	if ( tag )
	{
		FixupPathForVSIntegration_GCC( line, tag );
		return;
	}

	
	
	
	
	
	
	tag = tag ? tag : line.Find( ": error " );
	tag = tag ? tag : line.Find( ": warning " );
	tag = tag ? tag : line.Find( ": note " );
	tag = tag ? tag : line.Find( ": remark " );
	if ( tag )
	{
		FixupPathForVSIntegration_SNC( line, tag );
		return;
	}

	
}



 void Node::FixupPathForVSIntegration_GCC( AString & line, const char * tag )
{
	AStackString<> beforeTag( line.Get(), tag );
	Array< AString > tokens;
	beforeTag.Tokenize( tokens, ':' );
	const size_t numTokens = tokens.GetSize();
	if ( numTokens < 3 )
	{
		return; 
	}

	
	int row, column;
	if ( ( sscanf( tokens[ numTokens - 1 ].Get(), "%i", &column ) != 1 ) ||
		 ( sscanf( tokens[ numTokens - 2 ].Get(), "%i", &row ) != 1 ) )
	{
		return; 
	}

	
	AStackString<> fixed;

	
	if ( tokens[ 0 ].GetLength() == 1 )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( numTokens >= 4 ) ) { if ( AssertHandler::Failure( "numTokens >= 4", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\Node.cpp", 790 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		fixed = tokens[ 0 ]; 
	}
	else
	{
		NodeGraph::CleanPath( tokens[ 0 ], fixed );
	}

	
	for ( size_t i=1; i<( numTokens-2 ); ++i )
	{
		if ( i != 0 )
		{
			fixed += ':';
		}
		fixed += tokens[ i ];
	}

	
	fixed += '(';
	fixed += tokens[ numTokens - 2 ];
	fixed += ',';
	fixed += tokens[ numTokens - 1 ];
	fixed += ')';

	
	fixed += tag;

	line = fixed;
}



 void Node::FixupPathForVSIntegration_SNC( AString & line, const char * tag )
{
	AStackString<> beforeTag( line.Get(), tag );

	const char * openBracket = beforeTag.Find( '(' );
	if( openBracket == nullptr )
	{
		return; 
	}

	AStackString<> path( beforeTag.Get(), openBracket );
	AStackString<> fixed;
	NodeGraph::CleanPath( path, fixed );

	
	fixed += openBracket;

	
	fixed += tag;

	line = fixed;
}

#line 121 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/NodeGraph.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"







#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/JobQueue.h"


#pragma once













class Node;
class Job;
class WorkerThread;




class JobSubQueue
{
public:
	explicit JobSubQueue();
	~JobSubQueue();

	inline uint32_t GetCount() const { return m_Count; }

	
	void QueueJob( Job * job );

	
	Job * RemoveJob();
private:
	uint32_t	m_Count;	
	Mutex		m_Mutex;	
	Job *		m_Head;		
	Job *		m_Tail;		
};



class JobQueue : public Singleton< JobQueue >
{
public:
	JobQueue( uint32_t numWorkerThreads );
	~JobQueue();

	
	void QueueJob( Node * node );
	void FinalizeCompletedJobs();

	
	void SignalStopWorkers();
	bool HaveWorkersStopped() const;

	
	size_t GetNumDistributableJobsAvailable() const;
	inline size_t GetDistributableJobsMemUsage() const { return m_DistributableJobsMemoryUsage; }

	void GetJobStats( uint32_t & numJobs, uint32_t & numJobsActive, 
					  uint32_t & numJobsDist, uint32_t & numJobsDistActive ) const;

private:
	
	friend class WorkerThread;
	Job *		GetJobToProcess();
	Job *		GetDistributableJobToRace();
	static Node::BuildResult DoBuild( Job * job );
	void		FinishedProcessingJob( Job * job, bool result, bool wasARemoteJob, bool localRaceOfRemoteJob );

	void	QueueJob2( Job * job );

	
	friend class Client;
	Job *		GetDistributableJobToProcess( bool remote );
	Job	*		OnReturnRemoteJob( uint32_t jobId, bool & cancelled );
	void		ReturnUnfinishedDistributableJob( Job * job, bool systemError = false );

	
	JobSubQueue			m_LocalAvailableJobs[ Node::NUM_PRIORITY_LEVELS ];

	
	uint32_t			m_NumLocalJobsActive;

	
	mutable Mutex		m_DistributableAvailableJobsMutex;
	Array< Job * >		m_DistributableAvailableJobs;
	size_t				m_DistributableJobsMemoryUsage;

	
	mutable Mutex		m_DistributedJobsMutex;
	Array< Job * >		m_DistributedJobsRemote;		
	Array< Job * >		m_DistributedJobsLocal;			
	Array< Job * >		m_DistributedJobsBeingRaced;	
	struct CancelledJob
	{
		inline CancelledJob( Job * job, uint32_t jobId ) : m_JobId( jobId ), m_Job( job ) {}
		inline bool operator == ( uint32_t jobId ) const { return ( m_JobId == jobId ); }
		inline bool operator == ( const Job * job ) const { return ( m_Job == job ); }
		uint32_t	m_JobId;
		Job *		m_Job;
	};
	Array< CancelledJob > m_DistributedJobsCancelled;		

	
	mutable Mutex		m_CompletedJobsMutex;
	Array< Job * >		m_CompletedJobs;
	Array< Job * >		m_CompletedJobsFailed;

	
	Array< Job * >		m_CompletedJobs2;
	Array< Job * >		m_CompletedJobsFailed2;

	Array< WorkerThread * > m_Workers;
};


#line 123 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/JobQueue.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"





















#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/ConstMemoryStream.h"


#pragma once









class ConstMemoryStream : public IOStream
{
public:
	explicit ConstMemoryStream( const void * data, size_t size );
	~ConstMemoryStream();

	
	inline const void * GetData() const { return m_Buffer; }
	inline size_t		GetSize() const { return m_Size; } 
	void				Replace( const void * data, size_t size );

	
	virtual uint64_t ReadBuffer( void * buffer, uint64_t bytesToRead );
	virtual uint64_t WriteBuffer( const void * buffer, uint64_t bytesToWrite );
	virtual void Flush();

	
	virtual uint64_t Tell() const;
	virtual bool Seek( uint64_t pos ) const;
	virtual uint64_t GetFileSize() const;

private:
	const void * m_Buffer;
	size_t m_Size;
	mutable size_t m_CurrentPos;
};


#line 42 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/ConstMemoryStream.h"
#line 37 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"




#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Murmur3.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Math/MurmurHash3/MurmurHash3.h"












void MurmurHash3_x86_32  ( const void * key, int len, uint32_t seed, void * out );

void MurmurHash3_x86_128 ( const void * key, int len, uint32_t seed, void * out );

void MurmurHash3_x64_128 ( const void * key, int len, uint32_t seed, void * out );



#line 22 "c:\\Users\\Franta\\p4\\Code\\Core/Math/MurmurHash3/MurmurHash3.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Murmur3.h"




class Murmur3
{
public:
	inline static uint32_t	Calc32( const void * buffer, size_t len );
	inline static uint64_t	Calc64( const void * buffer, size_t len );
	inline static uint64_t Calc128( const void * buffer, size_t len, uint64_t & other );

	inline static uint32_t	Calc32( const AString & string ) { return Calc32( string.Get(), string.GetLength() ); }
	inline static uint64_t	Calc64( const AString & string ) { return Calc64( string.Get(), string.GetLength() ); }
	inline static uint64_t	Calc128( const AString & string, uint64_t & other )	{ return Calc128( string.Get(), string.GetLength(), other ); }
private:
	enum { MURMUR3_SEED = 0x65cc95f0 }; 
};



 uint32_t Murmur3::Calc32( const void * buffer, size_t len )
{
	uint32_t hash;
	MurmurHash3_x86_32( buffer, (int)len, 0, &hash );
	return hash;
}



 uint64_t	Murmur3::Calc64( const void * buffer, size_t len )
{
	uint64_t a1, a2;
	a1 = Murmur3::Calc128( buffer, len, a2 );
	return ( a1 ^ a2 ); 
}



 uint64_t Murmur3::Calc128( const void * buffer, size_t len, uint64_t & other )
{
	uint64_t hash[ 2 ];

	
	MurmurHash3_x64_128( buffer, (int)len, MURMUR3_SEED, &hash );
	other = hash[ 0 ];
	return hash[ 1 ];
}


#line 61 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Murmur3.h"
#line 42 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Thread.h"


#pragma once









#line 14 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Thread.h"



class Thread
{
public:
	
		typedef uint32_t ThreadId;
		typedef void * ThreadHandle;
		typedef uint32_t (*ThreadEntryFunction)( void * param );

		
    










#line 38 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Thread.h"

	static ThreadId GetCurrentThreadId();
	static bool IsThread( ThreadId threadId ) { return ( GetCurrentThreadId() == threadId ); }
	static bool IsMainThread() { return GetCurrentThreadId() == s_MainThreadId; }
    
    static void Sleep( int32_t ms );

	static ThreadHandle CreateThread( ThreadEntryFunction entryFunc,
									  const char * threadName = nullptr,
									  uint32_t stackSize = ( 64 * (1024) ),
									  void * userData = nullptr
									);
	static int WaitForThread( ThreadHandle handle, uint32_t timeoutMS, bool & timedOut );
	static void CloseHandle( ThreadHandle h );

	static void SetThreadName( const char * name );

private:
	static ThreadId s_MainThreadId;
};


#line 61 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Thread.h"
#line 44 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"










 uint32_t NodeGraph::s_BuildPassTag( 0 );



NodeGraph::NodeGraph()
: m_AllNodes( 1024, true )
, m_NextNodeIndex( 0 )
, m_UsedFiles( 16, true )
{
	memset( m_NodeMap, 0, sizeof( Node * ) * NODEMAP_TABLE_SIZE );
}



NodeGraph::~NodeGraph()
{
	Array< Node * >::Iter i = m_AllNodes.Begin();
	Array< Node * >::Iter end = m_AllNodes.End();
	for ( ; i != end; ++i )
	{
		delete ( *i );
	}
}



bool NodeGraph::Initialize( const char * bffFile,
							const char * nodeGraphDBFile )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( bffFile ) ) { if ( AssertHandler::Failure( "bffFile", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 83 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_UsedFiles.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_UsedFiles.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 85 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	bool needReparsing = false;
	bool ok = Load( nodeGraphDBFile, needReparsing );
	if ( !ok )
	{
		do { FLog::Error( "Error reading BFF '%s' (corrupt?)",nodeGraphDBFile ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	
	if ( needReparsing )
	{
		
		m_UsedFiles.Clear();

		
		do { if ( FLog::ShowInfo() ) { FLog::Info( "Loading BFF '%s'",bffFile ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		FileStream bffStream;
		if ( bffStream.Open( bffFile ) == false )
		{
			
			do { FLog::Error( "Failed to open BFF '%s'",bffFile ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}
		const uint64_t rootBFFTimeStamp = FileIO::GetFileLastWriteTime( AStackString<>( bffFile ) );

		
		uint32_t size = (uint32_t)bffStream.GetFileSize();
		AutoPtr< char > data( (char *)::AllocFileLine( size + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 114 ) ); 
		if ( bffStream.Read( data.Get(), size ) != size )
		{
			do { FLog::Error( "Error reading BFF '%s'",bffFile ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}

		
		BFFParser bffParser;
		data.Get()[ size ] = '\0'; 
		return bffParser.Parse( data.Get(), size, bffFile, rootBFFTimeStamp ); 
	}

	return true;
}



bool NodeGraph::Load( const char * nodeGraphDBFile, bool & needReparsing )
{
	FileStream fs;
	if ( fs.Open( nodeGraphDBFile, FileStream::READ_ONLY ) == false )	
	{
		do { if ( FLog::ShowInfo() ) { FLog::Info( "BFF file '%s' missing or unopenable (clean build will result).",nodeGraphDBFile ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		needReparsing = true;
		return true; 
	}

	size_t size = (size_t)fs.GetFileSize();
	AutoPtr< void > mem( ::AllocFileLine( size, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 143 ) );
	if ( fs.Read( mem.Get(), size ) != size )
	{
		return false; 
	}

	
	ConstMemoryStream nodeGraphStream( mem.Get(), size );
	if ( !Load( nodeGraphStream, needReparsing ) )
	{
		do { FLog::Error( "Database is corrupt."  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop))
		return false; 
	}

	return true;
}



bool NodeGraph::Load( IOStream & stream, bool & needReparsing )
{
	bool compatibleDB = true;
	if ( ReadHeaderAndUsedFiles( stream, m_UsedFiles, compatibleDB ) == false )
	{
		return false; 
	}

	
	if ( !compatibleDB )
	{
		do { FLog::Warning( "Database version has changed (clean build will occur)."  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		needReparsing = true;
		return true;
	}

	
	for ( size_t i=0; i<m_UsedFiles.GetSize(); ++i )
	{
		const AString & fileName = m_UsedFiles[ i ].m_FileName;
		const uint64_t timeStamp = FileIO::GetFileLastWriteTime( fileName );
		if ( timeStamp != m_UsedFiles[ i ].m_TimeStamp )
		{
			do { FLog::Warning( "BFF file '%s' has changed (reparsing will occur).",fileName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			needReparsing = true;
			return true;
		}
	}

	
	{
		
		AStackString<> cachePath;
		if ( stream.Read( cachePath ) == false )
		{
			return false;
		}
		if ( cachePath.IsEmpty() == false ) 
		{
			FunctionSettings::SetCachePath( cachePath );
			FBuild::Get().SetCachePath( cachePath );
		}

		
		AStackString<> cachePluginDLL;
		if ( stream.Read( cachePluginDLL ) == false )
		{
			return false;
		}
		FBuild::Get().SetCachePluginDLL( cachePluginDLL );

		
		uint32_t envStringSize = 0;
		if ( stream.Read( envStringSize ) == false )
		{
			return false;
		}
		if ( envStringSize > 0 )
		{
			AutoPtr< char > envString( (char *)::AllocFileLine( envStringSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 221 ) );
			if ( stream.Read( envString.Get(), envStringSize ) == false )
			{
				return false;
			}
			AStackString<> libEnvVar;
			if ( stream.Read( libEnvVar ) == false )
			{
				return false;
			}
			FBuild::Get().SetEnvironmentString( envString.Get(), envStringSize, libEnvVar );
		}

		
		uint32_t libEnvVarHashInDB( 0 );
		if ( stream.Read( libEnvVarHashInDB ) == false )
		{
			return false;
		}
		else
		{
			const uint32_t libEnvVarHash = GetLibEnvVarHash();
			if ( libEnvVarHashInDB != libEnvVarHash )
			{
				
				do { FLog::Warning( "'%s' Environment variable has changed - BFF will be re-parsed\n","LIB" ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				needReparsing = true;
				return true;
			}
		}

		
		Array< AString > workerList( 0, true );
		if ( stream.Read( workerList ) == false )
		{
			return false;
		}
		FBuild::Get().SetWorkerList( workerList );
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes.GetSize() == 0 ) ) { if ( AssertHandler::Failure( "m_AllNodes.GetSize() == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 261 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	uint32_t numNodes;
	if ( stream.Read( numNodes ) == false )
	{
		return false; 
	}

	m_AllNodes.SetSize( numNodes );
	memset( m_AllNodes.Begin(), 0, numNodes * sizeof( Node * ) );
	for ( uint32_t i=0; i<numNodes; ++i )
	{
		if ( LoadNode( stream ) == false )
		{
			return false; 
		}
	}

	
	for ( size_t i=0; i<numNodes; ++i )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes[ i ] ) ) { if ( AssertHandler::Failure( "m_AllNodes[ i ]", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 283 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes[ i ]->GetIndex() == i ) ) { if ( AssertHandler::Failure( "m_AllNodes[ i ]->GetIndex() == i", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 284 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	}

	return true;
}



bool NodeGraph::LoadNode( IOStream & stream )
{
	
	uint32_t nodeIndex( ( (uint32_t)0xFFFFFFFF ) );
	if ( stream.Read( nodeIndex ) == false )
	{
		return false;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes[ nodeIndex ] == nullptr ) ) { if ( AssertHandler::Failure( "m_AllNodes[ nodeIndex ] == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 302 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_NextNodeIndex = nodeIndex;

	
	Node * n = Node::Load( stream );
	if ( n == nullptr )
	{
		return false;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes[ nodeIndex ] == n ) ) { if ( AssertHandler::Failure( "m_AllNodes[ nodeIndex ] == n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 313 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n->GetIndex() == nodeIndex ) ) { if ( AssertHandler::Failure( "n->GetIndex() == nodeIndex", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 314 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	uint32_t lastTimeToBuild;
	if ( stream.Read( lastTimeToBuild ) == false )
	{
		return false;
	}
	n->SetLastBuildTime( lastTimeToBuild );

	return true;
}



void NodeGraph::Save( IOStream & stream ) const
{
	
	NodeGraphHeader header;
	stream.Write( (const void *)&header, sizeof( header ) );

	
	uint32_t numUsedFiles = (uint32_t)m_UsedFiles.GetSize();
	stream.Write( numUsedFiles );

	for ( uint32_t i=0; i<numUsedFiles; ++i )
	{
		const AString & fileName = m_UsedFiles[ i ].m_FileName;
		uint32_t fileNameLen( fileName.GetLength() );
		stream.Write( fileNameLen );
		stream.Write( fileName.Get(), fileNameLen );
		uint64_t timeStamp( m_UsedFiles[ i ].m_TimeStamp );
		stream.Write( timeStamp );
	}

	
	{
		
		stream.Write( FunctionSettings::GetCachePath() );
		stream.Write( FBuild::Get().GetCachePluginDLL() );

		
		const uint32_t envStringSize = FBuild::Get().GetEnvironmentStringSize();
		stream.Write( envStringSize );
		if ( envStringSize > 0 )
		{
			const char * envString = FBuild::Get().GetEnvironmentString();
			stream.Write( envString, envStringSize );

			AStackString<> libEnvVar;
			FBuild::Get().GetLibEnvVar( libEnvVar );
			stream.Write( libEnvVar );
		}

		
		const uint32_t libEnvVarHash = GetLibEnvVarHash();
		stream.Write( libEnvVarHash );

		
		const Array< AString > & workerList = FBuild::Get().GetWorkerList();
		stream.Write( workerList );
	}

	
	size_t numNodes = m_AllNodes.GetSize();
	stream.Write( (uint32_t)numNodes );

	
	Array< bool > savedNodeFlags( numNodes, false );
	savedNodeFlags.SetSize( numNodes );
	memset( savedNodeFlags.Begin(), 0, numNodes );
	for ( size_t i=0; i<numNodes; ++i )
	{
		SaveRecurse( stream, m_AllNodes[ i ], savedNodeFlags );
	}

	
	for ( size_t i=0; i<numNodes; ++i )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( savedNodeFlags[ i ] == true ) ) { if ( AssertHandler::Failure( "savedNodeFlags[ i ] == true", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 393 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	}
}



 void NodeGraph::SaveRecurse( IOStream & stream, Node * node, Array< bool > & savedNodeFlags )
{
	
	uint32_t nodeIndex = node->GetIndex();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeIndex != ( (uint32_t)0xFFFFFFFF ) ) ) { if ( AssertHandler::Failure( "nodeIndex != INVALID_NODE_INDEX", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 403 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( savedNodeFlags[ nodeIndex ] )
	{
		return;
	}

	
	SaveRecurse( stream, node->GetPreBuildDependencies(), savedNodeFlags );
	SaveRecurse( stream, node->GetStaticDependencies(), savedNodeFlags );
	SaveRecurse( stream, node->GetDynamicDependencies(), savedNodeFlags );

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( savedNodeFlags[ nodeIndex ] == false ) ) { if ( AssertHandler::Failure( "savedNodeFlags[ nodeIndex ] == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 415 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	stream.Write( nodeIndex );

	
	Node::Save( stream, node );

	
	uint32_t lastBuildTime = node->GetLastBuildTime();
	stream.Write( lastBuildTime );

	savedNodeFlags[ nodeIndex ] = true; 
}



 void NodeGraph::SaveRecurse( IOStream & stream, const Dependencies & dependencies, Array< bool > & savedNodeFlags )
{
	const Dependency * const end = dependencies.End();
	for ( const Dependency * it = dependencies.Begin(); it != end; ++it )
	{
		Node * n = it->GetNode();
		SaveRecurse( stream, n, savedNodeFlags );
	}
}



Node * NodeGraph::FindNode( const AString & nodeName ) const
{
	
	Node * n = FindNodeInternal( nodeName );
	if ( n )
	{
		return n;
	}

	
	AStackString< 1024 > fullPath;
	CleanPath( nodeName, fullPath );
	return FindNodeInternal( fullPath );
}



Node * NodeGraph::GetNodeByIndex( uint32_t index ) const
{
	Node * n = m_AllNodes[ index ];
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 464 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}



CopyNode * NodeGraph::CreateCopyNode( const AString & dstFileName, 
									  Node * sourceFile,
									  const Dependencies & preBuildDependencies )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 474 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( sourceFile->IsAFile() ) ) { if ( AssertHandler::Failure( "sourceFile->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 475 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPathDst;
	CleanPath( dstFileName, fullPathDst );

	CopyNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 480 ) CopyNode( fullPathDst, (FileNode *)sourceFile, preBuildDependencies );
	AddNode( node );
	return node;
}



CopyDirNode * NodeGraph::CreateCopyDirNode( const AString & nodeName, 
											Dependencies & staticDeps,
											const AString & destPath,
											const Dependencies & preBuildDependencies )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 492 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	CopyDirNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 494 ) CopyDirNode( nodeName, staticDeps, destPath, preBuildDependencies );
	AddNode( node );
	return node;
}



ExecNode * NodeGraph::CreateExecNode( const AString & dstFileName, 
									  FileNode * sourceFile, 
									  FileNode * executable, 
									  const AString & arguments,									  
									  const AString & workingDir,
									  int32_t expectedReturnCode,
									  const Dependencies & preBuildDependencies )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 509 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 512 > fullPath;
	CleanPath( dstFileName, fullPath );

	ExecNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 514 ) ExecNode( fullPath, sourceFile, executable, arguments, workingDir, expectedReturnCode, preBuildDependencies );
	AddNode( node );
	return node;
}



FileNode * NodeGraph::CreateFileNode( const AString & fileName, bool cleanPath )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 523 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	FileNode * node;

	if ( cleanPath )
	{
		AStackString< 512 > fullPath;
		CleanPath( fileName, fullPath );
		node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 531 ) FileNode( fullPath );
	}
	else
	{
		node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 535 ) FileNode( fileName );
	}

	AddNode( node );
	return node;
}



DirectoryListNode * NodeGraph::CreateDirectoryListNode( const AString & name,
													    const AString & path,
													    const AString & wildCard,
													    bool recursive,
													    const Array< AString > & excludePaths,
                                                        const Array< AString > & filesToExclude )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 551 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	

	DirectoryListNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 556 ) DirectoryListNode( name, path, wildCard, recursive, excludePaths, filesToExclude );
	AddNode( node );
	return node;
}



LibraryNode * NodeGraph::CreateLibraryNode( const AString & libraryName,
										    const Dependencies & inputNodes,
											CompilerNode * compiler,
											const AString & compilerArgs,
											const AString & compilerArgsDeoptimized,
											const AString & compilerOutputPath,
											const AString & linker,
											const AString & linkerArgs,
											uint32_t flags,
											ObjectNode * precompiledHeader,
											const Dependencies & compilerForceUsing,
											const Dependencies & preBuildDependencies,
											const Dependencies & additionalInputs,
											bool deoptimizeWritableFiles,
											bool deoptimizeWritableFilesWithToken )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 579 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( libraryName, fullPath );

	LibraryNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 598 ) LibraryNode( fullPath, inputNodes, compiler, compilerArgs, compilerArgsDeoptimized, compilerOutputPath, linker, linkerArgs, flags, precompiledHeader, compilerForceUsing, preBuildDependencies, additionalInputs, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken );
#line 599 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



ObjectNode * NodeGraph::CreateObjectNode( const AString & objectName,
										  Node * inputNode,
										  Node * compilerNode,
										  const AString & compilerArgs,
										  const AString & compilerArgsDeoptimized,
										  Node * precompiledHeader,
										  uint32_t flags,
										  const Dependencies & compilerForceUsing,
										  bool deoptimizeWritableFiles,
										  bool deoptimizeWritableFilesWithToken )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 616 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 512 > fullPath;
	CleanPath( objectName, fullPath );

	ObjectNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 621 ) ObjectNode( fullPath, inputNode, compilerNode, compilerArgs, compilerArgsDeoptimized, precompiledHeader, flags, compilerForceUsing, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken );
	AddNode( node );
	return node;
}



AliasNode * NodeGraph::CreateAliasNode( const AString & aliasName,
										const Dependencies & targets )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 631 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AliasNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 633 ) AliasNode( aliasName, targets );
	AddNode( node );
	return node;
}



DLLNode * NodeGraph::CreateDLLNode( const AString & linkerOutputName,
									const Dependencies & inputLibraries,
								    const Dependencies & otherLibraries,
									const AString & linker,
									const AString & linkerArgs,
									uint32_t flags,
									const Dependencies & assemblyResources,
									const AString & importLibName,
									Node * linkerStampExe,
									const AString & linkerStampExeArgs )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 651 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( inputLibraries.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "inputLibraries.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 652 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( linkerOutputName, fullPath );

	DLLNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 666 ) DLLNode( fullPath, inputLibraries, otherLibraries, linker, linkerArgs, flags, assemblyResources, importLibName, linkerStampExe, linkerStampExeArgs );
#line 667 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



ExeNode * NodeGraph::CreateExeNode( const AString & linkerOutputName,
									const Dependencies & inputLibraries,
								    const Dependencies & otherLibraries,
									const AString & linker,
									const AString & linkerArgs,
									uint32_t flags,
									const Dependencies & assemblyResources,
									Node * linkerStampExe,
									const AString & linkerStampExeArgs )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 683 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( linkerOutputName, fullPath );

	ExeNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 696 ) ExeNode( fullPath, inputLibraries, otherLibraries, linker, linkerArgs, flags, assemblyResources, linkerStampExe, linkerStampExeArgs );
#line 697 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



UnityNode *	NodeGraph::CreateUnityNode( const AString & unityName )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 705 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	UnityNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 707 ) UnityNode();
	node->SetName( unityName );
	AddNode( node );
	return node;
}

CSNode * NodeGraph::CreateCSNode( const AString & compilerOutput,
								  const Dependencies & inputNodes,
								  const AString & compiler,
								  const AString & compilerOptions,
								  const Dependencies & extraRefs )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 719 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( inputNodes.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "inputNodes.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 720 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( compilerOutput, fullPath );

	CSNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 729 ) CSNode( fullPath, inputNodes, compiler, compilerOptions, extraRefs );
#line 730 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



TestNode * NodeGraph::CreateTestNode( const AString & testOutput,
									  FileNode * testExecutable,
									  const AString & arguments,
									  const AString & workingDir )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 741 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( testOutput, fullPath );

	TestNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 749 ) TestNode( fullPath, testExecutable, arguments, workingDir );
#line 750 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



CompilerNode * NodeGraph::CreateCompilerNode( const AString & executable,
											  const Dependencies & extraFiles,
											  bool allowDistribution )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 760 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( executable, fullPath );

	CompilerNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 765 ) CompilerNode( fullPath, extraFiles, allowDistribution );
	AddNode( node );
	return node;
}



CompilerNode * NodeGraph::CreateCompilerNode( const AString & executable )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 774 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	CompilerNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 776 ) CompilerNode();
	node->SetName( executable );
	AddNode( node );
	return node;
}



VCXProjectNode * NodeGraph::CreateVCXProjectNode( const AString & projectOutput,
												  const Array< AString > & projectBasePaths,
												  const Dependencies & paths,
												  const Array< AString > & pathsToExclude,
												  const Array< AString > & allowedFileExtensions,
												  const Array< AString > & files,
												  const Array< AString > & filesToExclude,
												  const AString & rootNamespace,
												  const AString & projectGuid,
												  const AString & defaultLanguage,
												  const AString & applicationEnvironment,
												  const Array< VSProjectConfig > & configs,
												  const Array< VSProjectFileType > & fileTypes,
												  const Array< AString > & references,
												  const Array< AString > & projectReferences )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 800 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	AStackString< 1024 > fullPath;
	CleanPath( projectOutput, fullPath );

	VCXProjectNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 819 ) VCXProjectNode( fullPath, projectBasePaths, paths, pathsToExclude, allowedFileExtensions, files, filesToExclude, rootNamespace, projectGuid, defaultLanguage, applicationEnvironment, configs, fileTypes, references, projectReferences );
#line 820 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;
}



ObjectListNode * NodeGraph::CreateObjectListNode( const AString & listName,
												  const Dependencies & inputNodes,
												  CompilerNode * compiler,
												  const AString & compilerArgs,
												  const AString & compilerArgsDeoptimized,
												  const AString & compilerOutputPath,
												  ObjectNode * precompiledHeader,
												  const Dependencies & compilerForceUsing,
												  const Dependencies & preBuildDependencies,
												  bool deoptimizeWritableFiles,
												  bool deoptimizeWritableFilesWithToken )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 838 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	ObjectListNode * node = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 850 ) ObjectListNode( listName, inputNodes, compiler, compilerArgs, compilerArgsDeoptimized, compilerOutputPath, precompiledHeader, compilerForceUsing, preBuildDependencies, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken );
#line 851 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	AddNode( node );
	return node;

}



void NodeGraph::AddNode( Node * node )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 860 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node ) ) { if ( AssertHandler::Failure( "node", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 862 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FindNodeInternal( node->GetName() ) == nullptr ) ) { if ( AssertHandler::Failure( "FindNodeInternal( node->GetName() ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 864 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	const uint32_t crc = CRC32::CalcLower( node->GetName() );
	const size_t key = ( crc & 0xFFFF );
	node->m_Next = m_NodeMap[ key ];
	m_NodeMap[ key ] = node;

	
	if ( m_NextNodeIndex == m_AllNodes.GetSize() )
	{
		
		m_AllNodes.Append( node );
	}
	else
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_AllNodes[ m_NextNodeIndex ] == nullptr ) ) { if ( AssertHandler::Failure( "m_AllNodes[ m_NextNodeIndex ] == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 881 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		m_AllNodes[ m_NextNodeIndex ] = node;
	}

	
	node->SetIndex( m_NextNodeIndex );
	m_NextNodeIndex = (uint32_t)m_AllNodes.GetSize();
}



void NodeGraph::DoBuildPass( Node * nodeToBuild )
{
	s_BuildPassTag++;

	if ( nodeToBuild->GetType() == Node::PROXY_NODE )
	{
		const size_t total = nodeToBuild->GetStaticDependencies().GetSize();
		size_t failedCount = 0;
		size_t upToDateCount = 0;
		const Dependency * const end = nodeToBuild->GetStaticDependencies().End();
		for ( const Dependency * it = nodeToBuild->GetStaticDependencies().Begin(); it != end; ++it )
		{
			Node * n = it->GetNode();
			if ( n->GetState() == Node::FAILED )
			{
				failedCount++;
				continue;
			}
			else if ( n->GetState() == Node::UP_TO_DATE )
			{
				upToDateCount++;
				continue;
			}
			if ( n->GetState() != Node::BUILDING )
			{
				BuildRecurse( n );
			}
		}

		
		if ( ( upToDateCount + failedCount ) == total )
		{
			
			nodeToBuild->SetState( failedCount ? Node::FAILED : Node::UP_TO_DATE );
		}
	}
	else
	{
		if ( nodeToBuild->GetState() != Node::BUILDING )
		{
			BuildRecurse( nodeToBuild );
		}
	}
}



 void NodeGraph::BuildRecurse( Node * nodeToBuild )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeToBuild ) ) { if ( AssertHandler::Failure( "nodeToBuild", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 941 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeToBuild->GetState() != Node::BUILDING ) ) { if ( AssertHandler::Failure( "nodeToBuild->GetState() != Node::BUILDING", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 944 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop))

	
	if ( nodeToBuild->GetState() == Node::NOT_PROCESSED )
	{
		
		bool allDependenciesUpToDate = CheckDependencies( nodeToBuild, nodeToBuild->GetPreBuildDependencies() );
		if ( allDependenciesUpToDate == false )
		{
			return; 
		}

		nodeToBuild->SetState( Node::PRE_DEPS_READY );
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( nodeToBuild->GetState() == Node::PRE_DEPS_READY ) || ( nodeToBuild->GetState() == Node::STATIC_DEPS_READY ) || ( nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE ) ) ) { if ( AssertHandler::Failure( "( nodeToBuild->GetState() == Node::PRE_DEPS_READY ) || ( nodeToBuild->GetState() == Node::STATIC_DEPS_READY ) || ( nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 961 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
#line 962 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"

	
	if ( nodeToBuild->GetState() == Node::PRE_DEPS_READY )
	{
		
		bool allDependenciesUpToDate = CheckDependencies( nodeToBuild, nodeToBuild->GetStaticDependencies() );
		if ( allDependenciesUpToDate == false )
		{
			return; 
		}

		nodeToBuild->SetState( Node::STATIC_DEPS_READY );
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( nodeToBuild->GetState() == Node::STATIC_DEPS_READY ) || ( nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE ) ) ) { if ( AssertHandler::Failure( "( nodeToBuild->GetState() == Node::STATIC_DEPS_READY ) || ( nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 977 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
#line 978 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"

	if ( nodeToBuild->GetState() != Node::DYNAMIC_DEPS_DONE )
	{
		
		bool forceClean = FBuild::Get().GetOptions().m_ForceCleanBuild;
		if ( nodeToBuild->DoDynamicDependencies( forceClean ) == false )
		{
			nodeToBuild->SetState( Node::FAILED );
			return;		
		}

		nodeToBuild->SetState( Node::DYNAMIC_DEPS_DONE );
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE ) ) { if ( AssertHandler::Failure( "nodeToBuild->GetState() == Node::DYNAMIC_DEPS_DONE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 992 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	{
		
		bool allDependenciesUpToDate = CheckDependencies( nodeToBuild, nodeToBuild->GetDynamicDependencies() );
		if ( allDependenciesUpToDate == false )
		{
			return; 
		}
	}

	
	
	bool forceClean = FBuild::Get().GetOptions().m_ForceCleanBuild;
	nodeToBuild->SetStatFlag( Node::STATS_PROCESSED );
	if ( nodeToBuild->DetermineNeedToBuild( forceClean ) )
	{
		JobQueue::Get().QueueJob( nodeToBuild );
	}
	else
	{
		nodeToBuild->SetState( Node::UP_TO_DATE );
	}
}



 bool NodeGraph::CheckDependencies( Node * nodeToBuild, const Dependencies & dependencies )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeToBuild->GetType() != Node::PROXY_NODE ) ) { if ( AssertHandler::Failure( "nodeToBuild->GetType() != Node::PROXY_NODE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1022 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const uint32_t passTag = s_BuildPassTag;

	bool allDependenciesUpToDate = true;

	Dependencies::Iter i = dependencies.Begin();
	Dependencies::Iter end = dependencies.End();
	for ( ; i < end; ++i )
	{
		Node * n = i->GetNode();

		Node::State state = n->GetState();

		
		if ( state < Node::BUILDING )
		{
			
			if ( n->GetBuildPassTag() != passTag )
			{
				
				n->SetBuildPassTag( passTag );
	
				BuildRecurse( n );
			}
		}

		
		state = n->GetState();
		if ( state == Node::UP_TO_DATE )
		{
			continue;
		}

		allDependenciesUpToDate = false;

		
		if ( state == Node::FAILED )
		{
			
			nodeToBuild->SetState( Node::FAILED );
			break;
		}

		
	}

	return allDependenciesUpToDate;
}



 void NodeGraph::CleanPath( const AString & name, AString & fullPath )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( &name != &fullPath ) ) { if ( AssertHandler::Failure( "&name != &fullPath", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1076 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	char * dst;
   
	
    bool isFullPath = PathUtils::IsFullPath( name );
	if ( !isFullPath )
	{
		
		const AString & workingDir = FBuild::Get().GetWorkingDir();

		
        do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( workingDir.Find( ( '/' ) ) == nullptr ) ) { if ( AssertHandler::Failure( "workingDir.Find( OTHER_SLASH ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1088 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
        do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( workingDir.Find( ( "\\\\" ) ) == nullptr ) ) { if ( AssertHandler::Failure( "workingDir.Find( NATIVE_DOUBLE_SLASH ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1089 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

		
		fullPath = workingDir;
		fullPath += ( '\\' );

		
		uint32_t len = fullPath.GetLength();

		
		fullPath.SetLength( fullPath.GetLength() + name.GetLength() ); 

		
		dst = fullPath.Get() + len;
	}
	else
	{
		
		fullPath.SetLength( name.GetLength() ); 

		
		dst = fullPath.Get();
	}

	
	const char * src = name.Get();
	const char * const srcEnd = name.GetEnd();

	
	char lastChar = ( '\\' ); 
    
        while ( *src == ( '\\' ) || *src == ( '/' ) ) { ++src; } 
    #line 1122 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
	while ( src < srcEnd )
	{
		const char thisChar = *src;

		
		if ( ( thisChar == ( '\\' ) ) || ( thisChar == ( '/' ) ) )
		{
			
			*dst = ( '\\' );
			dst++;

			
			while ( ( *src == ( '\\' ) ) || ( *src == ( '/' ) ) )
			{
				src++;
			}
			lastChar = ( '\\' );
			continue;
		}
		else if ( thisChar == '.' )
		{
			if ( lastChar == ( '\\' ) ) 
			{
				
				char nextChar = *( src + 1 );
				if ( ( nextChar == ( '\\' ) ) || ( nextChar == ( '/' ) ) )
				{
					src++; 
					while ( ( *src == ( '\\' ) ) || ( *src == ( '/' ) ) )
					{
						++src;
					}
					continue; 
				}

				
				if ( nextChar == '.' )
				{
					nextChar = *( src + 2 );
					if ( ( nextChar == ( '\\' ) ) || ( nextChar == ( '/' ) ) )
					{
						src+=2; 
						while ( ( *src == ( '\\' ) ) || ( *src == ( '/' ) ) )
						{
							++src;
						}

						if ( dst > fullPath.Get() + 3 )
						{
							--dst; 
                            
							
                            
                                while ( dst > fullPath.Get() + 3 ) 
                            

#line 1179 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp"
							{
								--dst;
								if ( *dst == ( '\\' ) ) 
								{
									++dst; 
									break;
								}
							}
						}

						continue;
					}
				}
			}
		}

		
		*dst++ = *src++;
		lastChar = thisChar;
	}

	
	fullPath.SetLength( (uint16_t)( dst - fullPath.Get() ) );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( AString::StrLen( fullPath.Get() ) == fullPath.GetLength() ) ) { if ( AssertHandler::Failure( "AString::StrLen( fullPath.Get() ) == fullPath.GetLength()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1202 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
    do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( fullPath.Find( ( '/' ) ) == nullptr ) ) { if ( AssertHandler::Failure( "fullPath.Find( OTHER_SLASH ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1205 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
    do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( fullPath.Find( ( "\\\\" ) ) == nullptr ) ) { if ( AssertHandler::Failure( "fullPath.Find( NATIVE_DOUBLE_SLASH ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1206 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
}



void NodeGraph::AddUsedFile( const AString & fileName, uint64_t timeStamp )
{
	const size_t numFiles = m_UsedFiles.GetSize();
	for ( size_t i=0 ;i<numFiles; ++i )
	{
		if ( PathUtils::ArePathsEqual( m_UsedFiles[i].m_FileName, fileName ) )
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_UsedFiles[ i ].m_Once == false ) ) { if ( AssertHandler::Failure( "m_UsedFiles[ i ].m_Once == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1218 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			return;
		}
	}
	m_UsedFiles.Append( UsedFile( fileName, timeStamp ) );
}



bool NodeGraph::IsOneUseFile( const AString & fileName ) const
{
	const size_t numFiles = m_UsedFiles.GetSize();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( numFiles ) ) { if ( AssertHandler::Failure( "numFiles", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1230 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	for ( size_t i=0 ;i<numFiles; ++i )
	{
		if ( PathUtils::ArePathsEqual( m_UsedFiles[i].m_FileName, fileName ) )
		{
			return m_UsedFiles[ i ].m_Once;
		}
	}

	
	
	return false;
}



void NodeGraph::SetCurrentFileAsOneUse()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_UsedFiles.IsEmpty() ) ) { if ( AssertHandler::Failure( "!m_UsedFiles.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1248 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_UsedFiles[ m_UsedFiles.GetSize() - 1 ].m_Once = true;
}



Node * NodeGraph::FindNodeInternal( const AString & fullPath ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeGraph.cpp", 1256 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const uint32_t crc = CRC32::CalcLower( fullPath );
	const size_t key = ( crc & 0xFFFF );

	Node * n = m_NodeMap[ key ];
	while ( n )
	{
		if ( n->GetNameCRC() == crc )
		{
			if ( n->GetName().CompareI( fullPath ) == 0 )
			{
				return n;
			}
		}
		n = n->m_Next;
	}
	return nullptr;
}



 void NodeGraph::UpdateBuildStatus( const Node * node, 
											  uint32_t & nodesBuiltTime, 
											  uint32_t & totalNodeTime )
{
	s_BuildPassTag++;
	UpdateBuildStatusRecurse( node, nodesBuiltTime, totalNodeTime );
}



 void NodeGraph::UpdateBuildStatusRecurse( const Node * node, 
													 uint32_t & nodesBuiltTime, 
													 uint32_t & totalNodeTime )
{
	
	uint32_t nodeTime = node->GetLastBuildTime();
	totalNodeTime += nodeTime;
	nodesBuiltTime += ( node->GetState() == Node::UP_TO_DATE ) ? nodeTime : 0;

	
	uint32_t accumulatedProgress = node->GetProgressAccumulator();
	if ( accumulatedProgress > 0 )
	{
		nodesBuiltTime += accumulatedProgress;
		totalNodeTime += accumulatedProgress;
		return;
	}

	
	const uint32_t buildPassTag = s_BuildPassTag;
	if ( node->GetBuildPassTag() == buildPassTag )
	{
		return;
	}
	node->SetBuildPassTag( buildPassTag );

	

	uint32_t progress = 0;
	uint32_t total = 0;

	UpdateBuildStatusRecurse( node->GetPreBuildDependencies(), progress, total );
	UpdateBuildStatusRecurse( node->GetStaticDependencies(), progress, total );
	UpdateBuildStatusRecurse( node->GetDynamicDependencies(), progress, total );

	nodesBuiltTime += progress;
	totalNodeTime += total;

	
	
	if ( node->GetState() >= Node::BUILDING )
	{
		node->SetProgressAccumulator(total);
	}
}



 void NodeGraph::UpdateBuildStatusRecurse( const Dependencies & dependencies, 
													 uint32_t & nodesBuiltTime, 
													 uint32_t & totalNodeTime )
{
	for ( Dependencies::Iter i = dependencies.Begin();
		i != dependencies.End();
		i++ )
	{
		UpdateBuildStatusRecurse( i->GetNode(), nodesBuiltTime, totalNodeTime );
	}
}



bool NodeGraph::ReadHeaderAndUsedFiles( IOStream & nodeGraphStream, Array< UsedFile > & files, bool & compatibleDB ) const
{
	
	NodeGraphHeader ngh;
	if ( ( nodeGraphStream.Read( &ngh, sizeof( ngh ) ) != sizeof( ngh ) ) ||
		 ( ngh.IsValid() == false ) )
	{
		return false;
	}

	
	if ( ngh.IsCompatibleVersion() == false )
	{
		compatibleDB = false;
		return true;
	}

	uint32_t numFiles = 0;
	if ( !nodeGraphStream.Read( numFiles ) )
	{
		return false;
	}

	for ( uint32_t i=0; i<numFiles; ++i )
	{
		uint32_t fileNameLen( 0 );
		if ( !nodeGraphStream.Read( fileNameLen ) )
		{
			return false;
		}
		AStackString<> fileName;
		fileName.SetLength( fileNameLen ); 
		if ( nodeGraphStream.Read( fileName.Get(), fileNameLen ) != fileNameLen )
		{
			return false;
		}
		uint64_t timeStamp;
		if ( !nodeGraphStream.Read( timeStamp ) )
		{
			return false;
		}

		files.Append( UsedFile( fileName, timeStamp ) );
	}

	return true;
}



uint32_t NodeGraph::GetLibEnvVarHash() const
{
	
	AStackString<> libVar;
	FBuild::Get().GetLibEnvVar( libVar );
	if ( libVar.IsEmpty() )
	{
		return 0; 
	}

	return Murmur3::Calc32( libVar );
}



#line 124 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/NodeProxy.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeProxy.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeProxy.cpp"





NodeProxy::NodeProxy( const AString & name )
	: Node( name, Node::PROXY_NODE, 0 )
{
}



NodeProxy::~NodeProxy()
{
}



 bool NodeProxy::IsAFile() const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeProxy.cpp", 27 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	return false;
}



 void NodeProxy::Save( IOStream &  ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeProxy.cpp", 35 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
}



 bool NodeProxy::DetermineNeedToBuild( bool  ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\NodeProxy.cpp", 42 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	return false;
}


#line 127 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/ObjectListNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp"


















ObjectListNode::ObjectListNode( const AString & listName,
						  const Dependencies & inputNodes,
						  CompilerNode * compiler,
						  const AString & compilerArgs,
						  const AString & compilerArgsDeoptimized,
						  const AString & compilerOutputPath,
						  ObjectNode * precompiledHeader,
						  const Dependencies & compilerForceUsing,
						  const Dependencies & preBuildDependencies,
						  bool deoptimizeWritableFiles,
						  bool deoptimizeWritableFilesWithToken )
: Node( listName, Node::OBJECT_LIST_NODE, Node::FLAG_NONE )
, m_CompilerForceUsing( compilerForceUsing )
, m_DeoptimizeWritableFiles( deoptimizeWritableFiles )
, m_DeoptimizeWritableFilesWithToken( deoptimizeWritableFilesWithToken )
{
	m_LastBuildTimeMs = 10000;

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !inputNodes.IsEmpty() ) ) { if ( AssertHandler::Failure( "!inputNodes.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp", 44 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies = inputNodes;

	
	m_PrecompiledHeader = precompiledHeader;

	
	m_Compiler = compiler;
	m_CompilerArgs = compilerArgs;
	m_CompilerArgsDeoptimized = compilerArgsDeoptimized;
	m_CompilerOutputPath = compilerOutputPath;

	m_PreBuildDependencies = preBuildDependencies;
}



ObjectListNode::~ObjectListNode()
{
}



 bool ObjectListNode::IsAFile() const
{
	return false;
}



 bool ObjectListNode::DoDynamicDependencies( bool forceClean )
{
	(void)forceClean; 

	
	m_DynamicDependencies.Clear();

	

	Node * pchCPP = nullptr;
	if ( m_PrecompiledHeader )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_PrecompiledHeader->GetType() == Node::OBJECT_NODE ) ) { if ( AssertHandler::Failure( "m_PrecompiledHeader->GetType() == Node::OBJECT_NODE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp", 86 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		pchCPP = m_PrecompiledHeader->GetPrecompiledHeaderCPPFile();
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	for ( Dependencies::Iter i = m_StaticDependencies.Begin();
		  i != m_StaticDependencies.End();
		  i++ )
	{
		
		if ( i->GetNode()->GetType() == Node::DIRECTORY_LIST_NODE )
		{
			
			DirectoryListNode * dln = i->GetNode()->CastTo< DirectoryListNode >();
			const Array< FileIO::FileInfo > & files = dln->GetFiles();
			m_DynamicDependencies.SetCapacity( m_DynamicDependencies.GetSize() + files.GetSize() );
			for ( Array< FileIO::FileInfo >::Iter fIt = files.Begin();
					fIt != files.End();
					fIt++ )
			{
				
				Node * n = ng.FindNode( fIt->m_Name );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( fIt->m_Name );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() .CompilerInputFile '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				
				if ( pchCPP && ( n == pchCPP ) )
				{
					continue;
				}

				
				if ( CreateDynamicObjectNode( n ) == false )
				{
					return false; 
				}
			}
		}
		else if ( i->GetNode()->GetType() == Node::FILE_NODE )
		{
			
			if ( CreateDynamicObjectNode( i->GetNode() ) == false )
			{
				return false; 
			}
		}
		else if ( i->GetNode()->GetType() == Node::UNITY_NODE )
		{
			
			UnityNode * un = i->GetNode()->CastTo< UnityNode >();

			
			const Array< AString > & unityFiles = un->GetUnityFileNames();
			for ( Array< AString >::Iter it = unityFiles.Begin();
				  it != unityFiles.End();
				  it++ )
			{
				Node * n = ng.FindNode( *it );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( *it );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() .CompilerInputUnity '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				if ( CreateDynamicObjectNode( n, true ) == false )
				{
					return false; 
				}
			}
			
			
			const Array< AString > & isolatedFiles = un->GetIsolatedFileNames();
			for ( Array< AString >::Iter it = isolatedFiles.Begin();
				  it != isolatedFiles.End();
				  it++ )
			{
				Node * n = ng.FindNode( *it );
				if ( n == nullptr )
				{
					n = ng.CreateFileNode( *it );
				}
				else if ( n->IsAFile() == false )
				{
					do { FLog::Error( "Library() Isolated '%s' is not a FileNode (type: %s)",n->GetName().Get(), n->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}

				
				if ( CreateDynamicObjectNode( n, false, true ) == false )
				{
					return false; 
				}
			}
		}
		else
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp", 197 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		}
	}

	
	

	
	if ( m_DynamicDependencies.GetSize() == 0 )
	{
		do { FLog::Error( "No files found to build '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	
	
	
	
	if ( m_PrecompiledHeader )
	{
		m_DynamicDependencies.Append( Dependency( m_PrecompiledHeader ) );
	}

	return true;
}



 Node::BuildResult ObjectListNode::DoBuild( Job *  )
{
	
	uint64_t timeStamp = 0;
	const Dependency * const end = m_DynamicDependencies.End();
	for ( const Dependency * it = m_DynamicDependencies.Begin(); it != end; ++it )
	{
		ObjectNode * on = it->GetNode()->CastTo< ObjectNode >();
		timeStamp = Math::Max< uint64_t >( timeStamp, on->GetStamp() );
	}
	m_Stamp = timeStamp;

	return NODE_RESULT_OK;
}



void ObjectListNode::GetInputFiles( AString & fullArgs, const AString & pre, const AString & post ) const
{
	
	for ( Dependencies::Iter i = m_DynamicDependencies.Begin();
		  i != m_DynamicDependencies.End();
		  i++ )
	{
		const Node * n = i->GetNode();

		
		if ( n->GetType() == Node::OBJECT_NODE )
		{
			
			const ObjectNode * on = n->CastTo< ObjectNode >();
			if ( on->IsCreatingPCH() )
			{
				if ( on->IsMSVC() )
				{
					fullArgs += pre;
					fullArgs += on->GetName();
					fullArgs += on->GetObjExtension();
					fullArgs += post;
					fullArgs += ' ';
					continue;
				}
				else
				{
					
					continue; 
				}
			}
		}

		
		fullArgs += pre;
		fullArgs += n->GetName();
		fullArgs += post;
		fullArgs += ' ';
	}
}



bool ObjectListNode::CreateDynamicObjectNode( Node * inputFile, bool isUnityNode, bool isIsolatedFromUnityNode )
{
	const AString & fileName = inputFile->GetName();

	
	
	const char * lastSlash = fileName.FindLast( ( '\\' ) );
	lastSlash = lastSlash ? ( lastSlash + 1 ) : fileName.Get();
	const char * lastDot = fileName.FindLast( '.' );
	lastDot = lastDot && ( lastDot > lastSlash ) ? lastDot : fileName.GetEnd();
	AStackString<> fileNameOnly( lastSlash, lastDot );
	AStackString<> objFile( m_CompilerOutputPath );
	objFile += fileNameOnly;
	objFile += GetObjExtension();

	
	
	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * on = ng.FindNode( objFile );
	if ( on == nullptr )
	{
		
		uint32_t flags = ObjectNode::DetermineFlags( m_Compiler, m_CompilerArgs );
		if ( isUnityNode )
		{
			flags |= ObjectNode::FLAG_UNITY;
		}
		if ( isIsolatedFromUnityNode )
		{
			flags |= ObjectNode::FLAG_ISOLATED_FROM_UNITY;
		}

		on = ng.CreateObjectNode( objFile, inputFile, m_Compiler, m_CompilerArgs, m_CompilerArgsDeoptimized, m_PrecompiledHeader, flags, m_CompilerForceUsing, m_DeoptimizeWritableFiles, m_DeoptimizeWritableFilesWithToken );
	}
	else if ( on->GetType() != Node::OBJECT_NODE )
	{
		do { FLog::Error( "Node '%s' is not an ObjectNode (type: %s)",on->GetName().Get(), on->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	else 
	{
		ObjectNode * other = on->CastTo< ObjectNode >();
		if ( inputFile != other->GetSourceFile() )
		{
			do { FLog::Error( "Conflicting objects found:\n" " File A: %s\n" " File B: %s\n" " Both compile to: %s\n",inputFile->GetName().Get(), other->GetSourceFile()->GetName().Get(), objFile.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 336 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectListNode.cpp"
			return false;
		}
	}
	m_DynamicDependencies.Append( Dependency( on ) );
	return true;
}



 Node * ObjectListNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	CompilerNode * compilerNode = nullptr; if ( Node::LoadNode( stream, compilerNode ) == false ) { return nullptr; };
	AStackString<> compilerArgs; if ( stream.Read( compilerArgs ) == false ) { return nullptr; };
	AStackString<> compilerArgsDeoptimized; if ( stream.Read( compilerArgsDeoptimized ) == false ) { return nullptr; };
	AStackString<> compilerOutputPath; if ( stream.Read( compilerOutputPath ) == false ) { return nullptr; };
	Dependencies staticDeps( 16, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	Node * precompiledHeader = nullptr; if ( Node::LoadNode( stream, precompiledHeader ) == false ) { return nullptr; };
	AStackString<> objExtensionOverride; if ( stream.Read( objExtensionOverride ) == false ) { return nullptr; };
	Dependencies compilerForceUsing( 0, true ); if ( compilerForceUsing.Load( stream ) == false ) { return nullptr; };
	Dependencies preBuildDependencies( 0, true ); if ( preBuildDependencies.Load( stream ) == false ) { return nullptr; };
	bool deoptimizeWritableFiles; if ( stream.Read( deoptimizeWritableFiles ) == false ) { return nullptr; };
	bool deoptimizeWritableFilesWithToken; if ( stream.Read( deoptimizeWritableFilesWithToken ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	ObjectListNode * n = ng.CreateObjectListNode( name, 
								staticDeps, 
								compilerNode, 
								compilerArgs,
								compilerArgsDeoptimized,
								compilerOutputPath, 
								precompiledHeader ? precompiledHeader->CastTo< ObjectNode >() : nullptr,
								compilerForceUsing,
								preBuildDependencies,
								deoptimizeWritableFiles,
								deoptimizeWritableFilesWithToken );
	n->m_ObjExtensionOverride = objExtensionOverride;

	
	
	
	
	
	
	
	
	return n;
}



 void ObjectListNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	Node::SaveNode( stream, m_Compiler );;
	stream.Write( m_CompilerArgs );;
	stream.Write( m_CompilerArgsDeoptimized );;
	stream.Write( m_CompilerOutputPath );;
	m_StaticDependencies.Save( stream );;
	Node::SaveNode( stream, m_PrecompiledHeader );;
	stream.Write( m_ObjExtensionOverride );;
	m_CompilerForceUsing.Save( stream );;
	m_PreBuildDependencies.Save( stream );;
	stream.Write( m_DeoptimizeWritableFiles );;
	stream.Write( m_DeoptimizeWritableFilesWithToken );;

	
	
	
	
	
}



const char * ObjectListNode::GetObjExtension() const
{
	if ( m_ObjExtensionOverride.IsEmpty() )
	{
		return ".obj";
	}
	return m_ObjExtensionOverride.Get();
}


#line 130 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/ObjectNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"










#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Compressor.h"


#pragma once









class Compressor
{
public:
	explicit Compressor();
	~Compressor();

	bool IsValidData( const void * data, size_t dataSize ) const;

	bool Compress( const void * data, size_t dataSize ); 
	void Decompress( const void * data );

	const void *	GetResult() const		{ return m_Result; }
	size_t			GetResultSize() const	{ return m_ResultSize; }

	inline void *	ReleaseResult()			{ void * r = m_Result; m_Result = nullptr; m_ResultSize = 0; return r; }

private:
	struct Header
	{
		uint32_t m_CompressionType;
		uint32_t m_UncompressedSize;
		uint32_t m_CompressedSize;
	};
	void * m_Result;
	size_t m_ResultSize;
};


#line 42 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Compressor.h"
#line 18 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"




#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/WorkerThread.h"


#pragma once











class FileStream;



class WorkerThread
{
public:
	WorkerThread( uint32_t threadIndex );
	void Init();
	virtual ~WorkerThread();

	static void InitTmpDir( bool remote = false );

	inline void Stop()				{ m_ShouldExit = true; }
	inline bool HasExited() const	{ return m_Exited; }
	void WaitForStop(); 

	static uint32_t GetThreadIndex();


	static void CreateTempFilePath( const char * fileName,
									AString & tmpFileName );
	static bool CreateTempFile( const AString & tmpFileName,
								FileStream & file );
	static void CreateThreadLocalTmpDir();
protected:
	
	friend class FBuild;
	static bool Update();

	
	static uint32_t ThreadWrapperFunc( void * param );
	virtual void Main();

	
	volatile bool m_ShouldExit;
	volatile bool m_Exited;
	uint32_t	  m_ThreadIndex;

	static AStackString<> s_TmpRoot;
};


#line 59 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/WorkerThread.h"
#line 23 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"














	
#line 39 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"


#line 42 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"



ObjectNode::ObjectNode( const AString & objectName,
					    Node * inputNode,
					    Node * compilerNode,
						const AString & compilerArgs,
						const AString & compilerArgsDeoptimized,
						Node * precompiledHeader,
						uint32_t flags,
						const Dependencies & compilerForceUsing,
						bool deoptimizeWritableFiles,
						bool deoptimizeWritableFilesWithToken )
: FileNode( objectName, Node::FLAG_NONE )
, m_Includes( 0, true )
, m_Flags( flags )
, m_CompilerArgs( compilerArgs )
, m_CompilerArgsDeoptimized( compilerArgsDeoptimized )
, m_CompilerForceUsing( compilerForceUsing )
, m_DeoptimizeWritableFiles( deoptimizeWritableFiles )
, m_DeoptimizeWritableFilesWithToken( deoptimizeWritableFilesWithToken )
, m_Remote( false )
{
	m_StaticDependencies.SetCapacity( 3 );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( compilerNode ) ) { if ( AssertHandler::Failure( "compilerNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 67 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( Dependency( compilerNode ) );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( inputNode ) ) { if ( AssertHandler::Failure( "inputNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 70 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( Dependency( inputNode ) );

	if ( precompiledHeader )
	{
		m_StaticDependencies.Append( Dependency( precompiledHeader ) );
	}

	m_StaticDependencies.Append( compilerForceUsing );

	m_Type = OBJECT_NODE;
	m_LastBuildTimeMs = 5000; 
}



ObjectNode::ObjectNode( const AString & objectName,
						NodeProxy * srcFile,
						const AString & compilerArgs,
						uint32_t flags )
: FileNode( objectName, Node::FLAG_NONE )
, m_Includes( 0, true )
, m_Flags( flags )
, m_CompilerArgs( compilerArgs )
, m_DeoptimizeWritableFiles( false )
, m_DeoptimizeWritableFilesWithToken( false )
, m_Remote( true )
{
	m_Type = OBJECT_NODE;
	m_LastBuildTimeMs = 5000; 

	m_StaticDependencies.SetCapacity( 2 );
	m_StaticDependencies.Append( Dependency( nullptr ) );
	m_StaticDependencies.Append( Dependency( srcFile ) );
}



ObjectNode::~ObjectNode()
{
	
	if ( m_Remote )
	{
		Node * srcFile = GetSourceFile();
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( srcFile->GetType() == Node::PROXY_NODE ) ) { if ( AssertHandler::Failure( "srcFile->GetType() == Node::PROXY_NODE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 114 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		delete srcFile;
	}
}



 Node::BuildResult ObjectNode::DoBuild( Job * job )
{
	
	if ( FileIO::FileExists( GetName().Get() ) )
	{
		if ( FileIO::FileDelete( GetName().Get() ) == false )
		{
			do { FLog::Error( "Failed to delete file before build '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return NODE_RESULT_FAILED;
		}
	}
	if ( GetFlag( FLAG_MSVC ) && GetFlag( FLAG_CREATING_PCH ) )
	{
		AStackString<> pchObj( GetName() );
		pchObj += GetObjExtension();
		if ( FileIO::FileExists( pchObj.Get() ) )
		{
			if ( FileIO::FileDelete( pchObj.Get() ) == false )
			{
				do { FLog::Error( "Failed to delete file before build '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return NODE_RESULT_FAILED;
			}
		}
	}

	
	bool useDeoptimization = ShouldUseDeoptimization();

	bool useCache = ShouldUseCache();
	bool useDist = GetFlag( FLAG_CAN_BE_DISTRIBUTED ) && FBuild::Get().GetOptions().m_AllowDistributed;
	bool usePreProcessor = ( useCache || useDist || GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU ) );

	if ( usePreProcessor )
	{
		return DoBuildWithPreProcessor( job, useDeoptimization, useCache );
	}

	if ( GetFlag( FLAG_MSVC ) )
	{
		return DoBuildMSCL_NoCache( job, useDeoptimization );
	}

	return DoBuildOther( job, useDeoptimization );
}



 Node::BuildResult ObjectNode::DoBuild2( Job * job, bool racingRemoteJob = false )
{
	
	
	bool useDeoptimization = job->IsLocal() && ShouldUseDeoptimization();
	bool stealingRemoteJob = job->IsLocal(); 
	return DoBuildWithPreProcessor2( job, useDeoptimization, stealingRemoteJob, racingRemoteJob );
}



 bool ObjectNode::Finalize()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( Thread::IsMainThread() ) ) { if ( AssertHandler::Failure( "Thread::IsMainThread()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 181 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	
	m_DynamicDependencies.Clear();
	m_DynamicDependencies.SetCapacity( m_Includes.GetSize() );
	for ( Array< AString >::ConstIter it = m_Includes.Begin();
			it != m_Includes.End();
			it++ )
	{
		Node * fn = FBuild::Get().GetDependencyGraph().FindNode( *it );
		if ( fn == nullptr )
		{
			fn = ng.CreateFileNode( *it );
		}
		else if ( fn->IsAFile() == false )
		{
			do { FLog::Error( "'%s' is not a FileNode (type: %s)",fn->GetName().Get(), fn->GetTypeName() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}
		m_DynamicDependencies.Append( Dependency( fn ) );
	}

	return true;
}



 Node::BuildResult ObjectNode::DoBuildMSCL_NoCache( Job * job, bool useDeoptimization )
{
	
	AStackString< 8 * (1024) > fullArgs;
	BuildFullArgs( job, fullArgs, PASS_COMPILE, useDeoptimization );
	fullArgs += " /showIncludes"; 

	EmitCompilationMessage( fullArgs, useDeoptimization );

	
	CompileHelper ch;
	if ( !ch.SpawnCompiler( job, GetName(), GetCompiler()->GetName(), fullArgs, true ) ) 
	{
		return NODE_RESULT_FAILED; 
	}

	
	if ( ProcessIncludesMSCL( ch.GetOut().Get(), ch.GetOutSize() ) == false )
	{
		return NODE_RESULT_FAILED; 
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );

	return NODE_RESULT_OK;
}



Node::BuildResult ObjectNode::DoBuildWithPreProcessor( Job * job, bool useDeoptimization, bool useCache )
{
	AStackString< 8 * (1024) > fullArgs;
	BuildFullArgs( job, fullArgs, PASS_PREPROCESSOR_ONLY, useDeoptimization );

	if ( BuildPreprocessedOutput( fullArgs, job, useDeoptimization ) == false )
	{
		return NODE_RESULT_FAILED; 
	}

	
	if ( ProcessIncludesWithPreProcessor( job ) == false )
	{
		return NODE_RESULT_FAILED; 
	}

	
	if ( useCache )
	{
		
		if ( RetrieveFromCache( job ) )
		{
			return NODE_RESULT_OK_CACHE;
		}
	}

	
	if ( GetFlag( FLAG_CAN_BE_DISTRIBUTED ) &&
		 FBuild::Get().GetOptions().m_AllowDistributed &&
		 JobQueue::Get().GetDistributableJobsMemUsage() < ( 512 * (1024 * 1024) ) )
	{
		
		Compressor c;
		c.Compress( job->GetData(), job->GetDataSize() );
		size_t compressedSize = c.GetResultSize();
		job->OwnData( c.ReleaseResult(), compressedSize, true );

		
		return NODE_RESULT_NEED_SECOND_BUILD_PASS;
	}

	
	bool stealingRemoteJob = false; 
	bool racingRemoteJob = false;
	Node::BuildResult result = DoBuildWithPreProcessor2( job, useDeoptimization, stealingRemoteJob, racingRemoteJob );
	if ( result != Node::NODE_RESULT_OK )
	{
		return result;
	}

	return Node::NODE_RESULT_OK;
}



Node::BuildResult ObjectNode::DoBuildWithPreProcessor2( Job * job, bool useDeoptimization, bool stealingRemoteJob, bool racingRemoteJob )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( GetFlag( FLAG_USING_CLR ) == false ) ) { if ( AssertHandler::Failure( "GetFlag( FLAG_USING_CLR ) == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 298 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	bool usePreProcessedOutput = true;
	if ( job->IsLocal() )
	{
		if ( GetFlag( FLAG_CLANG | FLAG_GCC | FLAG_SNC ) )
		{
			
			
			if ( GetFlag( FLAG_USING_PCH ) )
			{
				usePreProcessedOutput = false;
			}
	
			
			
			if ( GetFlag( FLAG_CREATING_PCH ) )
			{
				usePreProcessedOutput = false;
			}
		}

		if ( GetFlag( FLAG_MSVC ) )
		{
			
			
			
			if ( GetFlag( FLAG_USING_PCH ) &&
				 ( FBuild::Get().GetOptions().m_UseCacheWrite == false ) )
			{
				usePreProcessedOutput = false;
			}
		}

		
		if ( GetFlag( FLAG_CUDA_NVCC ) )
		{
			usePreProcessedOutput = false;
		}
	}

	AStackString< 8 * (1024) > fullArgs;
	AStackString<> tmpFileName;
	if ( usePreProcessedOutput )
	{
		if ( WriteTmpFile( job, tmpFileName ) == false )
		{
			return NODE_RESULT_FAILED; 
		}

		BuildFullArgs( job, fullArgs, PASS_COMPILE_PREPROCESSED, useDeoptimization );

		
		Node * sourceFile = GetSourceFile();
		fullArgs.Replace( sourceFile->GetName().Get(), tmpFileName.Get() );
	}
	else
	{
		BuildFullArgs( job, fullArgs, PASS_COMPILE, useDeoptimization );
	}

	if ( stealingRemoteJob || racingRemoteJob )
	{
		
		EmitCompilationMessage( fullArgs, useDeoptimization, stealingRemoteJob, racingRemoteJob );
	}

	bool result = BuildFinalOutput( job, fullArgs );

	
	if ( tmpFileName.IsEmpty() == false )
	{
		FileIO::FileDelete( tmpFileName.Get() );
	}

	if ( result == false )
	{
		return NODE_RESULT_FAILED; 
	}

	
	if ( job->IsLocal() )
	{
		m_Stamp = FileIO::GetFileLastWriteTime( m_Name );

		const bool useCache = ShouldUseCache();
		if ( m_Stamp && useCache )
		{
			WriteToCache( job );
		}
	}

	return NODE_RESULT_OK;
}



 Node::BuildResult ObjectNode::DoBuildOther( Job * job, bool useDeoptimization )
{
	
	AStackString< 8 * (1024) > fullArgs;
	BuildFullArgs( job, fullArgs, PASS_COMPILE, useDeoptimization );

	EmitCompilationMessage( fullArgs, useDeoptimization );

	
	CompileHelper ch;
	if ( !ch.SpawnCompiler( job, GetName(), GetCompiler()->GetName(), fullArgs, false ) ) 
	{
		return NODE_RESULT_FAILED; 
	}

	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );

	return NODE_RESULT_OK;
}



bool ObjectNode::ProcessIncludesMSCL( const char * output, uint32_t outputSize )
{
	Timer t;

	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( output && outputSize ) ) { if ( AssertHandler::Failure( "output && outputSize", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 423 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		CIncludeParser parser;
		bool result = parser.ParseMSCL_Output( output, outputSize );
		if ( result == false )
		{
			do { FLog::Error( "Failed to process includes for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}

		
		
		
		m_Includes.Clear();
		parser.SwapIncludes( m_Includes );
	}

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Process Includes:\n - File: %s\n - Time: %u ms\n - Num : %u",m_Name.Get(), uint32_t( t.GetElapsedMS() ), uint32_t( m_Includes.GetSize() ) ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return true;
}



bool ObjectNode::ProcessIncludesWithPreProcessor( Job * job )
{
	Timer t;

	{
		const char  * output = (char *)job->GetData();
		const size_t outputSize = job->GetDataSize();

		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( output && outputSize ) ) { if ( AssertHandler::Failure( "output && outputSize", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 455 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		CIncludeParser parser;
		bool msvcStyle = GetFlag( FLAG_MSVC ) || GetFlag( FLAG_CUDA_NVCC );
		bool result = msvcStyle ? parser.ParseMSCL_Preprocessed( output, outputSize )
								: parser.ParseGCC_Preprocessed( output, outputSize );
		if ( result == false )
		{
			do { FLog::Error( "Failed to process includes for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}

		
		
		
		m_Includes.Clear();
		parser.SwapIncludes( m_Includes );
	}

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Process Includes:\n - File: %s\n - Time: %u ms\n - Num : %u",m_Name.Get(), uint32_t( t.GetElapsedMS() ), uint32_t( m_Includes.GetSize() ) ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	return true;
}



 Node * ObjectNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	Dependencies staticDeps( 3, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	Dependencies dynamicDeps( 0, true ); if ( dynamicDeps.Load( stream ) == false ) { return nullptr; };
	uint32_t flags; if ( stream.Read( flags ) == false ) { return nullptr; };
	AStackString<> compilerArgs; if ( stream.Read( compilerArgs ) == false ) { return nullptr; };
	AStackString<> compilerArgsDeoptimized; if ( stream.Read( compilerArgsDeoptimized ) == false ) { return nullptr; }
	AStackString<> objExtensionOverride; if ( stream.Read( objExtensionOverride ) == false ) { return nullptr; };
	Dependencies compilerForceUsing( 0, true ); if ( compilerForceUsing.Load( stream ) == false ) { return nullptr; };
	bool deoptimizeWritableFiles; if ( stream.Read( deoptimizeWritableFiles ) == false ) { return nullptr; };
	bool deoptimizeWritableFilesWithToken; if ( stream.Read( deoptimizeWritableFilesWithToken ) == false ) { return nullptr; };

	
	
	size_t numStaticDepsExcludingForceUsing = staticDeps.GetSize() - compilerForceUsing.GetSize();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( numStaticDepsExcludingForceUsing == 2 ) || ( numStaticDepsExcludingForceUsing == 3 ) ) ) { if ( AssertHandler::Failure( "( numStaticDepsExcludingForceUsing == 2 ) || ( numStaticDepsExcludingForceUsing == 3 )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 498 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
#line 499 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( staticDeps.GetSize() >= 2 ) ) { if ( AssertHandler::Failure( "staticDeps.GetSize() >= 2", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 500 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	Node * compiler = staticDeps[ 0 ].GetNode();
	Node * staticDepNode = staticDeps[ 1 ].GetNode();

	Node * precompiledHeader = nullptr;
	if ( numStaticDepsExcludingForceUsing == 3 )
	{
		precompiledHeader = staticDeps[ 2 ].GetNode();
	}

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	Node * on = ng.CreateObjectNode( name, staticDepNode, compiler, compilerArgs, compilerArgsDeoptimized, precompiledHeader, flags, compilerForceUsing, deoptimizeWritableFiles, deoptimizeWritableFilesWithToken );

	ObjectNode * objNode = on->CastTo< ObjectNode >();
	objNode->m_DynamicDependencies.Swap( dynamicDeps );
	objNode->m_ObjExtensionOverride = objExtensionOverride;

	return objNode;
}



 Node * ObjectNode::LoadRemote( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	AStackString<> sourceFile; if ( stream.Read( sourceFile ) == false ) { return nullptr; };
	uint32_t flags; if ( stream.Read( flags ) == false ) { return nullptr; };
	AStackString<> compilerArgs; if ( stream.Read( compilerArgs ) == false ) { return nullptr; };

	NodeProxy * srcFile = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 529 ) NodeProxy( sourceFile );

	return new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 531 ) ObjectNode( name, srcFile, compilerArgs, flags );
}



 uint32_t ObjectNode::DetermineFlags( const Node * compilerNode, const AString & args )
{
	uint32_t flags = 0;

	const AString & compiler = compilerNode->GetName();
	const bool isDistributableCompiler = ( compilerNode->GetType() == Node::COMPILER_NODE ) && 
										 ( compilerNode->CastTo< CompilerNode >()->CanBeDistributed() );

	
	if ( compiler.EndsWithI( "\\cl.exe" ) ||
		 compiler.EndsWithI( "\\cl" ) )
	{
		flags |= ObjectNode::FLAG_MSVC;
	}
	else if ( compiler.EndsWithI( "clang++.exe" ) ||
			  compiler.EndsWithI( "clang++" ) ||
			  compiler.EndsWithI( "clang.exe" ) ||
			  compiler.EndsWithI( "clang" ) ||
			  compiler.EndsWithI( "clang-cl.exe" ) ||
			  compiler.EndsWithI( "clang-cl" ) )
	{
		flags |= ObjectNode::FLAG_CLANG;
	}
	else if ( compiler.EndsWithI( "gcc.exe" ) || 
			  compiler.EndsWithI( "gcc" ) ||
			  compiler.EndsWithI( "g++.exe" ) ||
			  compiler.EndsWithI( "g++" ) )
	{
		flags |= ObjectNode::FLAG_GCC;
	}
	else if ( compiler.EndsWithI( "\\ps3ppusnc.exe" ) ||
			  compiler.EndsWithI( "\\ps3ppusnc" ) )
	{
		flags |= ObjectNode::FLAG_SNC;
	}
	else if ( compiler.EndsWithI( "\\mwcceppc.exe" ) ||
			  compiler.EndsWithI( "\\mwcceppc" ) )
	{
		flags |= ObjectNode::CODEWARRIOR_WII;
	}
	else if ( compiler.EndsWithI( "\\cxppc.exe" ) ||
			  compiler.EndsWithI( "\\cxppc" ) ||
			  compiler.EndsWithI( "\\ccppc.exe" ) ||
			  compiler.EndsWithI( "\\ccppc" ) )
	{
		flags |= ObjectNode::GREENHILLS_WIIU;
	}
	else if ( compiler.EndsWithI( "\\nvcc.exe" ) ||
			  compiler.EndsWithI( "\\nvcc" ) )
	{
		flags |= ObjectNode::FLAG_CUDA_NVCC;
	}

	
	if ( flags & ObjectNode::FLAG_MSVC )
	{
		bool usingCLR = false;
		bool usingWinRT = false;

		Array< AString > tokens;
		args.Tokenize( tokens );
		const AString * const end = tokens.End();
		for ( const AString * it = tokens.Begin(); it != end; ++it )
		{
			const AString & token = *it;

			if ( ( token == "/Zi" ) || ( token == "/ZI" ) )
			{
				flags |= ObjectNode::FLAG_USING_PDB;
			}
			else if ( token == "/clr" )
			{
				usingCLR = true;
				flags |= ObjectNode::FLAG_USING_CLR;
			}
			else if ( token == "/ZW" )
			{
				usingWinRT = true;
			}
			else if ( token.BeginsWith( "/Yu" ) )
			{
				flags |= ObjectNode::FLAG_USING_PCH;
			}
			else if ( token.BeginsWith( "/Yc" ) )
			{
				flags |= ObjectNode::FLAG_CREATING_PCH;
			}
		}

		
		
		
		
		if ( !usingWinRT && !usingCLR && !( flags & ObjectNode::FLAG_CREATING_PCH ) )
		{
			if ( isDistributableCompiler )
			{
				flags |= ObjectNode::FLAG_CAN_BE_DISTRIBUTED;
			}

			
			if ( ( flags & ObjectNode::FLAG_USING_PDB ) == 0 )
			{
				flags |= ObjectNode::FLAG_CAN_BE_CACHED;
			}
		}
	}

	
	if ( flags & ObjectNode::FLAG_CLANG )
	{
		Array< AString > tokens;
		args.Tokenize( tokens );
		const AString * const end = tokens.End();
		for ( const AString * it = tokens.Begin(); it != end; ++it )
		{
			const AString & token = *it;
			if ( token == "-emit-pch" )
			{
				flags |= ObjectNode::FLAG_CREATING_PCH;
			}
			if ( token == "-x" )
			{
				++it;
				if ( it != tokens.End() )
				{
					if ( ( *it == "c++-header" ) || ( *it == "c-header" ) )
					{
						flags |= ObjectNode::FLAG_CREATING_PCH;
					}
				}
			}
			else if ( token == "-include-pch" )
			{
				flags |= ObjectNode::FLAG_USING_PCH;
			}
		}
	}

	
	if ( flags & ( ObjectNode::FLAG_CLANG | ObjectNode::FLAG_GCC | ObjectNode::FLAG_SNC | ObjectNode::CODEWARRIOR_WII | ObjectNode::GREENHILLS_WIIU ) )
	{
		
		if ( !( flags & ObjectNode::FLAG_CREATING_PCH ) )
		{
			if ( isDistributableCompiler )
			{
				flags |= ObjectNode::FLAG_CAN_BE_DISTRIBUTED;
			}
		}

		
		flags |= ObjectNode::FLAG_CAN_BE_CACHED;
	}

	
	if ( flags & ObjectNode::FLAG_CUDA_NVCC )
	{
		
		flags |= ObjectNode::FLAG_CAN_BE_CACHED;
	}

	return flags;
}



 void ObjectNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	m_StaticDependencies.Save( stream );;
	m_DynamicDependencies.Save( stream );;
	stream.Write( m_Flags );;
	stream.Write( m_CompilerArgs );;
	stream.Write( m_CompilerArgsDeoptimized );;
	stream.Write( m_ObjExtensionOverride );;
	m_CompilerForceUsing.Save( stream );;
	stream.Write( m_DeoptimizeWritableFiles );;
	stream.Write( m_DeoptimizeWritableFilesWithToken );;
}



 void ObjectNode::SaveRemote( IOStream & stream ) const
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_CompilerForceUsing.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_CompilerForceUsing.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 722 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	stream.Write( m_Name );;
	stream.Write( GetSourceFile()->GetName() );;
	stream.Write( m_Flags );;

	
	
	const bool useDeoptimization = ShouldUseDeoptimization();
	if ( useDeoptimization )
	{
		stream.Write( m_CompilerArgsDeoptimized );;
	}
	else
	{
		stream.Write( m_CompilerArgs );;
	}
}



void ObjectNode::GetPDBName( AString & pdbName ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( IsUsingPDB() ) ) { if ( AssertHandler::Failure( "IsUsingPDB()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 746 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	pdbName = m_Name;
	pdbName += ".pdb";
}



 Node::Priority ObjectNode::GetPriority() const
{
	return IsCreatingPCH() ? Node::PRIORITY_HIGH : Node::PRIORITY_NORMAL;
}



const char * ObjectNode::GetObjExtension() const
{
	if ( m_ObjExtensionOverride.IsEmpty() )
	{
		return ".obj";
	}
	return m_ObjExtensionOverride.Get();
}



 void ObjectNode::DumpOutput( Job * job, const char * data, uint32_t dataSize, const AString & name, bool treatAsWarnings )
{
	if ( ( data != nullptr ) && ( dataSize > 0 ) )
	{
		Array< AString > exclusions( 2, false );
		exclusions.Append( AString( "Note: including file:" ) );
		exclusions.Append( AString( "#line" ) );

		AStackString<> msg;
		msg.Format( "%s: %s\n", treatAsWarnings ? "WARNING" : "PROBLEM", name.Get() );

		AutoPtr< char > mem( (char *)Alloc( dataSize + msg.GetLength() ) );
		memcpy( mem.Get(), msg.Get(), msg.GetLength() );
		memcpy( mem.Get() + msg.GetLength(), data, dataSize );

		Node::DumpOutput( job, mem.Get(), dataSize + msg.GetLength(), &exclusions );
	}
}



const AString & ObjectNode::GetCacheName( Job * job ) const
{
	
	if ( job->GetCacheName().IsEmpty() == false )
	{
		return job->GetCacheName();
	}

	Timer t;

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetData() ) ) { if ( AssertHandler::Failure( "job->GetData()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 803 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	uint64_t a1, a2;
	a1 = Murmur3::Calc128( job->GetData(), job->GetDataSize(), a2 );
	uint64_t a = a1 ^ a2; 

	
	
	uint32_t b = Murmur3::Calc32( m_CompilerArgs.Get(), m_CompilerArgs.GetLength() );

	
	uint64_t c = GetCompiler()->CastTo< CompilerNode >()->GetManifest().GetToolId();

	AStackString<> cacheName;
	FBuild::Get().GetCacheFileName( a, b, c, cacheName );
	job->SetCacheName(cacheName);

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Cache hash: %u ms - %u kb '%s'\n",uint32_t( t.GetElapsedMS() ), uint32_t( job->GetDataSize() / (1024) ), cacheName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 823 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"
	return job->GetCacheName();
}



bool ObjectNode::RetrieveFromCache( Job * job )
{
	if ( FBuild::Get().GetOptions().m_UseCacheRead == false )
	{
		return false;
	}

	const AString & cacheFileName = GetCacheName(job);

	Timer t;

	ICache * cache = FBuild::Get().GetCache();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cache ) ) { if ( AssertHandler::Failure( "cache", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 840 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( cache )
	{
		void * cacheData( nullptr );
		size_t cacheDataSize( 0 );
		if ( cache->Retrieve( cacheFileName, cacheData, cacheDataSize ) )
		{
			
			Compressor c;
			if ( c.IsValidData( cacheData, cacheDataSize ) == false )
			{
				do { FLog::Warning( "Cache returned invalid data for '%s'",m_Name.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}
			c.Decompress( cacheData );
			const void * data = c.GetResult();
			const size_t dataSize = c.GetResultSize();

			FileStream objFile;
			if ( !objFile.Open( m_Name.Get(), FileStream::WRITE_ONLY ) )
			{
				cache->FreeMemory( cacheData, cacheDataSize );
				do { FLog::Error( "Failed to open local file during cache retrieval '%s'",m_Name.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}

			if ( objFile.Write( data, dataSize ) != dataSize )
			{
				cache->FreeMemory( cacheData, cacheDataSize );
				do { FLog::Error( "Failed to write to local file during cache retrieval '%s'",m_Name.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}

			cache->FreeMemory( cacheData, cacheDataSize );

			
			
				SYSTEMTIME st;
				FILETIME ft;
				GetSystemTime( &st );
				if ( 0 == SystemTimeToFileTime( &st, &ft ) )
				{
					do { FLog::Error( "Failed to convert file time after cache hit '%s' (%u)",m_Name.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					return false;
				}
				uint64_t fileTimeNow = ( (uint64_t)ft.dwLowDateTime | ( (uint64_t)ft.dwHighDateTime << 32 ) );
                const bool timeSetOK = objFile.SetLastWriteTime( fileTimeNow );
			

#line 890 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"
	
			
            if ( timeSetOK == false )
			{
				do { FLog::Error( "Failed to set timestamp on file after cache hit '%s' (%u)",m_Name.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}

			objFile.Close();

			FileIO::WorkAroundForWindowsFilePermissionProblem( m_Name );

			
			
			m_Stamp = FileIO::GetFileLastWriteTime( m_Name );

			do { if ( FLog::ShowInfo() ) { FLog::Info( "Cache hit: %u ms '%s'\n",uint32_t( t.GetElapsedMS() ), cacheFileName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			do { FLog::Build( "Obj: %s <CACHE>\n",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			SetStatFlag( Node::STATS_CACHE_HIT );
			return true;
		}
	}

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Cache miss: %u ms '%s'\n",uint32_t( t.GetElapsedMS() ), cacheFileName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	SetStatFlag( Node::STATS_CACHE_MISS );
	return false;
}



void ObjectNode::WriteToCache( Job * job )
{
	if (FBuild::Get().GetOptions().m_UseCacheWrite == false)
	{
		return;
	}

	const AString & cacheFileName = GetCacheName(job);
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !cacheFileName.IsEmpty() ) ) { if ( AssertHandler::Failure( "!cacheFileName.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 928 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	Timer t;

	ICache * cache = FBuild::Get().GetCache();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cache ) ) { if ( AssertHandler::Failure( "cache", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 933 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( cache )
	{
		
		FileStream objFile;
		if ( objFile.Open( m_Name.Get(), FileStream::READ_ONLY ) )
		{
			
			const size_t objFileSize = (size_t)objFile.GetFileSize();
			AutoPtr< char > mem( (char *)::AllocFileLine( objFileSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 942 ) );
			if ( objFile.Read( mem.Get(), objFileSize ) == objFileSize )
			{
				
				Compressor c;
				c.Compress( mem.Get(), objFileSize );
				const void * data = c.GetResult();
				const size_t dataSize = c.GetResultSize();

				if ( cache->Publish( cacheFileName, data, dataSize ) )
				{
					
					do { if ( FLog::ShowInfo() ) { FLog::Info( "Cache store: %u ms '%s'\n",uint32_t( t.GetElapsedMS() ), cacheFileName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					SetStatFlag( Node::STATS_CACHE_STORE );
					return;
				}
			}
		}
	}

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Cache store fail: %u ms '%s'\n",uint32_t( t.GetElapsedMS() ), cacheFileName.Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



void ObjectNode::EmitCompilationMessage( const AString & fullArgs, bool useDeoptimization, bool stealingRemoteJob, bool racingRemoteJob ) const
{
	
	
	
	AStackString<> output;
	output += "Obj: ";
	if ( useDeoptimization )
	{
		output += "**Deoptimized** ";
	}
	output += GetName();
	if ( racingRemoteJob )
	{
		output += " <LOCAL RACE>";
	}
	else if ( stealingRemoteJob )
	{
		output += " <LOCAL>";
	}
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += GetCompiler()->GetName();
		output += ' ';
		output += fullArgs;
		output += '\n';
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



 bool ObjectNode::StripTokenWithArg( const char * tokenToCheckFor, const AString & token, size_t & index )
{
	if ( token.BeginsWith( tokenToCheckFor ) )
	{
		if ( token == tokenToCheckFor )
		{
			++index; 
		}
		return true; 
	}
	return false; 
}



 bool ObjectNode::StripToken( const char * tokenToCheckFor, const AString & token, bool allowStartsWith )
{
	if ( allowStartsWith )
	{
		return token.BeginsWith( tokenToCheckFor );
	}
	else
	{
		return ( token == tokenToCheckFor );
	}
}



void ObjectNode::BuildFullArgs( const Job * job, AString & fullArgs, Pass pass, bool useDeoptimization ) const
{
	Array< AString > tokens( 1024, true );
	if ( useDeoptimization )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_CompilerArgsDeoptimized.IsEmpty() ) ) { if ( AssertHandler::Failure( "!m_CompilerArgsDeoptimized.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1034 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		m_CompilerArgsDeoptimized.Tokenize( tokens );
	}
	else
	{
		m_CompilerArgs.Tokenize( tokens );
	}
	fullArgs.Clear();

	const size_t numTokens = tokens.GetSize();
	for ( size_t i = 0; i < numTokens; ++i )
	{
		
		const AString & token = tokens[ i ];

		
		if ( pass == PASS_PREPROCESSOR_ONLY )
		{
			if ( GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU ) || GetFlag( FLAG_CUDA_NVCC ) )
			{
				if ( StripTokenWithArg( "-o", token, i ) )
				{
					continue;
				}

				if ( StripToken( "-c", token ) )
				{
					continue; 
				}
			}
		}

		if ( GetFlag( FLAG_CLANG ) )
		{
			
			
			
			if ( pass != PASS_COMPILE )
			{				
				if ( StripTokenWithArg( "-include-pch", token, i ) )
				{
					continue; 
				}
			}
		}

		if ( GetFlag( FLAG_MSVC ) )
		{
			if ( pass == PASS_COMPILE_PREPROCESSED )
			{
				
				
				if ( StripTokenWithArg( "/Yu", token, i ) )
				{
					continue; 
				}
				if ( StripTokenWithArg( "/Fp", token, i ) )
				{
					continue; 
				}

				
				if ( job->IsLocal() == false )
				{
					if ( StripTokenWithArg( "/Fd", token, i ) )
					{
						continue; 
					}
				}
			}
		}

		if ( GetFlag( FLAG_MSVC ) )
		{
			
			if ( StripToken( "/MP", token, true ) ) 
			{
				continue;
			}
		}

		
		if ( pass == PASS_COMPILE_PREPROCESSED ) 
		{
			if ( GetFlag( FLAG_CLANG ) )
			{
				
				
				if ( StripTokenWithArg( "-I", token, i ) )
				{
					continue; 
				}
			}
			if ( GetFlag( FLAG_MSVC ) )
			{
				
				

				
				if ( StripTokenWithArg( "/FI", token, i ) )
				{
					continue; 
				}
			}
		}

		
		const char * found = token.Find( "%1" );
		if ( found )
		{
			fullArgs += AStackString<>( token.Get(), found );
			fullArgs += GetSourceFile()->GetName();
			fullArgs += AStackString<>( found + 2, token.GetEnd() );
			fullArgs += ' ';
			continue;
		}

		
		found = token.Find( "%2" );
		if ( found )
		{
			fullArgs += AStackString<>( token.Get(), found );
			fullArgs += m_Name;
			fullArgs += AStackString<>( found + 2, token.GetEnd() );
			fullArgs += ' ';
			continue;
		}

		
		if ( GetFlag( FLAG_MSVC ) )
		{
			found = token.Find( "%3" );
			if ( found )
			{
				
				fullArgs += AStackString<>( token.Get(), found );
				fullArgs += m_Name;
				fullArgs += GetObjExtension(); 
				fullArgs += AStackString<>( found + 2, token.GetEnd() );
				fullArgs += ' ';
				continue;
			}
		}

		
		if ( GetFlag( FLAG_MSVC ) )
		{
			found = token.Find( "%4" );
			if ( found )
			{
				AStackString<> pre( token.Get(), found );
				AStackString<> post( found + 2, token.GetEnd() );
				ExpandTokenList( m_CompilerForceUsing, fullArgs, pre, post );
				fullArgs += ' ';
				continue;
			}
		}
				
		
		fullArgs += token;
		fullArgs += ' ';
	}

	if ( pass == PASS_PREPROCESSOR_ONLY )
	{
		if ( GetFlag( FLAG_MSVC ) )
		{
			fullArgs += "/E"; 
		}
		else
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU ) || GetFlag( FLAG_CUDA_NVCC ) ) ) { if ( AssertHandler::Failure( "GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU ) || GetFlag( FLAG_CUDA_NVCC )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1205 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			fullArgs += "-E"; 
		}
	}

	
	if ( ( job->IsLocal() == false ) &&
		 ( job->GetNode()->CastTo< ObjectNode >()->IsUsingPDB() ) )
	{
		AStackString<> pdbName, tmp;
		GetPDBName( pdbName );
		tmp.Format( " /Fd\"%s\"", pdbName.Get() );
		fullArgs += tmp;
	}
}



void ObjectNode::ExpandTokenList( const Dependencies & nodes, AString & fullArgs, const AString & pre, const AString & post ) const
{
	const Dependency * const end = nodes.End();
	for ( const Dependency * it = nodes.Begin(); it != end; ++it )
	{
		Node * n = it->GetNode();

		fullArgs += pre;
		fullArgs += n->GetName();
		fullArgs += post;
		fullArgs += ' ';
	}
}



bool ObjectNode::BuildPreprocessedOutput( const AString & fullArgs, Job * job, bool useDeoptimization ) const
{
	EmitCompilationMessage( fullArgs, useDeoptimization );

	
	CompileHelper ch( false ); 
    
        const bool useResponseFile = GetFlag( FLAG_MSVC ) || GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU );
    

#line 1250 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"
	if ( !ch.SpawnCompiler( job, GetName(), GetCompiler()->GetName(), fullArgs, useResponseFile ) )
	{
		
		
		
		if ( ch.GetResult() != 0 )
		{
			DumpOutput( job, ch.GetErr().Get(), ch.GetErrSize(), GetName() );
		}

		return false; 
	}

	
	char * memCopy = (char *)::AllocFileLine( ch.GetOutSize() + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1264 ); 
	memcpy( memCopy, ch.GetOut().Get(), ch.GetOutSize() );
	memCopy[ ch.GetOutSize() ] = 0; 

	job->OwnData( memCopy, ch.GetOutSize() );

	return true;
}



bool ObjectNode::WriteTmpFile( Job * job, AString & tmpFileName ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetData() && job->GetDataSize() ) ) { if ( AssertHandler::Failure( "job->GetData() && job->GetDataSize()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1277 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	Node * sourceFile = GetSourceFile();

	FileStream tmpFile;
	AStackString<> fileName( sourceFile->GetName().FindLast( ( '\\' ) ) + 1 );

	
    
	
	if ( GetFlag( FLAG_GCC ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU ) )
	{
		
		
		
		
		const char * tmpFileExt = fileName.FindLast( '.' ); 
		tmpFileExt = tmpFileExt ? ( tmpFileExt + 1 ) : fileName.Get();
		tmpFileExt = ( strcmp( tmpFileExt, "c" ) == 0 ) ? "i" : "ii";
	}

	void const * dataToWrite = job->GetData();
	size_t dataToWriteSize = job->GetDataSize();

	
	Compressor c; 
	if ( job->IsDataCompressed() )
	{
		c.Decompress( dataToWrite );
		dataToWrite = c.GetResult();
		dataToWriteSize = c.GetResultSize();
	}

	WorkerThread::CreateTempFilePath( fileName.Get(), tmpFileName );
	if ( WorkerThread::CreateTempFile( tmpFileName, tmpFile ) == false ) 
	{
		job->Error( "Failed to create temp file '%s' to build '%s' (error %u)", tmpFileName.Get(), GetName().Get(), Env::GetLastErr );
		job->OnSystemError();
		return NODE_RESULT_FAILED;
	}
	if ( tmpFile.Write( dataToWrite, dataToWriteSize ) != dataToWriteSize )
	{
		job->Error( "Failed to write to temp file '%s' to build '%s' (error %u)", tmpFileName.Get(), GetName().Get(), Env::GetLastErr );
		job->OnSystemError();
		return NODE_RESULT_FAILED;
	}
	tmpFile.Close();

	FileIO::WorkAroundForWindowsFilePermissionProblem( tmpFileName );

	return true;
}



bool ObjectNode::BuildFinalOutput( Job * job, const AString & fullArgs ) const
{
	
	AStackString<> compiler;
	AStackString<> workingDir;
	if ( job->IsLocal() )
	{
		compiler = GetCompiler()->GetName();
	}
	else
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetToolManifest() ) ) { if ( AssertHandler::Failure( "job->GetToolManifest()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1343 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		job->GetToolManifest()->GetRemoteFilePath( 0, compiler );
		job->GetToolManifest()->GetRemotePath( workingDir ); 
	}

	
	CompileHelper ch;
    
        const bool useResponseFile = GetFlag( FLAG_MSVC ) || GetFlag( FLAG_GCC ) || GetFlag( FLAG_SNC ) || GetFlag( FLAG_CLANG ) || GetFlag( CODEWARRIOR_WII ) || GetFlag( GREENHILLS_WIIU );
    

#line 1355 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"
	if ( !ch.SpawnCompiler( job, GetName(), compiler, fullArgs, useResponseFile, workingDir.IsEmpty() ? nullptr : workingDir.Get() ) )
	{
		
		if ( ch.GetResult() != 0 )
		{
			

			
			if ( job->IsLocal() == false )
			{
				AutoPtr< char > mem( (char *)::AllocFileLine( ch.GetOutSize() + ch.GetErrSize(), "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1365 ) );
				memcpy( mem.Get(), ch.GetOut().Get(), ch.GetOutSize() );
				memcpy( mem.Get() + ch.GetOutSize(), ch.GetErr().Get(), ch.GetErrSize() );
				job->OwnData( mem.Release(), ( ch.GetOutSize() + ch.GetErrSize() ) );
			}
		}

		return false; 
	}

	return true;
}



ObjectNode::CompileHelper::CompileHelper( bool handleOutput )
	: m_HandleOutput( handleOutput )
	, m_OutSize( 0 )
	, m_ErrSize( 0 )
	, m_Result( 0 )
{
}



ObjectNode::CompileHelper::~CompileHelper()
{
}



bool ObjectNode::CompileHelper::SpawnCompiler( Job * job,
											   const AString & name, 
											   const AString & compiler,
											   const AString & fullArgs,
											   bool useResponseFile,
											   const char * workingDir )
{
	
	ResponseFile rf;
	AStackString<> responseFileArgs;
	if ( useResponseFile )
	{
		
		if ( !rf.Create( fullArgs ) )
		{
			return false; 
		}

		
		responseFileArgs.Format( "@\"%s\"", rf.GetResponseFilePath().Get() );
	}
	
	const char * environmentString = ( FBuild::IsValid() ? FBuild::Get().GetEnvironmentString() : nullptr );
	if ( ( job->IsLocal() == false ) && ( job->GetToolManifest() ) )
	{
		environmentString = job->GetToolManifest()->GetRemoteEnvironmentString();
	}

	
	if ( false == m_Process.Spawn( compiler.Get(), 
								   useResponseFile ? responseFileArgs.Get() : fullArgs.Get(),
								   workingDir,
								   environmentString ) )
	{
		job->Error( "Failed to spawn process (error 0x%x) to build '%s'\n", Env::GetLastErr(), name.Get() );
		job->OnSystemError();
		return false;
	}

	
	m_Process.ReadAllData( m_Out, &m_OutSize, m_Err, &m_ErrSize );

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_Process.IsRunning() ) ) { if ( AssertHandler::Failure( "!m_Process.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp", 1439 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_Result = m_Process.WaitForExit();

	
	HandleSystemFailures( job, m_Result, m_Out.Get(), m_Err.Get() );

	
	if ( m_HandleOutput && m_Err.Get() )
	{ 
        const bool treatAsWarnings = true; 
		DumpOutput( job, m_Err.Get(), m_ErrSize, name, treatAsWarnings );
	}

	
	if ( m_Result != 0 )
	{
		
		if ( m_HandleOutput )
		{
			DumpOutput( job, m_Out.Get(), m_OutSize, name );
		}

		job->Error( "Failed to build Object (error 0x%x) '%s'\n", m_Result, name.Get() );

		return false;
	}

	return true;
}



 void ObjectNode::HandleSystemFailures( Job * job, int result, const char * stdOut, const char * stdErr )
{
	
	if ( job->IsLocal() )
	{
		return;
	}

	
	if ( result == 0 )
	{
		return;
	}

	
		
		if ( result == ((DWORD )0x40010004L) )
		{
			job->OnSystemError(); 
			return;
		}

		
		if ( result == 0xC000007B ) 
		{
			job->Error( "Remote failure: STATUS_INVALID_IMAGE_FORMAT (0xC000007B) - Check Compiler() settings!\n" );
			return;
		}

		const ObjectNode * objectNode = job->GetNode()->CastTo< ObjectNode >();

		
		if ( objectNode->IsMSVC() )
		{
			
			if ( result == 2L ) 
			{
				
				
				
				if ( stdOut )
				{
					if ( strstr( stdOut, "C1082" ) ||
						 strstr( stdOut, "C1088" ) )
					{
						job->OnSystemError();
						return;
					}
				}

				
				
				
				
				if ( stdOut && strstr( stdOut, "No space left on device" ) )
				{
					job->OnSystemError();
					return;
				}
			}
		}

		
		if ( objectNode->GetFlag( ObjectNode::FLAG_CLANG ) )
		{
			
			if ( result == 0x01 )
			{
				
				if ( stdErr && ( strcmp( stdErr, "IO failure on output stream" ) ) )
				{
					job->OnSystemError();
					return;
				}
			}
		}

		
		if ( objectNode->GetFlag( ObjectNode::FLAG_GCC ) )
		{
			
			if ( result == 0x01 )
			{
				
				if ( stdErr && ( strcmp( stdErr, "No space left on device" ) ) )
				{
					job->OnSystemError();
					return;
				}
			}
		}
	


#line 1566 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\ObjectNode.cpp"
}



bool ObjectNode::ShouldUseDeoptimization() const
{
	if ( GetFlag( FLAG_UNITY ) )
	{
		return false; 
	}

	if ( ( m_DeoptimizeWritableFilesWithToken == false ) &&
		 ( m_DeoptimizeWritableFiles == false ) )
	{
		return false; 
	}

	if ( FileIO::GetReadOnly( GetSourceFile()->GetName() ) )
	{
		return false; 
	}

	if ( m_DeoptimizeWritableFiles )
	{
		return true; 
	}

	
	FileStream fs;
	if ( fs.Open( GetSourceFile()->GetName().Get(), FileStream::READ_ONLY ) )
	{
		const size_t bytesToRead = Math::Min< size_t >( 1024, (size_t)fs.GetFileSize() );
		char buffer[ 1025 ];
		if ( fs.Read( buffer, bytesToRead ) == bytesToRead )
		{
			buffer[ bytesToRead ] = 0;
			if ( strstr( buffer, "FASTBUILD_DEOPTIMIZE_OBJECT" ) )
			{
				return true;
			}
			return false; 
		}
	}

	
	return false;
}



bool ObjectNode::ShouldUseCache() const
{
	bool useCache = GetFlag( FLAG_CAN_BE_CACHED ) &&
					( FBuild::Get().GetOptions().m_UseCacheRead ||
					 FBuild::Get().GetOptions().m_UseCacheWrite );
	if ( GetFlag( FLAG_ISOLATED_FROM_UNITY ) )
	{
		
		useCache = false;
	}
	return useCache;
}



#line 133 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/TestNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp"















TestNode::TestNode( const AString & testOutput,
					FileNode * testExecutable,
					const AString & arguments,
					const AString & workingDir )
	: FileNode( testOutput, Node::FLAG_NO_DELETE_ON_FAIL ) 
	, m_Executable( testExecutable )
	, m_Arguments( arguments )
	, m_WorkingDir( workingDir )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( testExecutable ) ) { if ( AssertHandler::Failure( "testExecutable", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp", 31 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( Dependency( testExecutable ) );
	m_Type = TEST_NODE;
}



TestNode::~TestNode()
{
}



 Node::BuildResult TestNode::DoBuild( Job * job )
{
	
	const char * workingDir = m_WorkingDir.IsEmpty() ? nullptr : m_WorkingDir.Get();

	EmitCompilationMessage( workingDir );

	
	Process p;
	bool spawnOK = p.Spawn( m_Executable->GetName().Get(),
							m_Arguments.Get(),
							workingDir,
							FBuild::Get().GetEnvironmentString() );

	if ( !spawnOK )
	{
		do { FLog::Error( "Failed to spawn process for '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	AutoPtr< char > memOut;
	AutoPtr< char > memErr;
	uint32_t memOutSize = 0;
	uint32_t memErrSize = 0;
	p.ReadAllData( memOut, &memOutSize, memErr, &memErrSize );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !p.IsRunning() ) ) { if ( AssertHandler::Failure( "!p.IsRunning()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp", 71 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	
	int result = p.WaitForExit();
	if ( result != 0 )
	{
		
		Node::DumpOutput( job, memOut.Get(), memOutSize );
		Node::DumpOutput( job, memErr.Get(), memErrSize );
	}

	
	FileStream fs;
	if ( fs.Open( GetName().Get(), FileStream::WRITE_ONLY ) == false )
	{
		do { FLog::Error( "Failed to open test output file '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}
	if ( ( memOut.Get() && ( fs.Write( memOut.Get(), memOutSize ) != memOutSize ) ) ||
		 ( memErr.Get() && ( fs.Write( memErr.Get(), memErrSize ) != memErrSize ) ) )
	{
		do { FLog::Error( "Failed to write test output file '%s'",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}
	fs.Close();

	
	if ( result != 0 )
	{
		do { FLog::Error( "Test failed (error %i) '%s'",result, GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return NODE_RESULT_FAILED;
	}

	
	
	m_Stamp = FileIO::GetFileLastWriteTime( m_Name );
	return NODE_RESULT_OK;
}



void TestNode::EmitCompilationMessage( const char * workingDir ) const
{
	AStackString<> output;
	output += "Running Test: ";
	output += GetName();
	output += '\n';
	if ( FLog::ShowInfo() || FBuild::Get().GetOptions().m_ShowCommandLines )
	{
		output += m_Executable->GetName();
		output += ' ';
		output += m_Arguments;
		output += '\n';
		if ( workingDir )
		{
			output += "Working Dir: ";
			output += workingDir;
			output += '\n';
		}
	}
	do { FLog::Build( "%s",output.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}



 void TestNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	stream.Write( m_Executable->GetName() );;
	stream.Write( m_Arguments );;
	stream.Write( m_WorkingDir );;
}



 Node * TestNode::Load( IOStream & stream )
{
	AStackString<> fileName; if ( stream.Read( fileName ) == false ) { return nullptr; };
	AStackString<> executable; if ( stream.Read( executable ) == false ) { return nullptr; };
	AStackString<> arguments; if ( stream.Read( arguments ) == false ) { return nullptr; };
	AStackString<> workingDir; if ( stream.Read( workingDir ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();

	Node * execNode = ng.FindNode( executable );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( execNode ) ) { if ( AssertHandler::Failure( "execNode", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp", 155 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( execNode->IsAFile() ) ) { if ( AssertHandler::Failure( "execNode->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp", 156 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	TestNode * n = ng.CreateTestNode( fileName, 
									  (FileNode *)execNode,
									  arguments,
									  workingDir );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( n ) ) { if ( AssertHandler::Failure( "n", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\TestNode.cpp", 162 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return n;
}


#line 136 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/UnityNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp"



















const ReflectionInfo * UnityNode::GetReflectionInfoV() const { return UnityNode::GetReflectionInfoS(); } class Node_ReflectionInfo; extern Node_ReflectionInfo g_Node_ReflectionInfo; class UnityNode_ReflectionInfo; extern UnityNode_ReflectionInfo g_UnityNode_ReflectionInfo; const ReflectionInfo * UnityNode::s_ReflectionInfo( nullptr ); const ReflectionInfo * UnityNode::GetReflectionInfoS() { return reinterpret_cast< const ReflectionInfo * >( &g_UnityNode_ReflectionInfo ); } class UnityNode_ReflectionInfo : public ReflectionInfo { public: typedef UnityNode objectType; explicit UnityNode_ReflectionInfo() { SetTypeName( "UnityNode" ); UnityNode::s_ReflectionInfo = this; AddProperties(); m_StructSize = 0; m_IsAbstract = false; m_SuperClass = reinterpret_cast< const ReflectionInfo * >( &g_Node_ReflectionInfo ); AddMetaData( MetaNone() ); } virtual ~UnityNode_ReflectionInfo() { UnityNode::s_ReflectionInfo = nullptr; } virtual void * Create() const override { return new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp", 26 ) UnityNode; } void AddProperties() { UnityNode * c = nullptr; Node * b = static_cast< Node * >( c ); (void)b;
	AddPropertyArray( &((objectType *)0)->m_InputPaths, "UnityInputPath" ); AddPropertyMetaData( MetaOptional() + MetaPath() );
	AddPropertyArray( &((objectType *)0)->m_PathsToExclude, "UnityInputExcludePath" ); AddPropertyMetaData( MetaOptional() + MetaPath() );
	AddProperty( &((objectType *)0)->m_InputPathRecurse, "UnityInputPathRecurse" ); AddPropertyMetaData( MetaOptional() );
	AddProperty( &((objectType *)0)->m_InputPattern, "UnityInputPattern" ); AddPropertyMetaData( MetaOptional() );
	AddPropertyArray( &((objectType *)0)->m_Files, "UnityInputFiles" ); AddPropertyMetaData( MetaOptional() + MetaFile() );
	AddPropertyArray( &((objectType *)0)->m_FilesToExclude, "UnityInputExcludedFiles" ); AddPropertyMetaData( MetaOptional() + MetaFile( true ) ); 
	AddPropertyArray( &((objectType *)0)->m_ExcludePatterns, "UnityInputExcludePattern" ); AddPropertyMetaData( MetaOptional() + MetaFile( true ) ); 
	AddProperty( &((objectType *)0)->m_OutputPath, "UnityOutputPath" ); AddPropertyMetaData( MetaPath() );
	AddProperty( &((objectType *)0)->m_OutputPattern, "UnityOutputPattern" ); AddPropertyMetaData( MetaOptional() );
	AddProperty( &((objectType *)0)->m_NumUnityFilesToCreate, "UnityNumFiles" ); AddPropertyMetaData( MetaOptional() + MetaRange( 1, 1048576 ) );
	AddProperty( &((objectType *)0)->m_MaxIsolatedFiles, "UnityInputIsolateWritableFilesLimit" ); AddPropertyMetaData( MetaOptional() + MetaRange( 0, 1048576 ) );
	AddProperty( &((objectType *)0)->m_IsolateWritableFiles, "UnityInputIsolateWritableFiles" ); AddPropertyMetaData( MetaOptional() );
	AddProperty( &((objectType *)0)->m_PrecompiledHeader, "UnityPCH" ); AddPropertyMetaData( MetaOptional() + MetaFile( true ) ); 
} }; UnityNode_ReflectionInfo g_UnityNode_ReflectionInfo; void UnityNode_ReflectionInfo_Bind() { ReflectionInfo::BindReflection( g_UnityNode_ReflectionInfo ); }



UnityNode::UnityNode()
: Node( AString::GetEmpty(), Node::UNITY_NODE, Node::FLAG_NONE )
, m_InputPattern( "*.cpp" )
, m_InputPathRecurse( true )
, m_Files( 0, true )
, m_OutputPath()
, m_OutputPattern( "Unity*.cpp" )
, m_NumUnityFilesToCreate( 1 )
, m_UnityFileNames( 0, true )
, m_PrecompiledHeader()
, m_PathsToExclude( 0, true )
, m_FilesToExclude( 0, true )
, m_IsolateWritableFiles( false )
, m_MaxIsolatedFiles( 0 )
, m_ExcludePatterns( 0, true )
, m_IsolatedFiles( 0, true )
{
	m_LastBuildTimeMs = 100; 
}



bool UnityNode::Initialize( const BFFIterator & iter, const Function * function )
{
	if ( m_PrecompiledHeader.IsEmpty() == false )
	{
		
		if ( m_PrecompiledHeader.EndsWithI( ".h" ) )
		{
			AStackString<> pchCPP( m_PrecompiledHeader.Get(), 
								   m_PrecompiledHeader.Get() + m_PrecompiledHeader.GetLength() - 2 );
			pchCPP += ".cpp";
			m_FilesToExclude.Append( pchCPP );
		}
	}

	Dependencies dirNodes( m_InputPaths.GetSize() );
	if ( !function->GetDirectoryListNodeList( iter, m_InputPaths, m_PathsToExclude, m_FilesToExclude, m_InputPathRecurse, m_InputPattern, "UnityInputPath", dirNodes ) )
	{
		return false; 
	}
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_StaticDependencies.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_StaticDependencies.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp", 85 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_StaticDependencies.Append( dirNodes );

	return true;
}



UnityNode::~UnityNode()
{
}



 Node::BuildResult UnityNode::DoBuild( Job *  )
{
	bool hasOutputMessage = false; 

	
	
	
	
	
	if ( EnsurePathExistsForFile( m_OutputPath ) == false )
	{
		return NODE_RESULT_FAILED;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_UnityFileNames.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_UnityFileNames.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp", 114 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_UnityFileNames.SetCapacity( m_NumUnityFilesToCreate );
	AStackString<> tmp;
	for ( size_t i=0; i< m_NumUnityFilesToCreate; ++i )
	{
		tmp.Format( "%u", i + 1 ); 

		AStackString<> unityFileName( m_OutputPath );
		unityFileName += m_OutputPattern;
		unityFileName.Replace( "*", tmp.Get() );

		m_UnityFileNames.Append( unityFileName );
	}

	
	Array< FileIO::FileInfo * > files( 4096, true );
	GetFiles( files );

    
    
	
	const size_t numFiles = files.GetSize();
	float numFilesPerUnity = (float)numFiles / m_NumUnityFilesToCreate;
	float remainingInThisUnity( 0.0 );

	uint32_t numFilesWritten( 0 );

	size_t index = 0;


	
	for ( size_t i=0; i<m_NumUnityFilesToCreate; ++i )
	{
		
		remainingInThisUnity += numFilesPerUnity;

		
		AStackString<4096> output( "// Auto-generated Unity file - do not modify\r\n\r\n" );
		
		
		if ( !m_PrecompiledHeader.IsEmpty() )
		{
			output += "#include \"";
			output += m_PrecompiledHeader;
			output += "\"\r\n\r\n";
		}

		
		

		
		Array< FileIO::FileInfo * > filesInThisUnity( 256, true );
		uint32_t numIsolated( 0 );
		const bool lastUnity = ( i == ( m_NumUnityFilesToCreate - 1 ) );
		while ( ( remainingInThisUnity > 0.0f ) || lastUnity )
		{
			remainingInThisUnity -= 1.0f; 

			
			if ( index >= numFiles )
			{
				break;
			}

			filesInThisUnity.Append( files[index ] );

			
			if ( m_IsolateWritableFiles )
			{
				
				if ( files[ index ]->IsReadOnly() == false )
				{
					numIsolated++;
				}
			}

			
			index++;
			numFilesWritten++;		
		}

		
		const FileIO::FileInfo * const * end = filesInThisUnity.End();
		for ( FileIO::FileInfo ** it = filesInThisUnity.Begin(); it != end; ++it )
		{
			const FileIO::FileInfo * file = *it;

			
			AStackString<> buffer( file->m_Name.Get() );
			buffer.Replace( ( '\\' ), ( '/' ) ); 
            

#line 207 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp"
			output += "#pragma message( \"";
			output += buffer;
			output += "\" )\r\n";

			
			if ( m_IsolateWritableFiles && ( ( m_MaxIsolatedFiles == 0 ) || ( numIsolated <= m_MaxIsolatedFiles ) ) )
			{
				
				if ( file->IsReadOnly() == false )
				{
					
					output += "//";
					m_IsolatedFiles.Append( file->m_Name );
				}
			}

			
			output += "#include \"";
			output += file->m_Name;
			output += "\"\r\n\r\n";
		}
		output += "\r\n";

		
		const AString & unityName = m_UnityFileNames[ i ];

		
		bool needToWrite = false;
		FileStream f;
		if ( FBuild::Get().GetOptions().m_ForceCleanBuild )
		{
			needToWrite = true; 
		}
		else
		{
			if ( f.Open( unityName.Get(), FileStream::READ_ONLY ) )
			{
				const size_t fileSize( (size_t)f.GetFileSize() );
				if ( output.GetLength() != fileSize )
				{
					
					needToWrite = true;
				}
				else
				{
					
					AutoPtr< char > mem( (char *)::AllocFileLine( fileSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp", 253 ) );
					if ( f.Read( mem.Get(), fileSize ) != fileSize )
					{
						
						needToWrite = true;
					}
					else
					{
						if ( AString::StrNCmp( mem.Get(), output.Get(), fileSize ) != 0 )
						{
							
							needToWrite = true;
						}
					}
				}
				f.Close();
			}
			else
			{
				
				needToWrite = true;
			}
		}

		
		if ( needToWrite )
		{
			if ( hasOutputMessage == false )
			{
				do { FLog::Build( "Uni: %s\n",GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				hasOutputMessage = true;
			}

			if ( f.Open( unityName.Get(), FileStream::WRITE_ONLY ) == false )
			{
				do { FLog::Error( "Failed to create Unity file '%s'",unityName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return NODE_RESULT_FAILED;
			}

			if ( f.Write( output.Get(), output.GetLength() ) != output.GetLength() )
			{
				do { FLog::Error( "Error writing Unity file '%s'",unityName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return NODE_RESULT_FAILED;
			}

			f.Close();
		}
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( numFilesWritten == numFiles ) ) { if ( AssertHandler::Failure( "numFilesWritten == numFiles", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\UnityNode.cpp", 303 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	return NODE_RESULT_OK;
}



 Node * UnityNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	UnityNode * un = ng.CreateUnityNode( name );

	if ( un->Deserialize( stream ) == false )
	{
		return nullptr;
	}

	return un;
}



 void UnityNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	Node::Serialize( stream );
}



void UnityNode::GetFiles( Array< FileIO::FileInfo * > & files )
{
	
	const Dependency * const sEnd = m_StaticDependencies.End();
	for ( const Dependency * sIt = m_StaticDependencies.Begin(); sIt != sEnd; ++sIt )
	{
		DirectoryListNode * dirNode = sIt->GetNode()->CastTo< DirectoryListNode >();
		const FileIO::FileInfo * const filesEnd = dirNode->GetFiles().End();

		
		for ( FileIO::FileInfo * filesIt = dirNode->GetFiles().Begin(); filesIt != filesEnd; ++filesIt )
		{
			bool keep = true;

			
			const AString * pit = m_ExcludePatterns.Begin();
			const AString * const pend = m_ExcludePatterns.End();
			for ( ; pit != pend; ++pit )
			{
				if ( PathUtils::IsWildcardMatch( pit->Get(), filesIt->m_Name.Get() ) )
				{
					keep = false;
					break;
				}
			}

			if ( keep )
			{
				files.Append( filesIt );
			}
		}
	}

	
	size_t numFiles = m_Files.GetSize();
	if ( numFiles )
	{
		
		
		m_FilesInfo.SetSize( numFiles );
		for ( size_t i=0; i<numFiles; ++i )
		{
			
			
			if ( FileIO::GetFileInfo( m_Files[ i ], m_FilesInfo[ i ] ) )
			{
				
				files.Append( &m_FilesInfo[ i ] );
			}
		}
	}
}


#line 139 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Graph/VCXProjectNode.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\VCXProjectNode.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\VCXProjectNode.cpp"






















VCXProjectNode::VCXProjectNode( const AString & projectOutput,
								const Array< AString > & projectBasePaths,
								const Dependencies & paths,
								const Array< AString > & pathsToExclude,
								const Array< AString > & allowedFileExtensions,
								const Array< AString > & files,
								const Array< AString > & filesToExclude,
								const AString & rootNamespace,
								const AString & projectGuid,
								const AString & defaultLanguage,
								const AString & applicationEnvironment,
								const Array< VSProjectConfig > & configs,
								const Array< VSProjectFileType > & fileTypes,
							    const Array< AString > & references,
								const Array< AString > & projectReferences )
: FileNode( projectOutput, Node::FLAG_NONE )
, m_ProjectBasePaths( projectBasePaths )
, m_PathsToExclude( pathsToExclude )
, m_AllowedFileExtensions( allowedFileExtensions )
, m_Files( files )
, m_FilesToExclude( filesToExclude )
, m_RootNamespace( rootNamespace )
, m_ProjectGuid( projectGuid )
, m_DefaultLanguage( defaultLanguage )
, m_ApplicationEnvironment( applicationEnvironment )
, m_Configs( configs )
, m_FileTypes( fileTypes )
, m_References( references )
, m_ProjectReferences( projectReferences )
{
	m_LastBuildTimeMs = 100; 
	m_Type = Node::VCXPROJECT_NODE;

	
	m_StaticDependencies.Append( paths );
}



VCXProjectNode::~VCXProjectNode()
{
}



 Node::BuildResult VCXProjectNode::DoBuild( Job *  )
{
	VSProjectGenerator pg;
	pg.SetBasePaths( m_ProjectBasePaths );
	pg.SetAllowedFileExtensions( m_AllowedFileExtensions );

	
	const char * p1 = m_Name.FindLast( ( '\\' ) );
	p1 = p1 ? p1 : m_Name.Get();
	AStackString<> projectName( p1 );
	pg.SetProjectName( projectName );

	
	pg.SetRootNamespace( m_RootNamespace );
	pg.SetProjectGuid( m_ProjectGuid );
	pg.SetDefaultLanguage( m_DefaultLanguage );
	pg.SetApplicationEnvironment( m_ApplicationEnvironment );

	
	pg.SetReferences( m_References );
	pg.SetProjectReferences( m_ProjectReferences );

	
	Array< FileIO::FileInfo * > files( 1024, true );
	GetFiles( files );
	for ( FileIO::FileInfo ** it=files.Begin(); it!=files.End(); ++it )
	{
		const AString & fileName = ( *it )->m_Name;
		AddFile( pg, fileName );
	}

	
	for ( const AString * it=m_Files.Begin(); it!=m_Files.End(); ++it )
	{
		const AString & fileName = ( *it );
		pg.AddFile( fileName, false ); 
	}	

	
	const AString & project = pg.GenerateVCXProj( m_Name, m_Configs, m_FileTypes );
	if ( Save( project, m_Name ) == false )
	{
		return NODE_RESULT_FAILED; 
	}

	
	const AString & filters = pg.GenerateVCXProjFilters( m_Name );
	AStackString<> filterFile( m_Name );
	filterFile += ".filters";
	if ( Save( filters, filterFile ) == false )
	{
		return NODE_RESULT_FAILED; 
	}

	return NODE_RESULT_OK;
}



void VCXProjectNode::AddFile( VSProjectGenerator & pg, const AString & fileName ) const
{
	const AString * const end = m_FilesToExclude.End();
	for( const AString * it=m_FilesToExclude.Begin(); it!=end; ++it )
	{
		if ( fileName.EndsWithI( *it ) )
		{
			return; 
		}
	}

	pg.AddFile( fileName, true );
}



bool VCXProjectNode::Save( const AString & content, const AString & fileName ) const
{
	bool needToWrite = false;

	FileStream old;
	if ( FBuild::Get().GetOptions().m_ForceCleanBuild )
	{
		needToWrite = true;
	}
	else if ( old.Open( fileName.Get(), FileStream::READ_ONLY ) == false )
	{
		needToWrite = true;
	}
	else
	{
		
		size_t oldFileSize = (size_t)old.GetFileSize();
		if ( oldFileSize != content.GetLength() )
		{
			needToWrite = true;
		}
		else
		{
			
			AutoPtr< char > mem( ( char *)::AllocFileLine( oldFileSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Graph\\VCXProjectNode.cpp", 173 ) );
			if ( old.Read( mem.Get(), oldFileSize ) != oldFileSize )
			{
				do { FLog::Error( "VCXProject - Failed to read '%s'",fileName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				return false;
			}

			
			if ( memcmp( mem.Get(), content.Get(), oldFileSize ) != 0 )
			{
				needToWrite = true;
			}
		}

		
		old.Close();
	}

	
	if ( needToWrite == false )
	{
		return true; 
	}

	do { FLog::Build( "VCXProj: %s\n",fileName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	
	
	if ( EnsurePathExistsForFile( fileName ) == false )
	{
		do { FLog::Error( "VCXProject - Invalid path for '%s' (error: %u)",fileName.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	
	FileStream f;
	if ( !f.Open( fileName.Get(), FileStream::WRITE_ONLY ) )
	{
		do { FLog::Error( "VCXProject - Failed to open '%s' for write (error: %u)",fileName.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	if ( f.Write( content.Get(), content.GetLength() ) != content.GetLength() )
	{
		do { FLog::Error( "VCXProject - Error writing to '%s' (error: %u)",fileName.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	f.Close();

	return true;
}



 Node * VCXProjectNode::Load( IOStream & stream )
{
	AStackString<> name; if ( stream.Read( name ) == false ) { return nullptr; };
	Array< AString > projectBasePaths; if ( stream.Read( projectBasePaths ) == false ) { return nullptr; };
	Dependencies staticDeps( 1, true ); if ( staticDeps.Load( stream ) == false ) { return nullptr; };
	Array< AString > pathsToExclude; if ( stream.Read( pathsToExclude ) == false ) { return nullptr; };
	Array< AString > allowedFileExtensions; if ( stream.Read( allowedFileExtensions ) == false ) { return nullptr; };
	Array< AString > files; if ( stream.Read( files ) == false ) { return nullptr; };
	Array< AString > filesToExclude; if ( stream.Read( filesToExclude ) == false ) { return nullptr; };
	AStackString<> rootNamespace; if ( stream.Read( rootNamespace ) == false ) { return nullptr; };
	AStackString<> projectGuid; if ( stream.Read( projectGuid ) == false ) { return nullptr; };
	AStackString<> defaultLanguage; if ( stream.Read( defaultLanguage ) == false ) { return nullptr; };
	AStackString<> applicationEnvironment; if ( stream.Read( applicationEnvironment ) == false ) { return nullptr; };
	Array< AString > references; if ( stream.Read( references ) == false ) { return nullptr; };
	Array< AString > projectReferences; if ( stream.Read( projectReferences ) == false ) { return nullptr; };

	Array< VSProjectConfig > configs;
	VSProjectConfig::Load( stream, configs );

	Array< VSProjectFileType > fileTypes;
	VSProjectFileType::Load( stream, fileTypes );

	NodeGraph & ng = FBuild::Get().GetDependencyGraph();
	VCXProjectNode * n = ng.CreateVCXProjectNode( name,
								 projectBasePaths,
								 staticDeps, 
								 pathsToExclude,
								 allowedFileExtensions,
								 files,
								 filesToExclude,
								 rootNamespace,
								 projectGuid,
								 defaultLanguage,
								 applicationEnvironment,
								 configs,
								 fileTypes,
								 references,
								 projectReferences );
	return n;
}



 void VCXProjectNode::Save( IOStream & stream ) const
{
	stream.Write( m_Name );;
	stream.Write( m_ProjectBasePaths );;
	m_StaticDependencies.Save( stream );;
	stream.Write( m_PathsToExclude );;
	stream.Write( m_AllowedFileExtensions );;
	stream.Write( m_Files );;
	stream.Write( m_FilesToExclude );;
	stream.Write( m_RootNamespace );;
	stream.Write( m_ProjectGuid );;
	stream.Write( m_DefaultLanguage );;
	stream.Write( m_ApplicationEnvironment );;
	stream.Write( m_References );;
	stream.Write( m_ProjectReferences );;
	VSProjectConfig::Save( stream, m_Configs );
	VSProjectFileType::Save( stream, m_FileTypes );
}



void VCXProjectNode::GetFiles( Array< FileIO::FileInfo * > & files ) const
{
	
	const Dependency * const sEnd = m_StaticDependencies.End();
	for ( const Dependency * sIt = m_StaticDependencies.Begin(); sIt != sEnd; ++sIt )
	{
		DirectoryListNode * dirNode = sIt->GetNode()->CastTo< DirectoryListNode >();
		const FileIO::FileInfo * const filesEnd = dirNode->GetFiles().End();

		
		for ( FileIO::FileInfo * filesIt = dirNode->GetFiles().Begin(); filesIt != filesEnd; ++filesIt )
		{
			bool keep = true;

			











			
			if ( keep )
			{
				const AString * pit = m_PathsToExclude.Begin();
				const AString * const pend = m_PathsToExclude.End();
				for ( ; pit != pend; ++pit )
				{
					if ( filesIt->m_Name.BeginsWithI( *pit ) )
					{
						keep = false;
						break;
					}
				}
			}

			if ( keep )
			{
				files.Append( filesIt );
			}
		}
	}
}


#line 142 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/Args.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Args.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Args.cpp"








 void Args::StripQuotes( const char * start, const char * end, AString & out )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( start ) ) { if ( AssertHandler::Failure( "start", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Args.cpp", 17 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( end ) ) { if ( AssertHandler::Failure( "end", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Args.cpp", 18 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( start == end )
	{
		out.Clear();
		return;
	}

	
	const char firstChar = *start;
	if ( ( firstChar == '"' ) || ( firstChar == '\'' ) )
	{
		++start;
	}

	
	const char lastChar = *( end - 1 );
	if ( ( lastChar == '"' ) || ( lastChar == '\'' ) )
	{
		--end;
	}

	
	if ( end < start )
	{
		out.Clear();
		return;
	}

	
	out.Assign( start, end );
}


#line 145 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/CIncludeParser.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp"















CIncludeParser::CIncludeParser()
	: m_LastCRC1( 0 )
	, m_CRCs1( 4096, true )
	, m_LastCRC2( 0 )
	, m_CRCs2( 4096, true )
	, m_Includes( 4096, true )

	, m_NonUniqueCount( 0 )
#line 31 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp"
{
}



CIncludeParser::~CIncludeParser()
{
}



bool CIncludeParser::ParseMSCL_Output( const char * compilerOutput, 
									   size_t compilerOutputSize )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( compilerOutput[ compilerOutputSize ] == 0 ) ) { if ( AssertHandler::Failure( "compilerOutput[ compilerOutputSize ] == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp", 46 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	(void)compilerOutputSize;

	const char * pos = compilerOutput;
	
	for (;;)
	{
		
		const char * token = strstr( pos, "\nNote: including file: " );
		if ( !token )
		{
			break;
		}
		pos = token + 23;

		
		while ( *pos == ' ' )
		{
			++pos;
		}

		const char * lineStart = pos;

		
		pos = strchr( pos, '\r' );
		if ( !pos )
		{
			return false;
		}

		const char * lineEnd = pos;

		AddInclude( lineStart, lineEnd );
	}

	return true;
}



bool CIncludeParser::ParseMSCL_Preprocessed( const char * compilerOutput, 
											 size_t compilerOutputSize )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( compilerOutput[ compilerOutputSize ] == 0 ) ) { if ( AssertHandler::Failure( "compilerOutput[ compilerOutputSize ] == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp", 90 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	(void)compilerOutputSize;

	const char * pos = compilerOutput;

	
	
	if ( strncmp( pos, "#line ", 6 ) == 0 )
	{
		pos += 6;
		goto foundInclude;
	}

	for (;;)
	{
		pos = strstr( pos, "\n#line " );
		if ( !pos )
		{
			break;
		}
		pos += 7;

	foundInclude:

		
		pos = strchr( pos, '"' );
		if ( !pos )
		{
			return false;
		}
		pos++;

		const char * lineStart = pos;

		
		pos = strchr( pos, '"' );
		if ( !pos )
		{
			return false;
		}

		const char * lineEnd = pos;

		AddInclude( lineStart, lineEnd );
	}

	return true;
}



bool CIncludeParser::ParseGCC_Preprocessed( const char * compilerOutput, 
											size_t compilerOutputSize )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( compilerOutput[ compilerOutputSize ] == 0 ) ) { if ( AssertHandler::Failure( "compilerOutput[ compilerOutputSize ] == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp", 145 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	(void)compilerOutputSize;

	const char * pos = compilerOutput;

	
	
	if ( pos[ 0 ] == '#' )
	{
		++pos;
		goto possibleInclude;
	}

	for (;;)
	{
		pos = strstr( pos, "\n#" );
		if ( !pos )
		{
			break;
		}
		pos += 2;
    possibleInclude:
        if ( *pos == ' ' )
        {
            ++pos;
            goto foundInclude;
        }
        if ( strncmp( pos, "line ", 5 ) == 0 )
        {
            pos += 5;
            goto foundInclude;
        }
        continue; 

	foundInclude:

		
		for ( ;; )
		{
			char c = * pos;
			if ( ( c >= '0' ) && ( c <= '9' ) )
			{
				pos++;
				continue;
			}
			break; 
		}

		
		if ( *pos != ' ' )
		{
			continue;
		}
		pos++;

		
		if ( *pos != '"' )
		{
			continue;
		}
		pos++;

		
		if ( *pos == '<' )
		{
			continue;
		}

		const char * lineStart = pos;

		
		pos = strchr( pos, '"' );
		if ( !pos )
		{
			return false; 
		}

		const char * lineEnd = pos;

		
		const char lastChar( lineEnd[ -1 ] );
		if ( ( lastChar == ( '\\' ) ) || ( lastChar == ( '/' ) ) )
		{
			continue;
		}

		AddInclude( lineStart, lineEnd );
	}

	return true;
}



void CIncludeParser::SwapIncludes( Array< AString > & includes )
{
	m_Includes.Swap( includes );
}



void CIncludeParser::AddInclude( const char * begin, const char * end )
{
	
		m_NonUniqueCount++;
	#line 251 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp"

	
	uint32_t crc1 = Murmur3::Calc32( begin, end - begin );
	if ( crc1 == m_LastCRC1 )
	{
		return;
	}
	m_LastCRC1 = crc1;
	if ( m_CRCs1.Find( crc1 ) )
	{
		return;
	}
	m_CRCs1.Append( crc1 );

	
	AStackString< 256 > include( begin, end );
	AStackString< 256 > cleanInclude;
	NodeGraph::CleanPath( include, cleanInclude );
	
		
		AStackString<> lowerCopy( cleanInclude );
		lowerCopy.ToLower();
		uint32_t crc2 = Murmur3::Calc32( lowerCopy );
	


#line 278 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\CIncludeParser.cpp"
	if ( crc2 == m_LastCRC2 )
	{
		return;
	}
	m_LastCRC2 = crc2;
	if ( m_CRCs2.Find( crc2 ) == nullptr )
	{
		m_CRCs2.Append( crc2 );
		m_Includes.Append( cleanInclude );
	}
}


#line 148 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/Compressor.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp"









#line 1 "c:\\Users\\Franta\\p4\\External\\LZ4\\lz4-r127\\lz4.h"

































#pragma once


extern "C" {
#line 39 "c:\\Users\\Franta\\p4\\External\\LZ4\\lz4-r127\\lz4.h"














int LZ4_versionNumber (void);


















int LZ4_compress        (const char* source, char* dest, int sourceSize);
int LZ4_decompress_safe (const char* source, char* dest, int compressedSize, int maxDecompressedSize);







































int LZ4_compressBound(int isize);














int LZ4_compress_limitedOutput (const char* source, char* dest, int sourceSize, int maxOutputSize);








int LZ4_sizeofState(void);
int LZ4_compress_withState               (void* state, const char* source, char* dest, int inputSize);
int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);













int LZ4_decompress_fast (const char* source, char* dest, int originalSize);














int LZ4_decompress_safe_partial (const char* source, char* dest, int compressedSize, int targetOutputSize, int maxDecompressedSize);















typedef struct { long long table[((1 << (14-3)) + 4)]; } LZ4_stream_t;





void LZ4_resetStream (LZ4_stream_t* LZ4_streamPtr);







LZ4_stream_t* LZ4_createStream(void);
int           LZ4_freeStream (LZ4_stream_t* LZ4_streamPtr);








int LZ4_loadDict (LZ4_stream_t* LZ4_streamPtr, const char* dictionary, int dictSize);






int LZ4_compress_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);






int LZ4_compress_limitedOutput_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int maxOutputSize);










int LZ4_saveDict (LZ4_stream_t* LZ4_streamPtr, char* safeBuffer, int dictSize);








typedef struct { unsigned long long table[4]; } LZ4_streamDecode_t;










LZ4_streamDecode_t* LZ4_createStreamDecode(void);
int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);







int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary, int dictSize);








int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int compressedSize, int maxDecompressedSize);
int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int originalSize);









int LZ4_decompress_safe_usingDict (const char* source, char* dest, int compressedSize, int maxDecompressedSize, const char* dictStart, int dictSize);
int LZ4_decompress_fast_usingDict (const char* source, char* dest, int originalSize, const char* dictStart, int dictSize);



















void* LZ4_create (const char* inputBuffer);
int   LZ4_sizeofStreamState(void);
int   LZ4_resetStreamState(void* state, const char* inputBuffer);
char* LZ4_slideInputBuffer (void* state);


int LZ4_decompress_safe_withPrefix64k (const char* source, char* dest, int compressedSize, int maxOutputSize);
int LZ4_decompress_fast_withPrefix64k (const char* source, char* dest, int originalSize);



}
#line 316 "c:\\Users\\Franta\\p4\\External\\LZ4\\lz4-r127\\lz4.h"
#line 17 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp"




Compressor::Compressor()
	: m_Result( nullptr )
	, m_ResultSize( 0 )
{
}



Compressor::~Compressor()
{
	::Free( m_Result );
}



bool Compressor::IsValidData( const void * data, size_t dataSize ) const
{
	const Header * header = (const Header *)data;
	if ( header->m_CompressionType > 1 )
	{
		return false;
	}
	if ( ( header->m_CompressedSize + sizeof( Header ) ) != dataSize )
	{
		return false;
	}
	if ( header->m_CompressedSize > header->m_UncompressedSize )
	{
		return false;
	}
	return true;
}



bool Compressor::Compress( const void * data, size_t dataSize )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( data ) ) { if ( AssertHandler::Failure( "data", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 58 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( (size_t)data % 4 ) == 0 ) ) { if ( AssertHandler::Failure( "( (size_t)data % 4 ) == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 59 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Result == nullptr ) ) { if ( AssertHandler::Failure( "m_Result == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 60 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	const int worstCaseSize = LZ4_compressBound( (int)dataSize );
	AutoPtr< char > output( (char *)::AllocFileLine( worstCaseSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 64 ) );

	
	const int compressedSize = LZ4_compress( (const char*)data, output.Get(), (int)dataSize);

	
	const bool compressed = ( compressedSize < (int)dataSize );

	if ( compressed )
	{
		
		m_Result = ::AllocFileLine( compressedSize + sizeof( Header ), "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 75 );
		memcpy( (char *)m_Result + sizeof( Header ), output.Get(), compressedSize );
		m_ResultSize = compressedSize + sizeof( Header );
	}
	else
	{
		
		m_Result = ::AllocFileLine( dataSize + sizeof( Header ), "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 82 );
		memcpy( (char *)m_Result + sizeof( Header ), data, dataSize );
		m_ResultSize = dataSize + sizeof( Header );
	}

	
	Header * header = (Header*)m_Result;
	header->m_CompressionType = compressed ? 1 : 0;		
	header->m_UncompressedSize = (uint32_t)dataSize;	
	header->m_CompressedSize = compressed ? compressedSize : (uint32_t)dataSize;	

	return compressed;
}



void Compressor::Decompress( const void * data )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( data ) ) { if ( AssertHandler::Failure( "data", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 100 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( (size_t)data % 4 ) == 0 ) ) { if ( AssertHandler::Failure( "( (size_t)data % 4 ) == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 101 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Result == nullptr ) ) { if ( AssertHandler::Failure( "m_Result == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 102 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	const Header * header = (const Header *)data;

	
	if ( header->m_CompressionType == 0 )
	{
		m_Result = ::AllocFileLine( header->m_UncompressedSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 109 );
		memcpy( m_Result, (char *)data + sizeof( Header ), header->m_UncompressedSize );
		m_ResultSize = header->m_UncompressedSize;
		return;
	}
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( header->m_CompressionType == 1 ) ) { if ( AssertHandler::Failure( "header->m_CompressionType == 1", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 114 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	const uint32_t uncompressedSize = header->m_UncompressedSize;
	m_Result = ::AllocFileLine( uncompressedSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 118 );
	m_ResultSize = uncompressedSize;

	
	const char * compressedData = ( (const char *)data + sizeof( Header ) );

	
	const int compressedSize = LZ4_decompress_fast( compressedData, (char *)m_Result, (int)uncompressedSize);
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( compressedSize == (int)header->m_CompressedSize ) ) { if ( AssertHandler::Failure( "compressedSize == (int)header->m_CompressedSize", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Compressor.cpp", 126 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); (void)compressedSize;
}


#line 151 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/FBuildStats.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\FBuildStats.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\FBuildStats.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Report.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemPoolBlock.h"


#pragma once









class MemPoolBlock
{
public:
	MemPoolBlock( size_t blockSize, size_t blockAlignment );
	~MemPoolBlock();

	void *	Alloc( size_t size );
	void	Free( void * ptr );

private:
	void AllocPage();

	struct FreeBlock
	{
		FreeBlock * m_Next;
	};

	
	FreeBlock * m_FreeBlockChain;

	
	uint32_t m_NumAllocations;

	
	size_t		m_BlockSize;
	size_t		m_BlockAlignment;

	
	enum { PAGE_SIZE = 64 * 1024 };
	Array< void * > m_Pages;
};


#line 47 "c:\\Users\\Franta\\p4\\Code\\Core/Mem/MemPoolBlock.h"
#line 11 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Report.h"




struct FBuildStats;
class Dependencies;
class Node;



class Report
{
public:
	Report();
	~Report();

	void Generate( const FBuildStats & stats );
	void Save() const;

private:
	
	void CreateHeader();
	void CreateTitle();
	void CreateOverview( const FBuildStats & stats );
	void DoCacheStats( const FBuildStats & stats );
	void DoCPUTimeByType( const FBuildStats & stats );
	void DoCPUTimeByItem( const FBuildStats & stats );
	void DoCPUTimeByLibrary();
	void DoIncludes();

	void CreateFooter();

	struct PieItem
	{
		PieItem( const char * l, float v, uint32_t c, void * u = nullptr )
			: label( l )
			, value( v )
			, color( c )
			, userData( u )
		{
		}

		const char *	label;
		float			value;
		uint32_t		color;
		void *			userData;

		bool operator < ( const PieItem & other ) const { return value > other.value; }
	};

	struct LibraryStats
	{
		const Node *	library;
		uint32_t		cpuTimeMS;
		uint32_t		objectCount;
		uint32_t		objectCount_OutOfDate;
		uint32_t		objectCount_Cacheable;
		uint32_t		objectCount_CacheHits;
		uint32_t		objectCount_CacheStores;

		bool operator < ( const LibraryStats & other ) const { return cpuTimeMS > other.cpuTimeMS; }
	};

	struct IncludeStats
	{
		const Node *	node;
		uint32_t		count;
		bool			inPCH;

		bool operator < ( const IncludeStats & other ) const { return count > other.count; }

		IncludeStats *	m_Next; 
	};

	class IncludeStatsMap
	{
	public:
		IncludeStatsMap();
		~IncludeStatsMap();

		IncludeStats * Find( const Node * node ) const;
		IncludeStats * Insert( const Node * node );

		void Flatten( Array< const IncludeStats * > & stats ) const;
	protected:
		IncludeStats * m_Table[ 65536 ];
		MemPoolBlock m_Pool;
	};

	enum { DEFAULT_TABLE_WIDTH = 990 };

	
	void DoTableStart( int width = DEFAULT_TABLE_WIDTH, const char * id = nullptr, bool hidden = false );
	void DoTableStop();
	void DoToggleSection( size_t numMore = 0 );
	void DoSectionTitle( const char * sectionName, const char * sectionId );
	void DoPieChart( const Array< PieItem > & items, const char * units );

	
	void Write( const char * fmtString, ... );

	
	void GetLibraryStats( const FBuildStats & stats );
	void GetLibraryStatsRecurse( Array< LibraryStats * > & libStats, const Node * node, LibraryStats * currentLib ) const;
	void GetLibraryStatsRecurse( Array< LibraryStats * > & libStats, const Dependencies & dependencies, LibraryStats * currentLib ) const;
	void GetIncludeFilesRecurse( IncludeStatsMap & incStats, const Node * node) const;
	void AddInclude( IncludeStatsMap & incStats, const Node * node, const Node * parentNode) const;

	
	Array< LibraryStats * > m_LibraryStats;
	uint32_t m_NumPieCharts;

	
	AString m_Output;
};


#line 129 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Helpers/Report.h"
#line 13 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\FBuildStats.cpp"







class NodeCostSorter
{
public:
	inline bool operator () ( const Node * a, const Node * b ) const
	{
		return ( a->GetProcessingTime() > b->GetProcessingTime() );
	}
};



FBuildStats::FBuildStats()
	: m_NodeTimeTotalms( 0 )
	, m_NodeTimeProgressms( 0 )
	, m_TotalBuildTime( 0.0f )
	, m_TotalLocalCPUTimeMS( 0 )
	, m_TotalRemoteCPUTimeMS( 0 )
	, m_RootNode( nullptr )
	, m_NodesByTime( 100 * 1000, true )
{}



FBuildStats::Stats::Stats()
	: m_NumProcessed( 0 )
	, m_NumBuilt( 0 )
	, m_NumCacheHits( 0 )
	, m_NumCacheMisses( 0 )
	, m_NumCacheStores( 0 )
	, m_ProcessingTimeMS( 0 )
{}



void FBuildStats::OnBuildStop( Node * node )
{
	m_RootNode = node;

	const FBuildOptions & options = FBuild::Get().GetOptions();
	const bool showSummary = options.m_ShowSummary;
	const bool generateReport = options.m_GenerateReport;

	
	if ( showSummary || generateReport )
	{
		
		GatherPostBuildStatistics( node );

		
		if ( generateReport )
		{
			Report r;
			r.Generate( *this );
			r.Save();
		}

		
		if ( showSummary )
		{
			OutputSummary();
		}
	}
}



void FBuildStats::GatherPostBuildStatistics( Node * node )
{
	
	GatherPostBuildStatisticsRecurse( node );

	NodeCostSorter ncs;
	m_NodesByTime.Sort( ncs );

	
	for ( uint32_t i=0; i< Node::NUM_NODE_TYPES; ++i )
	{
		m_Totals.m_NumProcessed		+= m_PerTypeStats[ i ].m_NumProcessed;
		m_Totals.m_NumBuilt			+= m_PerTypeStats[ i ].m_NumBuilt;
		m_Totals.m_NumCacheHits		+= m_PerTypeStats[ i ].m_NumCacheHits;
		m_Totals.m_NumCacheMisses	+= m_PerTypeStats[ i ].m_NumCacheMisses;
		m_Totals.m_NumCacheStores	+= m_PerTypeStats[ i ].m_NumCacheStores;
	}
}



void FBuildStats::OutputSummary() const
{

	
	if ( m_NodesByTime.IsEmpty() == false )
	{
		Tracing::OutputFormat( "--- Most Expensive ----------------------------------------------\n" );
		Tracing::OutputFormat( "Time (s)  Name:\n" );
		size_t itemsToDisplay = Math::Min( m_NodesByTime.GetSize(), (size_t)20 );
		for ( size_t i=0; i<itemsToDisplay; ++i )
		{
			const Node * n = m_NodesByTime[ i ];
			Tracing::OutputFormat( "%-9.3f %s\n", ( (float)n->GetProcessingTime() / 1000.0f ), n->GetName().Get() );
		}
		Tracing::OutputFormat( "\n" );
	}

	Tracing::OutputFormat( "--- Summary -----------------------------------------------------\n" );

	
	
	Tracing::OutputFormat( "                                 /----- Cache -----\\\n" );
	Tracing::OutputFormat( "Build:          Seen    Built   Hit     Miss    Store   CPU\n" );
	for ( uint32_t i=0; i< Node::NUM_NODE_TYPES; ++i )
	{
		
		const Stats & stats = m_PerTypeStats[ i ];
		if ( stats.m_NumProcessed == 0 )
		{
			continue;
		}

		const char * typeName = Node::GetTypeName( Node::Type( i ) );

		AStackString<> cpuTime;
		FormatTime( (float)( (double)stats.m_ProcessingTimeMS / (double)1000 ), cpuTime );

		AStackString<> cacheInfo;
		if ( ( stats.m_NumCacheHits + stats.m_NumCacheMisses + stats.m_NumCacheStores ) > 0 )
		{
			cacheInfo.Format( "%-8u%-8u%-8u",
							  stats.m_NumCacheHits,
							  stats.m_NumCacheMisses,
							  stats.m_NumCacheStores );
		}
		else
		{
			cacheInfo = "-       -       -       ";
		}
		Tracing::OutputFormat( " - %-10s : %-8u%-8u%s%s\n", typeName, stats.m_NumProcessed, stats.m_NumBuilt, cacheInfo.Get(), cpuTime.Get() );
#line 162 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\FBuildStats.cpp"
	}
	Tracing::OutputFormat( "Cache:\n" );
	{
		const uint32_t hits = m_Totals.m_NumCacheHits;
		const uint32_t misses = m_Totals.m_NumCacheMisses;
		const uint32_t stores = m_Totals.m_NumCacheStores;
		float hitPerc = 0.0f;
		if ( hits > 0 || misses > 0 )
		{
			hitPerc = ( (float)hits / float( hits + misses ) * 100.0f );
		}
		Tracing::OutputFormat( " - Hits       : %u (%2.1f %%)\n", hits, hitPerc );
		Tracing::OutputFormat( " - Misses     : %u\n", misses );
		Tracing::OutputFormat( " - Stores     : %u\n", stores );
	}

	AStackString<> buffer;
	FormatTime( m_TotalBuildTime, buffer );
	Tracing::OutputFormat( "Time:\n" );
	Tracing::OutputFormat( " - Real       : %s\n", buffer.Get() );
	float totalLocalCPUInSeconds = (float)( (double)m_TotalLocalCPUTimeMS / (double)1000 );
	float totalRemoteCPUInSeconds = (float)( (double)m_TotalRemoteCPUTimeMS / (double)1000 );
	FormatTime( totalLocalCPUInSeconds, buffer );
	float localRatio = ( totalLocalCPUInSeconds / m_TotalBuildTime );
	Tracing::OutputFormat( " - Local CPU  : %s (%2.1f:1)\n", buffer.Get(), localRatio );
	FormatTime( totalRemoteCPUInSeconds, buffer );
	float remoteRatio = ( totalRemoteCPUInSeconds / m_TotalBuildTime );
	Tracing::OutputFormat( " - Remote CPU : %s (%2.1f:1)\n", buffer.Get(), remoteRatio );
	Tracing::OutputFormat( "-----------------------------------------------------------------\n" );
}



void FBuildStats::GatherPostBuildStatisticsRecurse( Node * node )
{
	
	if ( node->GetStatFlag( Node::STATS_STATS_PROCESSED ) )
	{
		return;
	}

	Node::Type nodeType = node->GetType();
	Stats & stats = m_PerTypeStats[ nodeType ];

	if ( node->GetType() != Node::PROXY_NODE )
	{
		stats.m_NumProcessed++;

		m_TotalLocalCPUTimeMS += node->GetProcessingTime();
		if (node->GetStatFlag(Node::STATS_BUILT_REMOTE))
		{
			m_TotalRemoteCPUTimeMS += node->GetLastBuildTime();
		}
		stats.m_ProcessingTimeMS += node->GetProcessingTime();

		
		if ( node->GetProcessingTime() > 0 )
		{
			
			if ( node->GetType() != Node::FILE_NODE )
			{
				m_NodesByTime.Append( node );
			}
		}

		if ( node->GetStatFlag( Node::STATS_BUILT ) )
		{
			stats.m_NumBuilt++;
		}
		if ( node->GetStatFlag( Node::STATS_CACHE_HIT ) )
		{
			stats.m_NumCacheHits++;
		}
		if ( node->GetStatFlag( Node::STATS_CACHE_MISS ) )
		{
			stats.m_NumCacheMisses++;
		}
		if ( node->GetStatFlag( Node::STATS_CACHE_STORE ) )
		{
			stats.m_NumCacheStores++;
		}
	}

	
	node->SetStatFlag( Node::STATS_STATS_PROCESSED );

	
	GatherPostBuildStatisticsRecurse( node->GetPreBuildDependencies() );
	GatherPostBuildStatisticsRecurse( node->GetStaticDependencies() );
	GatherPostBuildStatisticsRecurse( node->GetDynamicDependencies() );
}



void FBuildStats::GatherPostBuildStatisticsRecurse( const Dependencies & dependencies )
{
	const Dependencies::Iter end = dependencies.End();
	for ( Dependencies::Iter it = dependencies.Begin();
		  it != end;
		  it++ )
	{
		GatherPostBuildStatisticsRecurse( it->GetNode() );
	}
}



void FBuildStats::FormatTime( float timeInSeconds , AString & buffer ) const
{
	buffer.Clear();

	uint32_t days = (uint32_t)( timeInSeconds / ( 24.0f * 60.0f * 60.0f ) );
	timeInSeconds -= ( (float)days * ( 24.0f * 60.0f * 60.0f ) );
	uint32_t hours = (uint32_t)( timeInSeconds / ( 60.0f * 60.0f ) );
	timeInSeconds -= ( (float)hours * ( 60.0f * 60.0f ) );
	uint32_t mins = (uint32_t)( timeInSeconds / 60.0f );
	timeInSeconds -= ( (float)mins * 60.0f );

	AStackString<> temp;

	if ( days > 0 )
	{
		temp.Format( "%u days, ", days );
		buffer += temp;
	}
	if ( hours > 0 )
	{
		temp.Format( "%uh:", hours );
		buffer += temp;
	}
	if ( mins > 0 )
	{
		temp.Format( "%um ", mins );
		buffer += temp;
	}

	temp.Format( "%2.3fs", timeInSeconds );
	buffer += temp;
}


#line 154 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/Report.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildVersion.h"


#pragma once







	
		
	

#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildVersion.h"








#line 25 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildVersion.h"


#line 28 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/FBuildVersion.h"
#line 13 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"












    
#line 27 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"



uint32_t g_ReportNodeColors[] = { 0x000000, 
								  0xFFFFFF, 
								  0xAAAAAA, 
								  0x000000, 
								  0x888888, 
								  0x88FF88, 
								  0xFF8888, 
								  0x228B22, 
								  0xFFFF88, 
								  0x88AAFF, 
								  0x88CCFF,	
								  0xFFAAFF, 
								  0xDDA0DD, 
								  0xFFCC88, 
								  0xFFFFFF, 
								  0x444444, 
								  0x000000 }; 



Report::Report()
	: m_LibraryStats( 512, true )
	, m_NumPieCharts( 0 )
{
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) compile_time_assert_failure< ( sizeof( g_ReportNodeColors ) / sizeof (uint32_t) == Node::NUM_NODE_TYPES ) > (); } while ( false ); __pragma(warning(pop));
}



Report::~Report()
{
	const LibraryStats * const * end = m_LibraryStats.End();
	for ( LibraryStats ** it=m_LibraryStats.Begin(); it != end; ++it )
	{
		delete *it;
	}
}



void Report::Generate( const FBuildStats & stats )
{
	Timer t;

	
	m_Output.SetReserved( (1024 * 1024) );
	m_Output.SetLength( 0 );

	
	GetLibraryStats( stats );

	
	CreateHeader();

	CreateTitle();

	CreateOverview( stats );

	DoCPUTimeByType( stats );
	DoCacheStats( stats );
	DoCPUTimeByLibrary();
	DoCPUTimeByItem( stats );

	DoIncludes();

	CreateFooter();

	
	const float time = t.GetElapsed();
	AStackString<> timeTakenBuffer;
	stats.FormatTime( time, timeTakenBuffer );
	char * placeholder = m_Output.Find( "^^^^    " );
	memcpy( placeholder, timeTakenBuffer.Get(), timeTakenBuffer.GetLength() );
	
}



void Report::Save() const
{
	FileStream f;
	if ( f.Open( "report.html", FileStream::WRITE_ONLY ) )
	{
		f.Write( m_Output.Get(), m_Output.GetLength() );
	}
}



void Report::CreateHeader()
{
	const char * header = 
		"<!doctype html>\n"
		"<style type=\"text/css\">\n"
		"body{\n"
		"font-family:arial;\n"
		"width:1000px;\n"
		"margin:0 auto;\n"
		"font-size:13px\n"
		"}\n"
		"th{\n"
		"background-color:#e0e0e0;\n"
		"padding:4px;\n"
		"height:15px;\n"
		"text-align:left;\n"
		"border-top-left-radius:5px;\n"
		"-moz-border-radius-topleft:5px;\n"
		"border-top-right-radius:5px;\n"
		"-moz-border-radius-topright:5px;\n"
		"font-weight:bold;\n"
		"}\n"
		"tr:nth-child(odd){\n"
		"background-color:#f0f0f0;\n"
		"}\n"
		"h1{\n"
		"background-color:#b0b0b0;\n"
		"border-radius:5px;\n"
		"padding:4px;\n"
		"height:40px;\n"
		"text-align:left;\n"
		"font-weight:bold;\n"
		"}\n"
		"h2{\n"
		"background-color:#d0d0d0;\n"
		"border-radius:5px;\n"
		"padding:4px;\n"
		"height:27px;\n"
		"text-align:left;\n"
		"font-weight:bold;\n"
		"}\n"
		"table{\n"
		"  padding-left:10px;\n"
		"}\n"
		"td\n"
		"word-break:break-all;\n"
		"padding:3px;\n"
		"}\n"
		".perc{\n"
		"color:#aaaaaa;\n"
		"font-size:10px\n"
		"}\n"
		"</style>\n"

		"<html>\n"
		"<head>\n"
		"<meta charset=\"UTF-8\" />\n"
		"<title>FASTBuild Report</title>\n"
		"</head>\n"
		"<body>\n"
		"<script type=\"text/javascript\">\n"
		"function getTotal(data)\n"
		"{\n"
		" var total = 0;\n"
		" for (var j = 0; j < data.length; j++)\n"
		" {\n"
		"  total += (typeof data[j] == 'number') ? data[j] : 0;\n"
		" }\n"
		" return total;\n"
		"}\n"
		"function plotData(canvasName,myData,myLabels,myColor, units)\n"
		"{\n"
		" var canvas;\n"
		" var ctx;\n"
		" var lastend = 0;\n"
		" var myTotal = getTotal(myData);\n"
		  
		" canvas = document.getElementById(canvasName);\n"
		" ctx = canvas.getContext(\"2d\");\n"
		" ctx.clearRect(0, 0, canvas.width, canvas.height);\n"
		  
		" ctx.fillStyle = \"black\";\n"
		" ctx.beginPath();\n"
		" ctx.moveTo(70,70);\n"
		" ctx.arc(70,70,66,0,(Math.PI*2),false);\n"
		" ctx.lineTo(70,70);\n"
		" ctx.fill();\n"
		  
		" for (var i = 0; i < myData.length; i++)\n"
		" {\n"
		"  ctx.fillStyle = myColor[i];\n"
		"  ctx.beginPath();\n"
		"  ctx.moveTo(70,70);\n"
		"  ctx.arc(70,70,65,lastend,lastend+(Math.PI*2*(myData[i]/myTotal)),false);\n"
		"  ctx.lineTo(70,70);\n"
		"  ctx.fill();\n"
		"  lastend += Math.PI*2*(myData[i]/myTotal);\n"
		" }\n"

		
		" for (var i = 0; i < myData.length; i++)\n"
		" {\n"
		"  var y = 20 + ( i * 25 );\n"

		
		"  ctx.fillStyle=\"#888888\";\n"
		"  ctx.fillRect(200-1,y-15-1,22,22)\n"
		"  ctx.fillStyle=myColor[ i ];\n"
		"  ctx.fillRect(200,y-15,20,20)\n"

		
		"  ctx.fillStyle = \"black\";\n"
		"  ctx.font = \"16px Arial\";\n"
		"  ctx.fillText(myLabels[ i ], 230, y );\n"

		
		"  var perc = ( 100.0 * myData[ i ] / myTotal ).toFixed(1);\n"
		"  ctx.fillText( perc + \"% (\" + myData[ i ] + units + \")\", 330, y );\n"
		" }\n"
		"}\n"

		
		"function toggleTable(tableName)\n"
		"{\n"
		" var table = document.getElementById(tableName);\n"
		" table.style.display = (table.style.display == \"table\") ? \"none\" : \"table\";\n"
		"}\n"

		"</script>\n";
	m_Output += header;
}



void Report::CreateTitle()
{

	Write( "<h1>FASTBuild Report</h1>\n" );
}



void Report::CreateOverview( const FBuildStats & stats )
{
	DoSectionTitle( "Overview", "overview" );

	AStackString<> buffer;

	DoTableStart();

	
	Write( "<tr><th width=150>Item</th><th>Details</th></tr>\n" );

	
	const char * commandLine = Env::GetCmdLine();
	const char * exeExtension = strstr( commandLine, ".exe\"" );
	commandLine = exeExtension ? ( exeExtension + 5 ) : commandLine; 
	Write( "<tr><td width=80>Cmd Line Options</td><td>%s</td></tr>", commandLine );

	
	AStackString<> targets;
	const Node * rootNode = stats.GetRootNode();
	if (rootNode->GetType() != Node::PROXY_NODE)
	{
		targets = rootNode->GetName();
	}
	else
	{
		const Dependencies & childNodes = rootNode->GetStaticDependencies();
		size_t num = childNodes.GetSize();
		for ( size_t i=0; i<num; ++i )
		{
			if ( i != 0 )
			{
				targets += ", ";
			}
			const Node * child = childNodes[ i ].GetNode();
			targets += child->GetName();
		}
	}
	Write( "<tr><td>Target(s)</td><td>%s</td></tr>\n", targets.Get() );

	
	const bool buildOK = ( stats.GetRootNode()->GetState() == Node::UP_TO_DATE );
	Write( "<tr><td>Result</td><td>%s</td></tr>\n", buildOK ? "OK" : "FAILED" );

	
	float totalBuildTime = stats.m_TotalBuildTime;
	stats.FormatTime( totalBuildTime, buffer );
	Write( "<tr><td>Time</td><td>%s</td></tr>\n", buffer.Get() );

	
	float totalLocalCPUInSeconds = (float)( (double)stats.m_TotalLocalCPUTimeMS / (double)1000 );
	stats.FormatTime( totalLocalCPUInSeconds, buffer );
	float localRatio = ( totalLocalCPUInSeconds / totalBuildTime );
	Write( "<tr><td>CPU Time</td><td>%s (%2.1f:1)</td></tr>\n", buffer.Get(), localRatio );

	
	Write( "<tr><td>Version</td><td>%s %s</td></tr>\n", "v0.81a", "x64" );

	
	char timeBuffer[ 256 ];
	
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ::GetTimeFormatA( 0, 0x00000008, nullptr, nullptr, timeBuffer, 256 ) ) ) { if ( AssertHandler::Failure( "::GetTimeFormatA( 0, 0x00000008, nullptr, nullptr, timeBuffer, 256 )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp", 328 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));						
#line 329 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"
	





#line 336 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"

	char dateBuffer[ 256 ];
	
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ::GetDateFormatA( 0, 0x00000002, nullptr, nullptr, dateBuffer, 256 ) ) ) { if ( AssertHandler::Failure( "::GetDateFormatA( 0, 0x00000002, nullptr, nullptr, dateBuffer, 256 )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp", 344 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));						
#line 345 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"
	





#line 352 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp"

	
	Write( "<tr><td>Report Generated</td><td>^^^^                         - %s %s</td></tr>\n", dateBuffer, timeBuffer );

	DoTableStop();
}



void Report::DoCacheStats( const FBuildStats & stats )
{
	(void)stats;

	DoSectionTitle( "Cache Stats", "cacheStats" );

	const FBuildOptions & options = FBuild::Get().GetOptions();
	if ( options.m_UseCacheRead || options.m_UseCacheWrite )
	{
		
		uint32_t totalOutOfDateItems( 0 );
		uint32_t totalCacheable( 0 );
		uint32_t totalCacheHits( 0 );
		const LibraryStats * const * end = m_LibraryStats.End();
		for ( LibraryStats ** it = m_LibraryStats.Begin(); it != end; ++it )
		{
			const LibraryStats & ls = *( *it );
			totalOutOfDateItems += ls.objectCount_OutOfDate;
			totalCacheable += ls.objectCount_Cacheable;
			totalCacheHits += ls.objectCount_CacheHits;
		}
		if ( totalOutOfDateItems == 0 )
		{
			Write( "No cacheable items were built.\n" );
			return;
		}
		uint32_t totalCacheMisses( totalCacheable - totalCacheHits );

		Array< PieItem > pieItems( 3, false );
		pieItems.Append(PieItem("Uncacheable", (float)(totalOutOfDateItems - totalCacheable), 0xFF8888));
		pieItems.Append(PieItem("Cache Miss", (float)totalCacheMisses, 0xFFCC88));
		pieItems.Append(PieItem("Cache Hit", (float)totalCacheHits, 0x88FF88));
		DoPieChart(pieItems, "");

		DoTableStart();

		
		Write( "<tr><th>Library</th><th style=\"width:70px;\">Items</th><th style=\"width:90px;\">Out-of-Date</th><th style=\"width:90px;\">Cacheable</th><th style=\"width:70px;\">Hits</th><th style=\"width:70px;\">Misses</th><th style=\"width:60px;\">Stores</th></tr>\n" );

		size_t numOutput( 0 );

		
		for ( LibraryStats ** it = m_LibraryStats.Begin(); it != end; ++it )
		{
			const LibraryStats & ls = *( *it );
			const char * libraryName = ls.library->GetName().Get();

			
			const uint32_t items = ls.objectCount;

			
			const uint32_t	outOfDateItems		= ls.objectCount_OutOfDate;
			const float		outOfDateItemsPerc	= ( (float)outOfDateItems / (float)items ) * 100.0f;

			
			const uint32_t	cItems		= ls.objectCount_Cacheable;
			const float		cItemsPerc	= ( (float)cItems / (float)outOfDateItems ) * 100.0f;

			
			const uint32_t	cHits		= ls.objectCount_CacheHits;
			const float		cHitsPerc	= ( cItems > 0 ) ? ( (float)cHits / (float)cItems ) * 100.0f : 0.0f;

			
			const uint32_t	cMisses		= ( cItems - cHits );
			const float		cMissesPerc	= ( cMisses > 0 ) ? 100.0f - cHitsPerc : 0.0f;

			
			const uint32_t	cStores		= ls.objectCount_CacheStores;

			
			if ( outOfDateItems == 0 )
			{
				continue;
			}

			
			if ( numOutput == 10 )
			{
				DoToggleSection();
			}

			Write( ( numOutput == 10 ) ? "<tr></tr><tr><td>%s</td><td style=\"width:70px;\">%u</td><td style=\"width:90px;\">%u <font class='perc'>(%2.1f%%)</font></td><td style=\"width:90px;\">%u <font class='perc'>(%2.1f%%)</font></td><td style=\"width:70px;\">%u <font class='perc'>(%2.1f%%)</font></td><td style=\"width:70px;\">%u <font class='perc'>(%2.1f%%)</font></td><td style=\"width:60px;\">%u</td></tr>\n"
									   : "<tr><td>%s</td><td>%u</td><td>%u <font class='perc'>(%2.1f%%)</font></td><td>%u <font class='perc'>(%2.1f%%)</font></td><td>%u <font class='perc'>(%2.1f%%)</font></td><td>%u <font class='perc'>(%2.1f%%)</font></td><td>%u</td></tr>\n", 
						libraryName, 
						items,
						outOfDateItems, outOfDateItemsPerc,
						cItems, cItemsPerc,
						cHits, cHitsPerc,
						cMisses, cMissesPerc,
						cStores  );
			numOutput++;
		}

		DoTableStop();

		if ( numOutput > 10 )
		{
			Write( "</details>\n" );
		}
	}
	else
	{
		Write( "Cache not used.\n" );
	}
}



void Report::DoCPUTimeByType( const FBuildStats & stats )
{
	DoSectionTitle( "CPU Time by Node Type", "cpuTimeByNodeType" );

	
	Array< PieItem > items( 32, true );
	 
	for ( size_t i=0; i < (size_t)Node::NUM_NODE_TYPES; ++i )
	{
		const FBuildStats::Stats & nodeStats = stats.GetStatsFor( (Node::Type)i );
		if ( nodeStats.m_NumProcessed == 0 )
		{
			continue;
		}

		
		const char * typeName = Node::GetTypeName( Node::Type( i ) );
		const float value = (float)( (double)nodeStats.m_ProcessingTimeMS / (double)1000 );
		const uint32_t color = g_ReportNodeColors[ i ];

		PieItem item( typeName, value, color, (void *)i );
		items.Append( item );
	}

	items.Sort();

	
	DoPieChart( items, " s" );

	
	DoTableStart();
	Write( "<tr><th width=80>Type</th><th width=80>Time</th><th width=80>Processed</th><th width=80>Built</th><th width=80>Cache Hits</th></tr>\n" );
	for ( size_t i=0; i < items.GetSize(); ++i )
	{
		Node::Type type = (Node::Type)(size_t)items[ i ].userData;
		const FBuildStats::Stats & nodeStats = stats.GetStatsFor( type );
		if ( nodeStats.m_NumProcessed == 0 )
		{
			continue;
		}

		const char * typeName = Node::GetTypeName( type );
		const float value = (float)( (double)nodeStats.m_ProcessingTimeMS / (double)1000 );
		const uint32_t processed = nodeStats.m_NumProcessed;
		const uint32_t built = nodeStats.m_NumBuilt;
		const uint32_t cacheHits = nodeStats.m_NumCacheHits;

		Write( "<tr><td>%s</td><td>%2.3fs</td><td>%u</td><td>%u</td>", 
					typeName, 
					value, 
					processed, 
					built, 
					cacheHits );
		if ( type == Node::OBJECT_NODE )
		{
			
			Write( "<td>%u</td></tr>\n", cacheHits );
		}
		else
		{
			
			Write( "<td>-</td></tr>\n" );
		}
	}
	DoTableStop();
}



void Report::DoCPUTimeByItem( const FBuildStats & stats )
{
	DoSectionTitle( "CPU Time by Item", "cpuTimeByItem" );

	DoTableStart();

	
	Write( "<tr><th style=\"width:100px;\">Time</th><th style=\"width:100px;\">Type</th><th>Name</th></tr>\n" );

	size_t numOutput = 0;

	
	const Array< const Node * > & nodes = stats.GetNodesByTime();
	for ( const Node ** it = nodes.Begin();
		  it != nodes.End();
		  ++ it )
	{
		const Node * node = *it;
		float time = ( (float)node->GetProcessingTime() * 0.001f ); 
		const char * type = node->GetTypeName();
		const char * name = node->GetName().Get();

		
		if ( numOutput == 10 )
		{
			DoToggleSection( (uint32_t)nodes.GetSize() - 10 );
		}

		Write( ( numOutput == 10 ) ? "<tr></tr><tr><td style=\"width:100px;\">%2.3fs</td><td style=\"width:100px;\">%s</td><td>%s</td></tr>\n"
								   : "<tr><td>%2.3fs</td><td>%s</td><td>%s</td></tr>\n", time, type, name );
		numOutput++;
	}

	DoTableStop();

	if ( numOutput > 10 )
	{
		Write( "</details>\n" );
	}
}



void Report::DoCPUTimeByLibrary()
{
	DoSectionTitle( "CPU Time by Library", "cpuTimeByLibrary" );

	DoTableStart();

	
	uint32_t total = 0;
	const LibraryStats * const *  end = m_LibraryStats.End();
	for ( LibraryStats ** it = m_LibraryStats.Begin(); it != end; ++it )
	{
		total += ( *it )->cpuTimeMS;
	}
	if ( total == 0 )
	{
		Write( "No libraries built.\n" );
		return;
	}

	
	Write( "<tr><th style=\"width:80px;\">Time</th><th style=\"width:50px;\">%%</th><th style=\"width:70px;\">Obj Built</th><th style=\"width:50px;\">Type</th><th>Name</th></tr>\n" );

	const float totalS = (float)( (double)total * 0.001 );
	size_t numOutput( 0 );
	
	for ( LibraryStats ** it = m_LibraryStats.Begin(); it != end; ++it )
	{
		const LibraryStats & ls = *( *it );
		if ( ls.cpuTimeMS == 0 )
		{
			continue;
		}

		
		if ( numOutput == 10 )
		{
			DoToggleSection();
		}

		const uint32_t objCount = ls.objectCount_OutOfDate;
		const float time = ( (float)ls.cpuTimeMS * 0.001f ); 
		const float perc = (float)( (double)time / (double)totalS * 100 );
		const char * type = "??";
		switch ( ls.library->GetType() )
		{
			case Node::LIBRARY_NODE: type = "Static"; break;
			case Node::DLL_NODE: type = "DLL"; break;
			case Node::CS_NODE: type = "C# DLL"; break;
			default: do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp", 629 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
		}
		const char * name = ls.library->GetName().Get();
		Write( ( numOutput == 10 ) ? "<tr></tr><tr><td style=\"width:80px;\">%2.3fs</td><td style=\"width:50px;\">%2.1f</td><td style=\"width:70px;\">%u</td><td style=\"width:50px;\">%s</td><td>%s</td></tr>\n"
								   : "<tr><td>%2.3fs</td><td>%2.1f</td><td>%u</td><td>%s</td><td>%s</td></tr>\n",
										time, perc, objCount, type, name );
		numOutput++;
	}

	DoTableStop();

	if ( numOutput > 10 )
	{
		Write( "</details>\n" );
	}
}



__pragma(warning(push)) __pragma(warning(disable:6262)) 
void Report::DoIncludes()
{
	DoSectionTitle( "Includes", "includes" );

	size_t numLibsOutput = 0;

	
	const LibraryStats * const * end = m_LibraryStats.End();
	for ( LibraryStats ** it = m_LibraryStats.Begin(); it != end; ++it )
	{
		if ( ( *it )->objectCount_OutOfDate == 0 )
		{
			continue;
		}

		
		const Node * library = ( *it )->library;
		IncludeStatsMap incStatsMap;
		GetIncludeFilesRecurse( incStatsMap, library );

		
		Array< const IncludeStats * > incStats( 10 * 1024, true );
		incStatsMap.Flatten( incStats );
		incStats.SortDeref();

		Write( "<h3>%s</h3>\n", library->GetName().Get() );
		numLibsOutput++;

		if ( incStats.GetSize() == 0 )
		{
			Write( "No inludes.\n" );
			continue;
		}

		DoTableStart();
		Write( "<tr><th style=\"width:80px;\">Objects</th><th style=\"width:80px;\">Included</td><th style=\"width:60px;\">PCH</th><th>Name</th></tr>\n" );

		const uint32_t numObjects = ( *it )->objectCount;

		
		const size_t numIncludes = incStats.GetSize();
		size_t numOutput = 0;
		for ( size_t i=0; i<numIncludes; ++i )
		{
			const IncludeStats & s = *incStats[ i ];
			const char * fileName = s.node->GetName().Get();
			const uint32_t included = s.count;
			const bool inPCH = s.inPCH;

			
			if ( numOutput == 10 )
			{
				DoToggleSection( numIncludes - 10 );
			}

			Write( ( numOutput == 10 ) ? "<tr></tr><tr><td style=\"width:80px;\">%u</td><td style=\"width:80px;\">%u</td><td style=\"width:60px;\">%s</td><td>%s</td></tr>\n"
									   : "<tr><td>%u</td><td>%u</td><td>%s</td><td>%s</td></tr>\n", 
						numObjects, 
						included, 
						inPCH ? "YES" : "no", 
						fileName );
			numOutput++;
		}

		DoTableStop();

		
		if ( numOutput > 10 )
		{
			Write( "</details>\n" );
		}
	}

	DoTableStop();

	if ( numLibsOutput == 0 )
	{
		Write( "No libraries built.\n" );
	}
}
__pragma(warning(pop)) 



void Report::DoPieChart( const Array< PieItem > & items, const char * units )
{
	AStackString<> buffer;

	uint32_t height = Math::Max< uint32_t >( 140, 40 + 25 * (uint32_t)items.GetSize() );

	m_NumPieCharts++;

	Write( "<section>\n" );
	Write( "<div>\n" );
	Write( "<canvas id=\"canvas%u\" width=\"500\" height=\"%u\">\n", m_NumPieCharts, height );
	Write( "HTML5 Canvas support required.\n" );
	Write( "</canvas>\n" );
	Write( "</div>\n" );

	Write( "<script type=\"text/javascript\">\n" );
	Write( "	var myData = [" );
	for ( size_t i=0; i<items.GetSize(); ++i )
	{
		if ( i > 0 )
		{
			Write( "," );
		}
		buffer.Format( "%2.3f", items[ i ].value );
		Write( buffer.Get() );
	}
	Write( "];\n" );
	Write( "	var myLabels = [" );
	for ( size_t i=0; i<items.GetSize(); ++i )
	{
		if ( i > 0 )
		{
			Write( "," );
		}
		Write( "\"%s\"", items[ i ].label );
	}
	Write( "];\n" );
	Write( "	var myColors = [" );
	for ( size_t i=0; i<items.GetSize(); ++i )
	{
		if ( i > 0 )
		{
			Write( "," );
		}
		Write( "\"#%x\"", items[ i ].color );
	}
	Write( "];\n" );

	Write( "	plotData(\"canvas%u\",myData,myLabels,myColors,\"%s\");\n", m_NumPieCharts, units );
	Write( "</script>\n" );
	Write( "</section>\n" );
}



void Report::CreateFooter()
{
	const char * footer = 
		"<br><br><br>\n"
		"</body>\n"
		"</html>\n";
	m_Output += footer;
}



void Report::DoSectionTitle( const char * sectionName, const char * sectionId )
{
	Write( "<h2 id=\"%s\">%s</h2>\n", sectionId, sectionName );
}



void Report::DoTableStart( int width, const char * id, bool hidden )
{
	AStackString<> output;
	output.Format( "<table width=%u", width );
	if ( id )
	{
		output += " id=\"";
		output += id;
		output += "\"";
	}
	if ( hidden )
	{
		output += " style=\"display:none;\"";
	}
	output += ">\n";
	Write( output.Get() );
}



void Report::DoTableStop()
{
	Write( "</table>\n" );
}



void Report::DoToggleSection( size_t numMore )
{
	static int tableId = 0;
	++tableId;
	AStackString<> tableIdStr;
	tableIdStr.Format( "table%u", tableId );

	DoTableStop();
	AStackString<> more;
	if ( numMore )
	{
		more.Format( "%u ", (uint32_t)numMore );
	}
	Write( "<a href='javascript:toggleTable(\"%s\");'>%sMore...</a>\n", tableIdStr.Get(), more.Get() );
	DoTableStart( DEFAULT_TABLE_WIDTH, tableIdStr.Get(), true ); 
}



void Report::Write( const char * fmtString, ... )
{
	AStackString< 1024 > tmp;

	va_list args;
	( __va_start(&args, fmtString) );
	tmp.VFormat( fmtString, args );
	( args = (va_list)0 );

	
	if ( m_Output.GetLength() + tmp.GetLength() > m_Output.GetReserved() )
	{
		m_Output.SetReserved( m_Output.GetReserved() + (1024 * 1024) );
	}

	m_Output += tmp;
}



void Report::GetLibraryStats(  const FBuildStats & stats )
{
	
	GetLibraryStatsRecurse( m_LibraryStats, stats.GetRootNode(), nullptr );
	m_LibraryStats.SortDeref();
}



void Report::GetLibraryStatsRecurse( Array< LibraryStats * > & libStats, const Node * node, LibraryStats * currentLib ) const
{
	
	if ( node->GetStatFlag( Node::STATS_REPORT_PROCESSED ) )
	{
		return;
	}
	node->SetStatFlag( Node::STATS_REPORT_PROCESSED );

	Node::Type type = node->GetType();

	
	if ( type == Node::OBJECT_NODE )
	{
		if ( currentLib == nullptr )
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp", 897 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			return;
		}

		currentLib->objectCount++;

		bool cacheHit = node->GetStatFlag( Node::STATS_CACHE_HIT );
		bool cacheMiss = node->GetStatFlag( Node::STATS_CACHE_MISS );
		if ( cacheHit || cacheMiss )
		{
			currentLib->objectCount_Cacheable++;

			if ( cacheHit )
			{
				currentLib->objectCount_CacheHits++;
			}
			if ( node->GetStatFlag( Node::STATS_CACHE_STORE ) )
			{
				currentLib->objectCount_CacheStores++;
			}
		}

		if ( cacheHit || cacheMiss || node->GetStatFlag( Node::STATS_BUILT ) )
		{
			currentLib->objectCount_OutOfDate++;
			currentLib->cpuTimeMS += node->GetProcessingTime();
		}

		return; 
	}	

	bool isLibrary = false;
	switch ( type )
	{
		case Node::DLL_NODE:		isLibrary = true; break;
		case Node::LIBRARY_NODE:	isLibrary = true; break;
		case Node::OBJECT_LIST_NODE: isLibrary = true; break;
		case Node::CS_NODE:
		{
			isLibrary = node->GetName().EndsWithI( ".dll" ); 
			break;
		}
		default: break; 
	}

	if ( isLibrary )
	{
		currentLib = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\Report.cpp", 944 ) LibraryStats;
		currentLib->library = node;
		currentLib->cpuTimeMS = 0;
		currentLib->objectCount = 0;
		currentLib->objectCount_OutOfDate = 0;
		currentLib->objectCount_Cacheable = 0;
		currentLib->objectCount_CacheHits = 0;
		currentLib->objectCount_CacheStores = 0;

		
		if ( node->GetStatFlag( Node::STATS_BUILT ) )
		{
			currentLib->cpuTimeMS += node->GetProcessingTime();
		}

		libStats.Append( currentLib );

		
	}

	
	GetLibraryStatsRecurse( libStats, node->GetPreBuildDependencies(), currentLib );
	GetLibraryStatsRecurse( libStats, node->GetStaticDependencies(), currentLib );
	GetLibraryStatsRecurse( libStats, node->GetDynamicDependencies(), currentLib );
}



void Report::GetLibraryStatsRecurse( Array< LibraryStats * > & libStats, const Dependencies & dependencies, LibraryStats * currentLib ) const
{
	const Dependency * const end = dependencies.End();
	for ( const Dependency * it = dependencies.Begin(); it != end; ++it )
	{
		GetLibraryStatsRecurse( libStats, it->GetNode(), currentLib );
	}
}



void Report::GetIncludeFilesRecurse( IncludeStatsMap & incStats, const Node * node ) const
{
	Node::Type type = node->GetType();
	if ( type == Node::OBJECT_NODE )
	{
		
		const Dependencies & dynamicDeps = node->GetDynamicDependencies();
		const Dependency * const end = dynamicDeps.End();
		for ( const Dependency * it = dynamicDeps.Begin(); it != end; ++it )
		{
			AddInclude( incStats, it->GetNode(), node );
		}

		return;
	}

	
	const Dependencies & staticDeps = node->GetStaticDependencies();
	const Dependency * end = staticDeps.End();
	for ( const Dependency * it = staticDeps.Begin(); it != end; ++it )
	{
		GetIncludeFilesRecurse( incStats, it->GetNode() );
	}

	
	const Dependencies & dynamicDeps = node->GetDynamicDependencies();
	end = dynamicDeps.End();
	for ( const Dependency * it = dynamicDeps.Begin(); it != end; ++it )
	{
		GetIncludeFilesRecurse( incStats, it->GetNode() );
	}
}



void Report::AddInclude( IncludeStatsMap & incStats, const Node * node, const Node * parentNode ) const
{
	bool isHeaderInPCH = false;
	if ( parentNode->GetType() == Node::OBJECT_NODE )
	{
		const ObjectNode * obj = parentNode->CastTo< ObjectNode >();
		isHeaderInPCH = obj->IsCreatingPCH();
	}

	
	IncludeStats * stats = incStats.Find( node );
	if ( stats == nullptr )
	{
		stats = incStats.Insert( node );
	}

	stats->count++;
	stats->inPCH |= isHeaderInPCH;
}



Report::IncludeStatsMap::IncludeStatsMap()
	: m_Pool( sizeof( IncludeStats ), __alignof( IncludeStats ) )
{
	memset( m_Table, 0, sizeof( m_Table ) );
}



Report::IncludeStatsMap::~IncludeStatsMap()
{
	for ( size_t i=0; i<65536; ++i )
	{
		IncludeStats * item = m_Table[ i ];
		while ( item )
		{
			IncludeStats * next = item->m_Next;
			m_Pool.Free( item );
			item = next;
		}
	}
}



Report::IncludeStats * Report::IncludeStatsMap::Find( const Node * node ) const
{
	
	uint32_t hash = node->GetNameCRC();
	uint32_t key = ( hash & 0xFFFF );
	IncludeStats * item = m_Table[ key ];

	
	while ( item )
	{
		if ( item->node == node )
		{
			return item;
		}
		item = item->m_Next;
	}

	
	return nullptr;
}



Report::IncludeStats * Report::IncludeStatsMap::Insert( const Node * node )
{
	
	uint32_t hash = node->GetNameCRC();
	uint32_t key = ( hash & 0xFFFF );

	
	IncludeStats * newStats = (IncludeStats *)m_Pool.Alloc( sizeof( IncludeStats ) );
	newStats->node = node;
	newStats->count = 0;
	newStats->inPCH = false;
	newStats->m_Next = m_Table[ key ];
	m_Table[ key ] = newStats;

	return newStats;
}



void Report::IncludeStatsMap::Flatten( Array< const IncludeStats * > & stats ) const
{
	for ( size_t i=0; i<65536; ++i )
	{
		IncludeStats * item = m_Table[ i ];
		while ( item )
		{
			IncludeStats * next = item->m_Next;
			stats.Append( item );
			item = next;
		}
	}
}



#line 157 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/ResponseFile.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ResponseFile.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ResponseFile.cpp"













ResponseFile::ResponseFile()
	: m_EscapeSlashes( false )
{
}



ResponseFile::~ResponseFile()
{
	if ( m_ResponseFilePath.IsEmpty() == false )
	{
		FileIO::FileDelete( m_ResponseFilePath.Get() );
	}
}



bool ResponseFile::Create( const AString & contents )
{
	if ( m_EscapeSlashes )
	{
		AStackString< 1024 > fixed;
		if ( contents.GetLength() > 512 )
		{
			fixed.SetReserved( contents.GetLength() * 2 );
		}
		const char * it = contents.Get();
		const char * end = contents.GetEnd();
		char * dst = fixed.Get();
		while ( it != end )
		{
			char c = *it;
			if ( ( c == ( '\\' ) ) || ( c == ( '/' ) ) )
			{
				*dst = ( '\\' ); dst++;
				*dst = ( '\\' ); dst++;
			}
			else
			{
				*dst = c; dst++;
			}			
			it++;
		}
		fixed.SetLength( (uint32_t)( dst - fixed.Get() ) );

		return CreateInternal( fixed );
	}

	return CreateInternal( contents );
}



bool ResponseFile::CreateInternal( const AString & contents )
{
	
	WorkerThread::CreateTempFilePath( "args.rsp", m_ResponseFilePath );

	
	const uint32_t flags = FileStream::WRITE_ONLY		
						 | FileStream::TEMP;			
	if ( !m_File.Open( m_ResponseFilePath.Get(), flags ) )
	{
		do { FLog::Error( "Failed to create response file '%s'",m_ResponseFilePath.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false; 
	}

	bool ok = ( m_File.Write( contents.Get(), contents.GetLength() ) == contents.GetLength() );
	if ( !ok )
	{
		do { FLog::Error( "Failed to write response file '%s'",m_ResponseFilePath.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}

	m_File.Close(); 

	return ok;
}


#line 160 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/ToolManifest.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp"









#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/MemoryStream.h"


#pragma once









class MemoryStream : public IOStream
{
public:
	explicit MemoryStream();
	explicit MemoryStream( size_t initialBufferSize, size_t minGrowth = 4096 );
	~MemoryStream();

	
	inline const void * GetData() const { return (void *)m_Begin; }
	inline size_t		GetSize() const { return ( m_End - m_Begin ); } 

	
	virtual uint64_t ReadBuffer( void * buffer, uint64_t bytesToRead );
	virtual uint64_t WriteBuffer( const void * buffer, uint64_t bytesToWrite );
	virtual void Flush();

	
	virtual uint64_t Tell() const;
	virtual bool Seek( uint64_t pos ) const;
	virtual uint64_t GetFileSize() const;

private:
	__declspec( noinline ) void GrowToAccomodate( uint64_t bytesToAccomodate );

	char *			m_Begin;
	char *			m_End;
	char *			m_MaxEnd;
	size_t			m_MinGrowth;
};


#line 45 "c:\\Users\\Franta\\p4\\Code\\Core/FileIO/MemoryStream.h"
#line 17 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp"











ToolManifest::File::File( const AString & name, uint64_t stamp, uint32_t hash, const Node * node, uint32_t size ) 
	: m_Name( name ), 
	m_TimeStamp( stamp ), 
	m_Hash( hash ), 
	m_ContentSize( size ), 
	m_Node( node ), 
	m_Content( nullptr ), 
	m_SyncState( NOT_SYNCHRONIZED ),
	m_FileLock( nullptr )
{}



ToolManifest::File::~File()
{ 
	::Free( m_Content );
	delete( m_FileLock );
}



ToolManifest::ToolManifest()
	: m_ToolId( 0 )
	, m_TimeStamp( 0 )
	, m_Files( 0, true )
	, m_Synchronized( false )
	, m_RemoteEnvironmentString( nullptr )
	, m_UserData( nullptr )
{
}



ToolManifest::ToolManifest( uint64_t toolId )
	: m_ToolId( toolId )
	, m_TimeStamp( 0 )
	, m_Files( 0, true )
	, m_Synchronized( false )
	, m_RemoteEnvironmentString( nullptr )
	, m_UserData( nullptr )
{
}



ToolManifest::~ToolManifest()
{
	::Free( (void *)m_RemoteEnvironmentString );
}



bool ToolManifest::Generate( const Node * mainExecutable, const Dependencies & dependencies )
{
	m_Files.Clear();
	m_TimeStamp = 0;
	m_Files.SetCapacity( 1 + dependencies.GetSize() );

	
	
	AddFile( mainExecutable );
	for ( size_t i=0; i<dependencies.GetSize(); ++i )
	{
		const FileNode & n = *( dependencies[ i ].GetNode()->CastTo< FileNode >() );
		if ( !AddFile( &n ) )
		{
			return false; 
		}
	}

	
	const size_t numFiles( m_Files.GetSize() );
	const size_t memSize( numFiles * sizeof( uint32_t ) * 2 );
	uint32_t * mem = (uint32_t *)::AllocFileLine( memSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 101 );
	uint32_t * pos = mem;
	for ( size_t i=0; i<numFiles; ++i )
	{
		const File & f = m_Files[ i ];

		
		*pos = f.m_Hash;
		++pos;

		
		AStackString<> relativePath;
		GetRemoteFilePath( (uint32_t)i, relativePath, false ); 
		*pos = Murmur3::Calc32( relativePath );
		++pos;
	}
	uint64_t hashA, hashB;
	hashA = Murmur3::Calc128( mem, memSize, hashB );
	m_ToolId = hashA ^ hashB; 
	::Free( mem );

	
	for ( size_t i=0; i<numFiles; ++i )
	{
		const File & f = m_Files[ i ];
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( f.m_TimeStamp ) ) { if ( AssertHandler::Failure( "f.m_TimeStamp", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 126 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		m_TimeStamp = Math::Max( m_TimeStamp, f.m_TimeStamp );
	}

	return true;
}



void ToolManifest::Serialize( IOStream & ms ) const
{
	ms.Write( m_ToolId );

	const uint32_t numItems( (uint32_t)m_Files.GetSize() );
	ms.Write( numItems );
	const size_t numFiles( m_Files.GetSize() );
	for ( size_t i=0; i<numFiles; ++i )
	{
		const File & f = m_Files[ i ];
		ms.Write( f.m_Name );
		ms.Write( f.m_TimeStamp );
		ms.Write( f.m_Hash );
		ms.Write( f.m_ContentSize );
	}
}



void ToolManifest::Deserialize( IOStream & ms )
{
	ms.Read( m_ToolId );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Files.IsEmpty() ) ) { if ( AssertHandler::Failure( "m_Files.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 158 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	uint32_t numFiles( 0 );
	ms.Read( numFiles );
	m_Files.SetCapacity( numFiles );

	for ( size_t i=0; i<(size_t)numFiles; ++i )
	{		
		AStackString<> name;
		uint64_t timeStamp( 0 );
		uint32_t hash( 0 );
		uint32_t contentSize( 0 );
		ms.Read( name );
		ms.Read( timeStamp );
		ms.Read( hash );
		ms.Read( contentSize );
		m_Files.Append( File( name, timeStamp, hash, nullptr, contentSize ) );
	}

	
	size_t numFilesAlreadySynchronized = 0;
	for ( size_t i=0; i<(size_t)numFiles; ++i )
	{
		AStackString<> localFile;
		GetRemoteFilePath( (uint32_t)i, localFile );

		
		AutoPtr< FileStream > fileStream( new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 185 ) FileStream );
		FileStream & f = *( fileStream.Get() );
		if ( f.Open( localFile.Get() ) == false )
		{
			continue; 
		}
		if ( f.GetFileSize() != m_Files[ i ].m_ContentSize )
		{
			continue; 
		}
		AutoPtr< char > mem( (char *)::AllocFileLine( (size_t)f.GetFileSize(), "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 195 ) );
		if ( f.Read( mem.Get(), (size_t)f.GetFileSize() ) != f.GetFileSize() )
		{
			continue; 
		}
		if( Murmur3::Calc32( mem.Get(), (size_t)f.GetFileSize() ) != m_Files[ i ].m_Hash )
		{
			continue; 
		}

		
		m_Files[ i ].m_FileLock = fileStream.Release(); 
		m_Files[ i ].m_SyncState = File::SYNCHRONIZED;
		numFilesAlreadySynchronized++;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_RemoteEnvironmentString == nullptr ) ) { if ( AssertHandler::Failure( "m_RemoteEnvironmentString == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 212 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	AStackString<> basePath;
	GetRemotePath( basePath );
	AStackString<> paths;
	paths.Format( "PATH=%s", basePath.Get() );

	
	AStackString<> normalTmp;
	Env::GetEnvVariable( "TMP", normalTmp );
	AStackString<> tmp;
	tmp.Format( "TMP=%s", normalTmp.Get() );

	
	AStackString<> sysRoot( "SystemRoot=C:\\Windows" );

	char * mem = (char *)::AllocFileLine( paths.GetLength() + 1 + tmp.GetLength() + 1 + sysRoot.GetLength() + 1 + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 232 );
#line 233 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp"
	m_RemoteEnvironmentString = mem;

	AString::Copy( paths.Get(), mem, paths.GetLength() + 1 ); 
	mem += ( paths.GetLength() + 1 ); 

	AString::Copy( tmp.Get(), mem, tmp.GetLength() + 1 ); 
	mem += ( tmp.GetLength() + 1 ); 

	AString::Copy( sysRoot.Get(), mem, sysRoot.GetLength() + 1 ); 
	mem += ( sysRoot.GetLength() + 1 ); 

	*mem = 0; ++mem; 

	
	if ( numFilesAlreadySynchronized == m_Files.GetSize() )
	{
		m_Synchronized = true;		
	}
}



bool ToolManifest::GetSynchronizationStatus( uint32_t & syncDone, uint32_t & syncTotal ) const
{
	syncDone = 0;
	syncTotal = 0;
	bool synching = false;

	MutexHolder mh( m_Mutex );

	
	const File * const end = m_Files.End();
	for ( const File * it = m_Files.Begin(); it != end; ++it )
	{
		syncTotal += it->m_ContentSize;
		if ( it->m_SyncState == File::SYNCHRONIZED )
		{
			syncDone += it->m_ContentSize;
		}
		else if ( it->m_SyncState == File::SYNCHRONIZING )
		{
			synching = true;
		}
	}

	return synching;
}



void ToolManifest::CancelSynchronizingFiles()
{
	MutexHolder mh( m_Mutex );

	bool atLeastOneFileCancelled = false;

	
	File * const end = m_Files.End();
	for ( File * it = m_Files.Begin(); it != end; ++it )
	{
		if ( it->m_SyncState == File::SYNCHRONIZING )
		{
			it->m_SyncState = File::NOT_SYNCHRONIZED;
			atLeastOneFileCancelled = true;
		}
	}

	
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( atLeastOneFileCancelled ) ) { if ( AssertHandler::Failure( "atLeastOneFileCancelled", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 302 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	(void)atLeastOneFileCancelled;
}



const void * ToolManifest::GetFileData( uint32_t fileId, size_t & dataSize ) const
{
	const File & f = m_Files[ fileId ];
	if ( f.m_Content == nullptr )
	{
		if ( !LoadFile( f.m_Name, f.m_Content, f.m_ContentSize ) )
		{
			return nullptr;
		}
	}
	dataSize = f.m_ContentSize;
	return f.m_Content;
}



bool ToolManifest::ReceiveFileData( uint32_t fileId, const void * data, size_t & dataSize )
{
	MutexHolder mh( m_Mutex );

	File & f = m_Files[ fileId ];

	
	if ( f.m_Content )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( f.m_SyncState == File::SYNCHRONIZED ) ) { if ( AssertHandler::Failure( "f.m_SyncState == File::SYNCHRONIZED", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 333 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		return true;
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( f.m_SyncState == File::SYNCHRONIZING ) ) { if ( AssertHandler::Failure( "f.m_SyncState == File::SYNCHRONIZING", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 337 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	AStackString<> fileName;
	GetRemoteFilePath( fileId, fileName );

	
	AStackString<> pathOnly( fileName.Get(), fileName.FindLast( ( '\\' ) ) );
	if ( !FileIO::EnsurePathExists( pathOnly ) )
	{
		return false; 
	}

	
	FileStream fs;
	if ( !fs.Open( fileName.Get(), FileStream::WRITE_ONLY ) )
	{
		return false; 
	}
	if ( fs.Write( data, dataSize ) != dataSize )
	{
		return false; 
	}
	fs.Close();

	
	AutoPtr< FileStream > fileStream( new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 363 ) FileStream );
	if ( fileStream.Get()->Open( fileName.Get(), FileStream::READ_ONLY ) == false )
	{
		return false; 
	}

	
	f.m_FileLock = fileStream.Release(); 
	f.m_SyncState = File::SYNCHRONIZED;

	
	const File * const end = m_Files.End();
	for ( const File * it = m_Files.Begin(); it != end; ++it )
	{
		if ( it->m_SyncState != File::SYNCHRONIZED )
		{
			
			return true; 
		}
	}

	
	m_Synchronized = true;
	return true; 
}



void ToolManifest::GetRemoteFilePath( uint32_t fileId, AString & exe, bool fullPath ) const
{
	
	if ( fullPath )
	{
		GetRemotePath( exe );
	}
	else
	{
		exe.Clear();
	}

	
	const File & primaryFile = m_Files[ 0 ];
	AStackString<> primaryPath( primaryFile.m_Name.Get(), primaryFile.m_Name.FindLast( ( '\\' ) ) + 1 ); 

	const File & f = m_Files[ fileId ];
	if ( f.m_Name.BeginsWithI( primaryPath ) )
	{
		
		exe += ( f.m_Name.Get() + primaryPath.GetLength() );
	}
	else
	{
		
		const char * lastSlash = f.m_Name.FindLast( ( '\\' ) );
		lastSlash = lastSlash ? lastSlash + 1 : f.m_Name.Get();
		exe += AStackString<>( lastSlash, f.m_Name.GetEnd() );
	}
}



void ToolManifest::GetRemotePath( AString & path ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FileIO::GetTempDir( path ) ) ) { if ( AssertHandler::Failure( "FileIO::GetTempDir( path )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 426 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AStackString<> subDir;
    
        subDir.Format( ".fbuild.tmp\\worker\\toolchain.%016llx\\", m_ToolId );
    

#line 433 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp"
	path += subDir;
}



bool ToolManifest::AddFile( const Node * node )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node->IsAFile() ) ) { if ( AssertHandler::Failure( "node->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 440 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	uint32_t contentSize( 0 );
	void * content( nullptr );
	if ( !LoadFile( node->GetName(), content, contentSize ) )
	{
		return false; 
	}

	
	const AString & name = node->GetName();
	const uint64_t timeStamp = node->GetStamp();
	const uint32_t hash = Murmur3::Calc32( content, contentSize );
	m_Files.Append( File(name, timeStamp, hash, node, contentSize ) );

	
	
	File & f = m_Files.Top();
	f.m_Content = content;

	return true;
}



bool ToolManifest::LoadFile( const AString & fileName, void * & content, uint32_t & contentSize ) const
{
	
	FileStream fs;
	if ( fs.Open( fileName.Get(), FileStream::READ_ONLY ) == false )
	{
		do { FLog::Error( "Error opening file '%s' in Compiler ToolManifest\n",fileName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	contentSize = (uint32_t)fs.GetFileSize();
	AutoPtr< void > mem( ::AllocFileLine( contentSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\ToolManifest.cpp", 475 ) );
	if ( fs.Read( mem.Get(), contentSize ) != contentSize )
	{
		do { FLog::Error( "Error reading file '%s' in Compiler ToolManifest\n",fileName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	content = mem.Release();
	return true;
}


#line 163 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Helpers/VSProjectGenerator.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp"














VSProjectGenerator::VSProjectGenerator()
	: m_BasePaths( 0, true )
	, m_AllowedFileExtensions( 0, true )
	, m_References( 0, true )
	, m_ProjectReferences( 0, true )
	, m_Files( 1024, true )
{
}



VSProjectGenerator::~VSProjectGenerator()
{
}



void VSProjectGenerator::SetBasePaths( const Array< AString > & paths )
{
	m_BasePaths = paths;
}



void VSProjectGenerator::AddFile( const AString & file, bool filterByExtension )
{
	
	AStackString<> fileCopy( file );
	fileCopy.Replace( ( '/' ), ( '\\' ) );

	
	size_t numAllowedFileExtensions = m_AllowedFileExtensions.GetSize();
	if ( filterByExtension && numAllowedFileExtensions )
	{
		bool keep = false;
		for ( size_t i=0; i<numAllowedFileExtensions; ++i )
		{
			if ( file.EndsWithI( m_AllowedFileExtensions[ i ] ) )
			{
				keep = true;
				break;
			}
		}
		if ( !keep )
		{
			return;
		}
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_Files.Find( fileCopy ) ) ) { if ( AssertHandler::Failure( "!m_Files.Find( fileCopy )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp", 70 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_Files.Append( fileCopy );
}



void VSProjectGenerator::AddFiles( const Array< AString > & files, bool filterByExtension )
{
	const AString * const fEnd = files.End();
	for ( const AString * fIt = files.Begin(); fIt!=fEnd; ++fIt )
	{
		AddFile( *fIt, filterByExtension );
	}
}



const AString & VSProjectGenerator::GenerateVCXProj( const AString & projectFile,
													 const Array< VSProjectConfig > & configs,
													 const Array< VSProjectFileType > & fileTypes )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_ProjectName.IsEmpty() ) ) { if ( AssertHandler::Failure( "!m_ProjectName.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp", 91 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	m_Tmp.SetReserved( (1024 * 1024) );
	m_Tmp.SetLength( 0 );

	
	const char * lastSlash = projectFile.FindLast( ( '\\' ) );
	AStackString<> projectBasePath( projectFile.Get(), lastSlash ? lastSlash + 1 : projectFile.Get() );

	
	Write( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" );
	Write( "<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n" );

	
	{
		Write( "  <ItemGroup Label=\"ProjectConfigurations\">\n" );
		const VSProjectConfig * const cEnd = configs.End();
		for ( const VSProjectConfig * cIt = configs.Begin(); cIt!=cEnd; ++cIt )
		{
			Write( "    <ProjectConfiguration Include=\"%s|%s\">\n", cIt->m_Config.Get(), cIt->m_Platform.Get() );
			Write( "      <Configuration>%s</Configuration>\n", cIt->m_Config.Get() );
			Write( "      <Platform>%s</Platform>\n", cIt->m_Platform.Get() );
			Write( "    </ProjectConfiguration>\n" );
		}
		Write( "  </ItemGroup>\n" );
	}

	
	{
		Write("  <ItemGroup>\n" );
		const AString * const fEnd = m_Files.End();
		for ( const AString * fIt = m_Files.Begin(); fIt!=fEnd; ++fIt )
		{
			const char * fileName = fIt->BeginsWithI( projectBasePath ) ? fIt->Get() + projectBasePath.GetLength() : fIt->Get();
			const char * fileType = nullptr;
			const VSProjectFileType * const end = fileTypes.End();
			for ( const VSProjectFileType * it=fileTypes.Begin(); it!=end; ++it )
			{
				if ( AString::MatchI( it->m_Pattern.Get(), fileName ) )
				{
					fileType = it->m_FileType.Get();
					break;
				}
			}
			if ( fileType )
			{
			    Write( "    <CustomBuild Include=\"%s\">\n", fileName );
			    Write( "        <FileType>%s</FileType>\n", fileType );
			    Write( "    </CustomBuild>\n" );
			}
			else
			{
			    Write( "    <CustomBuild Include=\"%s\" />\n", fileName );
			}
		}
		Write("  </ItemGroup>\n" );
	}

	
	{
		Write("  <ItemGroup>\n" );
		{
			
			const AString * const end = m_ProjectReferences.End();
			for ( const AString *  it = m_ProjectReferences.Begin(); it != end; ++it )
			{
				AStackString<> proj( *it );
				const char * pipe = proj.Find( '|' );
				if ( pipe )
				{
					proj.SetLength( (uint32_t)( pipe - proj.Get() ) );
					AStackString<> guid( pipe + 1 );
					Write( "    <ProjectReference Include=\"%s\">\n", proj.Get() );
					Write( "      <Project>%s</Project>\n", guid.Get() );
					Write( "    </ProjectReference>\n" );
				}
				else
				{
					Write( "    <ProjectReference Include=\"%s\" />\n", proj.Get() );
				}
			}
		}
		{
			
			const AString * const end = m_References.End();
			for ( const AString * it = m_References.Begin(); it != end; ++it )
			{
			    Write( "    <Reference Include=\"%s\" />\n", it->Get() );
			}
		}
		Write("  </ItemGroup>\n" );
	}

	
	AStackString<> guid;
	if ( m_ProjectGuid.IsEmpty() )
	{
		guid.Format( "{%08x-6c94-4f93-bc2a-7f5284b7d434}", CRC32::Calc( m_ProjectName ) );
	}
	else
	{
		guid = m_ProjectGuid;
	}

	
	Write( "  <PropertyGroup Label=\"Globals\">\n" );
	WritePGItem( "RootNamespace", m_RootNamespace );
	WritePGItem( "ProjectGuid", guid );
	WritePGItem( "DefaultLanguage", m_DefaultLanguage );
    WritePGItem( "Keyword", AStackString<>( "MakeFileProj" ) );
	WritePGItem( "ApplicationEnvironment", m_ApplicationEnvironment );
	Write( "  </PropertyGroup>\n" );

	
	Write( "  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n" );

	
	{
		const VSProjectConfig * const cEnd = configs.End();
		for ( const VSProjectConfig * cIt = configs.Begin(); cIt!=cEnd; ++cIt )
		{
			Write( "  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='%s|%s'\" Label=\"Configuration\">\n", cIt->m_Config.Get(), cIt->m_Platform.Get() );
			Write( "    <ConfigurationType>Makefile</ConfigurationType>\n" );
			Write( "    <UseDebugLibraries>false</UseDebugLibraries>\n" );

			WritePGItem( "PlatformToolset",					cIt->m_PlatformToolset );
			WritePGItem( "LocalDebuggerCommandArguments",	cIt->m_LocalDebuggerCommandArguments );
			WritePGItem( "LocalDebuggerCommand",			cIt->m_LocalDebuggerCommand );
			WritePGItem( "LocalDebuggerEnvironment",		cIt->m_LocalDebuggerEnvironment );

			Write( "  </PropertyGroup>\n" );
		}
	}

	
	{
		Write( "  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n" );
		Write( "  <ImportGroup Label=\"ExtensionSettings\">\n" );
		Write( "  </ImportGroup>\n" );
	}

	
	{
		const VSProjectConfig * const cEnd = configs.End();
		for ( const VSProjectConfig * cIt = configs.Begin(); cIt!=cEnd; ++cIt )
		{
			Write( "  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='%s|%s'\">\n", cIt->m_Config.Get(), cIt->m_Platform.Get() );
			Write( "    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n" );
			Write( "  </ImportGroup>\n" );
		}
	}

	
	Write( "  <PropertyGroup Label=\"UserMacros\" />\n" );

	
	{
		const VSProjectConfig * const cEnd = configs.End();
		for ( const VSProjectConfig * cIt = configs.Begin(); cIt!=cEnd; ++cIt )
		{
			Write( "  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='%s|%s'\">\n", cIt->m_Config.Get(), cIt->m_Platform.Get() );

			WritePGItem( "NMakeBuildCommandLine",			cIt->m_BuildCommand );
			WritePGItem( "NMakeReBuildCommandLine",			cIt->m_RebuildCommand );
			WritePGItem( "NMakeCleanCommandLine",			cIt->m_CleanCommand );
			WritePGItem( "NMakeOutput",						cIt->m_Output );
			WritePGItem( "NMakePreprocessorDefinitions",	cIt->m_PreprocessorDefinitions );
			WritePGItem( "NMakeIncludeSearchPath",			cIt->m_IncludeSearchPath );
			WritePGItem( "NMakeForcedIncludes",				cIt->m_ForcedIncludes );
			WritePGItem( "NMakeAssemblySearchPath",			cIt->m_AssemblySearchPath );
			WritePGItem( "NMakeForcedUsingAssemblies",		cIt->m_ForcedUsingAssemblies );
			WritePGItem( "AdditionalOptions",				cIt->m_AdditionalOptions );
			WritePGItem( "Xbox360DebuggerCommand",			cIt->m_Xbox360DebuggerCommand );
			WritePGItem( "DebuggerFlavor",					cIt->m_DebuggerFlavor );
			WritePGItem( "AumidOverride",					cIt->m_AumidOverride );
			WritePGItem( "LocalDebuggerWorkingDirectory",	cIt->m_LocalDebuggerWorkingDirectory );
			WritePGItem( "IntDir",							cIt->m_IntermediateDirectory );
			WritePGItem( "OutDir",							cIt->m_OutputDirectory );
			WritePGItem( "LayoutDir",						cIt->m_LayoutDir );
			WritePGItem( "LayoutExtensionFilter",			cIt->m_LayoutExtensionFilter );
			Write( "  </PropertyGroup>\n" );
		}
	}

	
	{
		const VSProjectConfig * const cEnd = configs.End();
		for ( const VSProjectConfig * cIt = configs.Begin(); cIt!=cEnd; ++cIt )
		{
			Write( "  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='%s|%s'\">\n", cIt->m_Config.Get(), cIt->m_Platform.Get() );
			Write( "    <BuildLog>\n" );
			Write( "      <Path />\n" );
			Write( "    </BuildLog>\n" );
			if ( ( !cIt->m_DeploymentType.IsEmpty() ) || ( !cIt->m_DeploymentFiles.IsEmpty() ) )
			{
				Write( "    <Deploy>\n" );
				WritePGItem( "DeploymentType",			cIt->m_DeploymentType );
				WritePGItem( "DeploymentFiles",			cIt->m_DeploymentFiles );
				Write( "    </Deploy>\n" );
			}
			Write( "  </ItemDefinitionGroup>\n" );
		}
	}

	
	Write("  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n" );
	Write("  <ImportGroup Label=\"ExtensionTargets\">\n" );
	Write("  </ImportGroup>\n" );
	Write("  <Import Condition=\"'$(ConfigurationType)' == 'Makefile' and Exists('$(VCTargetsPath)\\Platforms\\$(Platform)\\SCE.Makefile.$(Platform).targets')\" Project=\"$(VCTargetsPath)\\Platforms\\$(Platform)\\SCE.Makefile.$(Platform).targets\" />\n");
	Write( "</Project>" ); 

	m_OutputVCXProj = m_Tmp;
	return m_OutputVCXProj;
}



const AString & VSProjectGenerator::GenerateVCXProjFilters( const AString & projectFile )
{
	
	m_Tmp.SetReserved( (1024 * 1024) );
	m_Tmp.SetLength( 0 );

	
	const char * lastProjSlash = projectFile.FindLast( ( '\\' ) );
	AStackString<> projectBasePath( projectFile.Get(), lastProjSlash ? lastProjSlash + 1 : projectFile.Get() );

	
	Write( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" );
	Write( "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n" );

	
	Array< AString > folders( 1024, true );

	
	{
		Write( "  <ItemGroup>\n" );
		const AString * const fEnd = m_Files.End();
		for ( const AString * fIt = m_Files.Begin(); fIt!=fEnd; ++fIt )
		{
			
			AStackString<> folder;
			GetFolderPath( *fIt, folder );
			const char * fileName = fIt->BeginsWithI( projectBasePath ) ? fIt->Get() + projectBasePath.GetLength() : fIt->Get();
			Write( "    <CustomBuild Include=\"%s\">\n", fileName );
			if ( !folder.IsEmpty() )
			{
				Write( "      <Filter>%s</Filter>\n", folder.Get() );
			}
			Write( "    </CustomBuild>\n" );

			
			if ( !folder.IsEmpty() )
			{
				for (;;)
				{
					
					bool found = false;
					for ( const AString * it=folders.Begin(); it!=folders.End(); ++it )
					{
						if ( it->CompareI( folder ) == 0 )
						{
							found = true;
							break;
						}
					}
					if ( !found )
					{
						folders.Append( folder );
					}

					
					const char * lastSlash = folder.FindLast( ( '\\' ) );
					if ( lastSlash == nullptr )
					{
						break;
					}
					folder.SetLength( (uint32_t)( lastSlash - folder.Get() ) );
				}
			}
		}
		Write( "  </ItemGroup>\n" );
	}

	
	{
		const AString * const fEnd = folders.End();
		for ( const AString * fIt = folders.Begin(); fIt!=fEnd; ++fIt )
		{
			Write( "  <ItemGroup>\n" );
			Write( "    <Filter Include=\"%s\">\n", fIt->Get() );
			Write( "      <UniqueIdentifier>{%08x-6c94-4f93-bc2a-7f5284b7d434}</UniqueIdentifier>\n", CRC32::Calc( *fIt ) );
			Write( "    </Filter>\n" );
			Write( "  </ItemGroup>\n" );
		}
	}

	
	Write( "</Project>" ); 

	m_OutputVCXProjFilters = m_Tmp;
	return m_OutputVCXProjFilters;
}



void VSProjectGenerator::Write( const char * fmtString, ... )
{
	AStackString< 1024 > tmp;

	va_list args;
	( __va_start(&args, fmtString) );
	tmp.VFormat( fmtString, args );
	( args = (va_list)0 );

	
	if ( m_Tmp.GetLength() + tmp.GetLength() > m_Tmp.GetReserved() )
	{
		m_Tmp.SetReserved( m_Tmp.GetReserved() + (1024 * 1024) );
	}	

	m_Tmp += tmp;
}



void VSProjectGenerator::WritePGItem( const char * xmlTag, const AString & value )
{
	if ( value.IsEmpty() )
	{
		return;
	}
	Write( "    <%s>%s</%s>\n", xmlTag, value.Get(), xmlTag );
}



void VSProjectGenerator::GetFolderPath( const AString & fileName, AString & folder ) const
{
	const AString * const bEnd = m_BasePaths.End();
	for ( const AString * bIt = m_BasePaths.Begin(); bIt != bEnd; ++bIt )
	{
		const AString & basePath = *bIt;
		const char * begin = fileName.Get();
		const char * end = fileName.GetEnd();

		if ( fileName.BeginsWithI( basePath ) )
		{
			begin = fileName.Get() + basePath.GetLength();
			const char * lastSlash = fileName.FindLast( ( '\\' ) );
			end = ( lastSlash ) ? lastSlash : end;
			if ( begin < end )
			{
				folder.Assign( begin, end );
				return;
			}
		}
	}

	
	folder.Clear();
}



 void VSProjectConfig::Save( IOStream & stream, const Array< VSProjectConfig > & configs )
{
	uint32_t numConfigs = (uint32_t)configs.GetSize();
	stream.Write( numConfigs );
	for ( uint32_t i=0; i<numConfigs; ++i )
	{
		const VSProjectConfig & cfg = configs[ i ];

		stream.Write( cfg.m_Platform );
		stream.Write( cfg.m_Config );

		stream.Write( cfg.m_BuildCommand );
		stream.Write( cfg.m_RebuildCommand );
		stream.Write( cfg.m_CleanCommand );

		stream.Write( cfg.m_Output );
		stream.Write( cfg.m_PreprocessorDefinitions );
		stream.Write( cfg.m_IncludeSearchPath );
		stream.Write( cfg.m_ForcedIncludes );
		stream.Write( cfg.m_AssemblySearchPath );
		stream.Write( cfg.m_ForcedUsingAssemblies );
		stream.Write( cfg.m_AdditionalOptions );
		stream.Write( cfg.m_OutputDirectory );
		stream.Write( cfg.m_IntermediateDirectory );
		stream.Write( cfg.m_LayoutDir );
		stream.Write( cfg.m_LayoutExtensionFilter );
		stream.Write( cfg.m_Xbox360DebuggerCommand );
		stream.Write( cfg.m_DebuggerFlavor );
		stream.Write( cfg.m_AumidOverride );
		stream.Write( cfg.m_PlatformToolset );
		stream.Write( cfg.m_DeploymentType );
		stream.Write( cfg.m_DeploymentFiles );

		stream.Write( cfg.m_LocalDebuggerCommandArguments );
		stream.Write( cfg.m_LocalDebuggerWorkingDirectory );
		stream.Write( cfg.m_LocalDebuggerCommand );
		stream.Write( cfg.m_LocalDebuggerEnvironment );
	}
}



 bool VSProjectConfig::Load( IOStream & stream, Array< VSProjectConfig > & configs )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( configs.IsEmpty() ) ) { if ( AssertHandler::Failure( "configs.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp", 501 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	uint32_t numConfigs( 0 );
	if ( !stream.Read( numConfigs ) )
	{
		return false;
	}
	configs.SetSize( numConfigs );
	for ( uint32_t i=0; i<numConfigs; ++i )
	{
		VSProjectConfig & cfg = configs[ i ];

		if ( stream.Read( cfg.m_Platform ) == false ) { return false; }
		if ( stream.Read( cfg.m_Config ) == false ) { return false; }

		if ( stream.Read( cfg.m_BuildCommand ) == false ) { return false; }
		if ( stream.Read( cfg.m_RebuildCommand ) == false ) { return false; }
		if ( stream.Read( cfg.m_CleanCommand ) == false ) { return false; }

		if ( stream.Read( cfg.m_Output ) == false ) { return false; }
		if ( stream.Read( cfg.m_PreprocessorDefinitions ) == false ) { return false; }
		if ( stream.Read( cfg.m_IncludeSearchPath ) == false ) { return false; }
		if ( stream.Read( cfg.m_ForcedIncludes ) == false ) { return false; }
		if ( stream.Read( cfg.m_AssemblySearchPath ) == false ) { return false; }
		if ( stream.Read( cfg.m_ForcedUsingAssemblies ) == false ) { return false; }
		if ( stream.Read( cfg.m_AdditionalOptions ) == false ) { return false; }
		if ( stream.Read( cfg.m_OutputDirectory ) == false ) { return false; }
		if ( stream.Read( cfg.m_IntermediateDirectory ) == false ) { return false; }
		if ( stream.Read( cfg.m_LayoutDir ) == false ) { return false; }
		if ( stream.Read( cfg.m_LayoutExtensionFilter ) == false ) { return false; }
		if ( stream.Read( cfg.m_Xbox360DebuggerCommand ) == false ) { return false; }
		if ( stream.Read( cfg.m_DebuggerFlavor ) == false ) { return false; }
		if ( stream.Read( cfg.m_AumidOverride ) == false ) { return false; }
		if ( stream.Read( cfg.m_PlatformToolset ) == false ) { return false; }
		if ( stream.Read( cfg.m_DeploymentType ) == false ) { return false; }
		if ( stream.Read( cfg.m_DeploymentFiles ) == false ) { return false; }

		if ( stream.Read( cfg.m_LocalDebuggerCommandArguments ) == false ) { return false; }
		if ( stream.Read( cfg.m_LocalDebuggerWorkingDirectory ) == false ) { return false; }
		if ( stream.Read( cfg.m_LocalDebuggerCommand ) == false ) { return false; }
		if ( stream.Read( cfg.m_LocalDebuggerEnvironment ) == false ) { return false; }
	}
	return true;
}



 void VSProjectFileType::Save( IOStream & stream, const Array< VSProjectFileType > & fileTypes )
{
	uint32_t numFileTypes = (uint32_t)fileTypes.GetSize();
	stream.Write( numFileTypes );
	for ( uint32_t i=0; i<numFileTypes; ++i )
	{
		const VSProjectFileType & ft = fileTypes[ i ];

		stream.Write( ft.m_FileType );
		stream.Write( ft.m_Pattern );
	}
}



 bool VSProjectFileType::Load( IOStream & stream, Array< VSProjectFileType > & fileTypes )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( fileTypes.IsEmpty() ) ) { if ( AssertHandler::Failure( "fileTypes.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Helpers\\VSProjectGenerator.cpp", 565 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	uint32_t numFileTypes( 0 );
	if ( !stream.Read( numFileTypes ) )
	{
		return false;
	}
	fileTypes.SetSize( numFileTypes );
	for ( uint32_t i=0; i<numFileTypes; ++i )
	{
		VSProjectFileType & ft = fileTypes[ i ];

		if ( stream.Read( ft.m_FileType ) == false ) { return false; }
		if ( stream.Read( ft.m_Pattern ) == false ) { return false; }
	}
	return true;
}


#line 166 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Protocol/Client.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\protocol\\Client.h"


#pragma once






#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Network/TCPConnectionPool.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\core\\network\\NetworkStartupHelper.h"


#pragma once






    #line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


















#pragma once


#pragma region Desktop Family









#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"























#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 71 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



#line 75 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 87 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 88 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


extern "C" {
#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;


typedef unsigned __int64 u_int64;
#line 104 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"





























#pragma once
#line 32 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"


#pragma region Desktop Family




extern "C" {
#line 41 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"



#line 45 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

#pragma warning(push)
#pragma warning(disable:4201)
#pragma warning(disable:4214) 







#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"







#line 65 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

#line 67 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\inaddr.h"















#pragma once





typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;






} IN_ADDR, *PIN_ADDR,  *LPIN_ADDR;

#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\inaddr.h"
#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"







typedef USHORT ADDRESS_FAMILY;













































#line 123 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"







#line 131 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"



#line 135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"


#line 138 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

#line 141 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"



















































                                    
                                    
                                    





#line 201 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
















typedef struct sockaddr {



#line 222 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    ADDRESS_FAMILY sa_family;           
#line 224 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    CHAR sa_data[14];                   
} SOCKADDR, *PSOCKADDR,  *LPSOCKADDR;








typedef struct _SOCKET_ADDRESS {
      LPSOCKADDR lpSockaddr;








    INT iSockaddrLength;
} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS;




typedef struct _SOCKET_ADDRESS_LIST {
    INT             iAddressCount;
    SOCKET_ADDRESS  Address[1];
} SOCKET_ADDRESS_LIST, *PSOCKET_ADDRESS_LIST,  *LPSOCKET_ADDRESS_LIST;







#line 263 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"




typedef struct _CSADDR_INFO {
    SOCKET_ADDRESS LocalAddr ;
    SOCKET_ADDRESS RemoteAddr ;
    INT iSocketType ;
    INT iProtocol ;
} CSADDR_INFO, *PCSADDR_INFO,  * LPCSADDR_INFO ;
#line 274 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"























#line 298 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

typedef struct sockaddr_storage {
    ADDRESS_FAMILY ss_family;      

    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))];  
                                   
                                   
                                   
    __int64 __ss_align;            
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))];  
                                   
                                   
                                   
} SOCKADDR_STORAGE_LH, *PSOCKADDR_STORAGE_LH,  *LPSOCKADDR_STORAGE_LH;

typedef struct sockaddr_storage_xp {
    short ss_family;               

    CHAR __ss_pad1[((sizeof(__int64)) - sizeof(USHORT))];  
                                   
                                   
                                   
    __int64 __ss_align;            
    CHAR __ss_pad2[(128 - (sizeof(USHORT) + ((sizeof(__int64)) - sizeof(USHORT)) + (sizeof(__int64))))];  
                                   
                                   
                                   
} SOCKADDR_STORAGE_XP, *PSOCKADDR_STORAGE_XP,  *LPSOCKADDR_STORAGE_XP;



typedef SOCKADDR_STORAGE_LH SOCKADDR_STORAGE;
typedef SOCKADDR_STORAGE *PSOCKADDR_STORAGE,  *LPSOCKADDR_STORAGE;



#line 335 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"


typedef struct _SOCKET_PROCESSOR_AFFINITY {
    PROCESSOR_NUMBER Processor;
    USHORT NumaNodeId;
    USHORT Reserved;
} SOCKET_PROCESSOR_AFFINITY, *PSOCKET_PROCESSOR_AFFINITY;
#line 343 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
















#line 360 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"




























#line 389 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"




#line 394 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
















typedef enum {

    IPPROTO_HOPOPTS       = 0,  
#line 414 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    IPPROTO_ICMP          = 1,
    IPPROTO_IGMP          = 2,
    IPPROTO_GGP           = 3,

    IPPROTO_IPV4          = 4,
#line 420 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    IPPROTO_ST            = 5,
#line 423 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    IPPROTO_TCP           = 6,

    IPPROTO_CBT           = 7,
    IPPROTO_EGP           = 8,
    IPPROTO_IGP           = 9,
#line 429 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    IPPROTO_PUP           = 12,
    IPPROTO_UDP           = 17,
    IPPROTO_IDP           = 22,

    IPPROTO_RDP           = 27,
#line 435 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"


    IPPROTO_IPV6          = 41, 
    IPPROTO_ROUTING       = 43, 
    IPPROTO_FRAGMENT      = 44, 
    IPPROTO_ESP           = 50, 
    IPPROTO_AH            = 51, 
    IPPROTO_ICMPV6        = 58, 
    IPPROTO_NONE          = 59, 
    IPPROTO_DSTOPTS       = 60, 
#line 446 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    IPPROTO_ND            = 77,

    IPPROTO_ICLFXBM       = 78,
#line 451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    IPPROTO_PIM           = 103,
    IPPROTO_PGM           = 113,
    IPPROTO_L2TP          = 115,
    IPPROTO_SCTP          = 132,
#line 457 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    IPPROTO_RAW           = 255,

    IPPROTO_MAX           = 256,



    IPPROTO_RESERVED_RAW  = 257,
    IPPROTO_RESERVED_IPSEC  = 258,
    IPPROTO_RESERVED_IPSECOFFLOAD  = 259,
    IPPROTO_RESERVED_WNV = 260,
    IPPROTO_RESERVED_MAX  = 261
} IPPROTO, *PIPROTO;


























































                                        











#line 540 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"









































typedef enum {
    ScopeLevelInterface    = 1,
    ScopeLevelLink         = 2,
    ScopeLevelSubnet       = 3,
    ScopeLevelAdmin        = 4,
    ScopeLevelSite         = 5,
    ScopeLevelOrganization = 8,
    ScopeLevelGlobal       = 14,
    ScopeLevelCount        = 16
} SCOPE_LEVEL;

typedef struct {
    union {
        struct {
            ULONG Zone : 28;
            ULONG Level : 4;
        };
        ULONG Value;
    };
} SCOPE_ID, *PSCOPE_ID;







typedef struct sockaddr_in {



#line 613 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
    ADDRESS_FAMILY sin_family;
#line 615 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    USHORT sin_port;
    IN_ADDR sin_addr;
    CHAR sin_zero[8];
} SOCKADDR_IN, *PSOCKADDR_IN;










typedef struct sockaddr_dl {
    ADDRESS_FAMILY sdl_family;
    UCHAR sdl_data[8];
    UCHAR sdl_zero[4];
} SOCKADDR_DL, *PSOCKADDR_DL;

#line 637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"






                                        












typedef struct _WSABUF {
    ULONG len;     
      CHAR  *buf; 
} WSABUF,  * LPWSABUF;





typedef struct _WSAMSG {
      LPSOCKADDR       name;              
    INT              namelen;           
    LPWSABUF         lpBuffers;         


    ULONG            dwBufferCount;     


#line 675 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

    WSABUF           Control;           


    ULONG            dwFlags;           


#line 683 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

} WSAMSG, *PWSAMSG, *  LPWSAMSG;






#line 692 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

typedef struct cmsghdr {
    SIZE_T      cmsg_len;
    INT         cmsg_level;
    INT         cmsg_type;
    
} WSACMSGHDR, *PWSACMSGHDR,  *LPWSACMSGHDR;


typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
#line 703 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
















#line 720 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"




















#line 741 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"



























#line 769 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"




































#line 806 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
















#line 823 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"













































typedef struct addrinfo
{
    int                 ai_flags;       
    int                 ai_family;      
    int                 ai_socktype;    
    int                 ai_protocol;    
    size_t              ai_addrlen;     
    char *              ai_canonname;   
      struct sockaddr *   ai_addr;        
    struct addrinfo *   ai_next;        
}
ADDRINFOA, *PADDRINFOA;

typedef struct addrinfoW
{
    int                 ai_flags;       
    int                 ai_family;      
    int                 ai_socktype;    
    int                 ai_protocol;    
    size_t              ai_addrlen;     
    PWSTR               ai_canonname;   
      struct sockaddr *   ai_addr;        
    struct addrinfoW *  ai_next;        
}
ADDRINFOW, *PADDRINFOW;



typedef struct addrinfoexA
{
    int                 ai_flags;       
    int                 ai_family;      
    int                 ai_socktype;    
    int                 ai_protocol;    
    size_t              ai_addrlen;     
    char               *ai_canonname;   
    struct sockaddr    *ai_addr;        
    void               *ai_blob;
    size_t              ai_bloblen;
    LPGUID              ai_provider;
    struct addrinfoexA *ai_next;        
} ADDRINFOEXA, *PADDRINFOEXA, *LPADDRINFOEXA;

typedef struct addrinfoexW
{
    int                 ai_flags;       
    int                 ai_family;      
    int                 ai_socktype;    
    int                 ai_protocol;    
    size_t              ai_addrlen;     
    PWSTR               ai_canonname;   
      struct sockaddr    *ai_addr;        
      void               *ai_blob;
    size_t              ai_bloblen;
    LPGUID              ai_provider;
    struct addrinfoexW *ai_next;        
} ADDRINFOEXW, *PADDRINFOEXW, *LPADDRINFOEXW;

#line 927 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"






typedef struct addrinfoex2A
{
    int                  ai_flags;       
    int                  ai_family;      
    int                  ai_socktype;    
    int                  ai_protocol;    
    size_t               ai_addrlen;     
    char                *ai_canonname;   
    struct sockaddr     *ai_addr;        
    void                *ai_blob;
    size_t              ai_bloblen;
    LPGUID               ai_provider;
    struct addrinfoex2A *ai_next;        
    int                  ai_version;
    char                *ai_fqdn;
} ADDRINFOEX2A, *PADDRINFOEX2A, *LPADDRINFOEX2A;

typedef struct addrinfoex2W
{
    int                  ai_flags;       
    int                  ai_family;      
    int                  ai_socktype;    
    int                  ai_protocol;    
    size_t               ai_addrlen;     
    PWSTR                ai_canonname;   
      struct sockaddr    *ai_addr;        
      void               *ai_blob;
    size_t               ai_bloblen;
    LPGUID               ai_provider;
    struct addrinfoex2W *ai_next;        
    int                  ai_version;
    PWSTR                ai_fqdn;
} ADDRINFOEX2W, *PADDRINFOEX2W, *LPADDRINFOEX2W;

typedef struct addrinfoex3
{
    int                  ai_flags;       
    int                  ai_family;      
    int                  ai_socktype;    
    int                  ai_protocol;    
    size_t               ai_addrlen;     
    PWSTR                ai_canonname;   
      struct sockaddr    *ai_addr;        
      void               *ai_blob;
    size_t               ai_bloblen;
    LPGUID               ai_provider;
    struct addrinfoex3   *ai_next;        
    int                  ai_version;
    PWSTR                ai_fqdn;
    int                  ai_interfaceindex;
} ADDRINFOEX3, *PADDRINFOEX3, *LPADDRINFOEX3;

#line 986 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"























#line 1010 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"



#line 1014 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"











#line 1026 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"






















#pragma warning(pop)


}
#line 1053 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"


#line 1056 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"
#pragma endregion

#line 1059 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\ws2def.h"

#line 106 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





typedef UINT_PTR        SOCKET;











#line 124 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

typedef struct fd_set {
        u_int fd_count;               
        SOCKET  fd_array[64];   
} fd_set;

extern int __stdcall  __WSAFDIsSet(SOCKET fd, fd_set  *);






































struct timeval {
        long    tv_sec;         
        long    tv_usec;        
};



























                                        
























struct  hostent {
        char     * h_name;           
        char     *  * h_aliases;  
        short   h_addrtype;             
        short   h_length;               
        char     *  * h_addr_list; 

};





struct  netent {
        char     * n_name;           
        char     *  * n_aliases;  
        short   n_addrtype;             
        u_long  n_net;                  
};

struct  servent {
        char     * s_name;           
        char     *  * s_aliases;  

        char     * s_proto;          
        short   s_port;                 



#line 255 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
};

struct  protoent {
        char     * p_name;           
        char     *  * p_aliases;  
        short   p_proto;                
};














































                                        












































typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;

        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char  *              lpVendorInfo;
        char                    szDescription[256+1];
        char                    szSystemStatus[128+1];






#line 369 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
} WSADATA,  * LPWSADATA;






































































#line 441 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


                                       
                                       
                                       





struct sockproto {
        u_short sp_family;              
        u_short sp_protocol;            
};































#line 487 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"






struct  linger {
        u_short l_onoff;                
        u_short l_linger;               
};


















#line 516 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



#line 520 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




























































































































































































































































































#line 805 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











typedef struct _OVERLAPPED *    LPWSAOVERLAPPED;











































#line 861 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\qos.h"

























#pragma once


#pragma region Desktop Family







typedef ULONG   SERVICETYPE;





























































typedef struct _flowspec
{
    ULONG       TokenRate;              
    ULONG       TokenBucketSize;        
    ULONG       PeakBandwidth;          
    ULONG       Latency;                
    ULONG       DelayVariation;         
    SERVICETYPE ServiceType;
    ULONG       MaxSduSize;             
    ULONG       MinimumPolicedSize;     

} FLOWSPEC, *PFLOWSPEC, * LPFLOWSPEC;































typedef struct  {

    ULONG   ObjectType;
    ULONG   ObjectLength;  


} QOS_OBJECT_HDR, *LPQOS_OBJECT_HDR;









          

          

          

          




















typedef struct _QOS_SD_MODE {

    QOS_OBJECT_HDR   ObjectHdr;
    ULONG            ShapeDiscardMode;

} QOS_SD_MODE, *LPQOS_SD_MODE;















typedef struct _QOS_SHAPING_RATE {

    QOS_OBJECT_HDR   ObjectHdr;
    ULONG            ShapingRate;

} QOS_SHAPING_RATE, *LPQOS_SHAPING_RATE;



#line 216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\qos.h"
#pragma endregion

#line 219 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\shared\\qos.h"
#line 866 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

typedef struct _QualityOfService
{
    FLOWSPEC      SendingFlowspec;       
    FLOWSPEC      ReceivingFlowspec;     
    WSABUF        ProviderSpecific;      
} QOS,  * LPQOS;


















typedef unsigned int             GROUP;







typedef struct _WSANETWORKEVENTS {
       long lNetworkEvents;
       int iErrorCode[10];
} WSANETWORKEVENTS,  * LPWSANETWORKEVENTS;















typedef struct _WSAPROTOCOLCHAIN {
    int ChainLen;                                 
                                                  
                                                  
                                                  
    DWORD ChainEntries[7];       
} WSAPROTOCOLCHAIN,  * LPWSAPROTOCOLCHAIN;



typedef struct _WSAPROTOCOL_INFOA {
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    CHAR   szProtocol[255+1];
} WSAPROTOCOL_INFOA,  * LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW {
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    WCHAR  szProtocol[255+1];
} WSAPROTOCOL_INFOW,  * LPWSAPROTOCOL_INFOW;




typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
#line 979 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



























































typedef
int
(__stdcall * LPCONDITIONPROC)(
     LPWSABUF lpCallerId,
     LPWSABUF lpCallerData,
      LPQOS lpSQOS,
      LPQOS lpGQOS,
     LPWSABUF lpCalleeId,
     LPWSABUF lpCalleeData,
     GROUP  * g,
     DWORD_PTR dwCallbackData
    );

typedef
void
(__stdcall * LPWSAOVERLAPPED_COMPLETION_ROUTINE)(
     DWORD dwError,
     DWORD cbTransferred,
     LPWSAOVERLAPPED lpOverlapped,
     DWORD dwFlags
    );









typedef enum _WSACOMPLETIONTYPE {
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND,
    NSP_NOTIFY_EVENT,
    NSP_NOTIFY_PORT,
    NSP_NOTIFY_APC,
} WSACOMPLETIONTYPE, *PWSACOMPLETIONTYPE,  * LPWSACOMPLETIONTYPE;

typedef struct _WSACOMPLETION {
    WSACOMPLETIONTYPE Type;
    union {
        struct {
            HWND hWnd;
            UINT uMsg;
            WPARAM context;
        } WindowMessage;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
        } Event;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
        } Apc;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            HANDLE hPort;
            ULONG_PTR Key;
        } Port;
    } Parameters;
} WSACOMPLETION, *PWSACOMPLETION,  *LPWSACOMPLETION;
#line 1099 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
















typedef struct _BLOB {
    ULONG cbSize ;



      BYTE *pBlobData ;
#line 1122 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
} BLOB, *LPBLOB ;
#line 1124 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



























#line 1152 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



#line 1156 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 1168 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





























#line 1198 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



#line 1202 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"













#line 1216 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


















#line 1235 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

































#line 1269 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




typedef struct _AFPROTOCOLS {
    INT iAddressFamily;
    INT iProtocol;
} AFPROTOCOLS, *PAFPROTOCOLS, *LPAFPROTOCOLS;








typedef enum _WSAEcomparator
{
    COMP_EQUAL = 0,
    COMP_NOTLESS
} WSAECOMPARATOR, *PWSAECOMPARATOR, *LPWSAECOMPARATOR;

typedef struct _WSAVersion
{
    DWORD           dwVersion;
    WSAECOMPARATOR  ecHow;
}WSAVERSION, *PWSAVERSION, *LPWSAVERSION;

typedef struct _WSAQuerySetA
{
    DWORD           dwSize;
    LPSTR           lpszServiceInstanceName;
    LPGUID          lpServiceClassId;
    LPWSAVERSION    lpVersion;
    LPSTR           lpszComment;
    DWORD           dwNameSpace;
    LPGUID          lpNSProviderId;
    LPSTR           lpszContext;
    DWORD           dwNumberOfProtocols;
      LPAFPROTOCOLS   lpafpProtocols;
    LPSTR           lpszQueryString;
    DWORD           dwNumberOfCsAddrs;
      LPCSADDR_INFO   lpcsaBuffer;
    DWORD           dwOutputFlags;
    LPBLOB          lpBlob;
} WSAQUERYSETA, *PWSAQUERYSETA, *LPWSAQUERYSETA;

typedef   struct _WSAQuerySetW
{
      DWORD           dwSize;
    LPWSTR          lpszServiceInstanceName;
    LPGUID          lpServiceClassId;
    LPWSAVERSION    lpVersion;
    LPWSTR          lpszComment;
    DWORD           dwNameSpace;
    LPGUID          lpNSProviderId;
    LPWSTR          lpszContext;
    DWORD           dwNumberOfProtocols;
      LPAFPROTOCOLS   lpafpProtocols;
    LPWSTR          lpszQueryString;
    DWORD           dwNumberOfCsAddrs;
      LPCSADDR_INFO   lpcsaBuffer;
    DWORD           dwOutputFlags;
    LPBLOB          lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;

typedef struct _WSAQuerySet2A
{
    DWORD           dwSize;
    LPSTR           lpszServiceInstanceName;
    LPWSAVERSION    lpVersion;
    LPSTR           lpszComment;
    DWORD           dwNameSpace;
    LPGUID          lpNSProviderId;
    LPSTR           lpszContext;
    DWORD           dwNumberOfProtocols;
    LPAFPROTOCOLS   lpafpProtocols;
    LPSTR           lpszQueryString;
    DWORD           dwNumberOfCsAddrs;
    LPCSADDR_INFO   lpcsaBuffer;
    DWORD           dwOutputFlags;
    LPBLOB          lpBlob;   
} WSAQUERYSET2A, *PWSAQUERYSET2A, *LPWSAQUERYSET2A;
typedef struct _WSAQuerySet2W
{
    DWORD           dwSize;
    LPWSTR          lpszServiceInstanceName;
    LPWSAVERSION    lpVersion;
    LPWSTR          lpszComment;
    DWORD           dwNameSpace;
    LPGUID          lpNSProviderId;
    LPWSTR          lpszContext;
    DWORD           dwNumberOfProtocols;
      LPAFPROTOCOLS   lpafpProtocols;
    LPWSTR          lpszQueryString;
    DWORD           dwNumberOfCsAddrs;
      LPCSADDR_INFO   lpcsaBuffer;
    DWORD           dwOutputFlags;
    LPBLOB          lpBlob;   
} WSAQUERYSET2W, *PWSAQUERYSET2W, *LPWSAQUERYSET2W;









typedef WSAQUERYSETA WSAQUERYSET;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef WSAQUERYSET2A WSAQUERYSET2;
typedef PWSAQUERYSET2A PWSAQUERYSET2;
typedef LPWSAQUERYSET2A LPWSAQUERYSET2;
#line 1385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







































#line 1425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





typedef enum _WSAESETSERVICEOP
{
    RNRSERVICE_REGISTER=0,
    RNRSERVICE_DEREGISTER,
    RNRSERVICE_DELETE
} WSAESETSERVICEOP, *PWSAESETSERVICEOP, *LPWSAESETSERVICEOP;





typedef struct _WSANSClassInfoA
{
    LPSTR   lpszName;
    DWORD   dwNameSpace;
    DWORD   dwValueType;
    DWORD   dwValueSize;
    LPVOID  lpValue;
}WSANSCLASSINFOA, *PWSANSCLASSINFOA, *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW
{
    LPWSTR  lpszName;
    DWORD   dwNameSpace;
    DWORD   dwValueType;
    DWORD   dwValueSize;
    LPVOID  lpValue;
}WSANSCLASSINFOW, *PWSANSCLASSINFOW, *LPWSANSCLASSINFOW;





typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
#line 1466 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

typedef struct _WSAServiceClassInfoA
{
    LPGUID              lpServiceClassId;
    LPSTR               lpszServiceClassName;
    DWORD               dwCount;
    LPWSANSCLASSINFOA   lpClassInfos;
}WSASERVICECLASSINFOA, *PWSASERVICECLASSINFOA, *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW
{
    LPGUID              lpServiceClassId;
    LPWSTR              lpszServiceClassName;
    DWORD               dwCount;
    LPWSANSCLASSINFOW   lpClassInfos;
}WSASERVICECLASSINFOW, *PWSASERVICECLASSINFOW, *LPWSASERVICECLASSINFOW;





typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
#line 1490 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

typedef struct _WSANAMESPACE_INFOA {
    GUID                NSProviderId;
    DWORD               dwNameSpace;
    BOOL                fActive;
    DWORD               dwVersion;
    LPSTR               lpszIdentifier;
} WSANAMESPACE_INFOA, *PWSANAMESPACE_INFOA, *LPWSANAMESPACE_INFOA;

typedef struct _WSANAMESPACE_INFOW {
    GUID                NSProviderId;
    DWORD               dwNameSpace;
    BOOL                fActive;
    DWORD               dwVersion;
    LPWSTR              lpszIdentifier;
} WSANAMESPACE_INFOW, *PWSANAMESPACE_INFOW, *LPWSANAMESPACE_INFOW;

typedef struct _WSANAMESPACE_INFOEXA {
    GUID                NSProviderId;
    DWORD               dwNameSpace;
    BOOL                fActive;
    DWORD               dwVersion;
    LPSTR               lpszIdentifier;
    BLOB                ProviderSpecific;
} WSANAMESPACE_INFOEXA, *PWSANAMESPACE_INFOEXA, *LPWSANAMESPACE_INFOEXA;

typedef struct _WSANAMESPACE_INFOEXW {
    GUID                NSProviderId;
    DWORD               dwNameSpace;
    BOOL                fActive;
    DWORD               dwVersion;
    LPWSTR              lpszIdentifier;
    BLOB                ProviderSpecific;
} WSANAMESPACE_INFOEXW, *PWSANAMESPACE_INFOEXW, *LPWSANAMESPACE_INFOEXW;









typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef WSANAMESPACE_INFOEXA WSANAMESPACE_INFOEX;
typedef PWSANAMESPACE_INFOEXA PWSANAMESPACE_INFOEX;
typedef LPWSANAMESPACE_INFOEXA LPWSANAMESPACE_INFOEX;
#line 1540 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



















typedef struct pollfd {

    SOCKET  fd;
    SHORT   events;
    SHORT   revents;

} WSAPOLLFD, *PWSAPOLLFD,  *LPWSAPOLLFD;

#line 1568 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





__declspec(dllimport)
 
SOCKET
 __stdcall
accept(
      SOCKET s,
      struct sockaddr  * addr,
      int  * addrlen
    );
#line 1583 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"










#line 1594 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
bind(
      SOCKET s,
      const struct sockaddr  * name,
      int namelen
    );
#line 1605 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 1615 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
closesocket(
      SOCKET s
    );
#line 1624 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1632 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
connect(
      SOCKET s,
      const struct sockaddr  * name,
      int namelen
    );
#line 1643 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 1653 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
ioctlsocket(
      SOCKET s,
      long cmd,
      u_long  * argp
    );
#line 1664 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 1674 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
getpeername(
      SOCKET s,
      struct sockaddr  * name,
      int  * namelen
    );
#line 1685 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 1695 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
getsockname(
      SOCKET s,
      struct sockaddr  * name,
      int  * namelen
    );
#line 1706 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 1716 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
getsockopt(
      SOCKET s,
      int level,
      int optname,
      char  * optval,
      int  * optlen
    );
#line 1729 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 1741 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
u_long
 __stdcall
htonl(
      u_long hostlong
    );
#line 1750 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1758 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
u_short
 __stdcall
htons(
      u_short hostshort
    );
#line 1767 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1775 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
unsigned long
 __stdcall
inet_addr(
      const char  * cp
    );
#line 1784 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
char  *
 __stdcall
inet_ntoa(
      struct in_addr in
    );
#line 1801 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1809 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


























__inline unsigned __int64 htonll ( unsigned __int64 Value ) 
{ 
	const unsigned __int64 Retval = ( ( ((Value) >> 56) & 0x00000000000000FFLL ) | ( ((Value) >> 40) & 0x000000000000FF00LL ) | ( ((Value) >> 24) & 0x0000000000FF0000LL ) | ( ((Value) >> 8) & 0x00000000FF000000LL ) | ( ((Value) << 8) & 0x000000FF00000000LL ) | ( ((Value) << 24) & 0x0000FF0000000000LL ) | ( ((Value) << 40) & 0x00FF000000000000LL ) | ( ((Value) << 56) & 0xFF00000000000000LL ) );
	return Retval;
}
#line 1841 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__inline unsigned __int64 ntohll ( unsigned __int64 Value ) 
{ 
	const unsigned __int64 Retval = ( ( ((Value) >> 56) & 0x00000000000000FFLL ) | ( ((Value) >> 40) & 0x000000000000FF00LL ) | ( ((Value) >> 24) & 0x0000000000FF0000LL ) | ( ((Value) >> 8) & 0x00000000FF000000LL ) | ( ((Value) << 8) & 0x000000FF00000000LL ) | ( ((Value) << 24) & 0x0000FF0000000000LL ) | ( ((Value) << 40) & 0x00FF000000000000LL ) | ( ((Value) << 56) & 0xFF00000000000000LL ) );
	return Retval;
}
#line 1849 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__inline unsigned __int32 htonf ( float Value ) 
{ 
	unsigned __int32 Tempval;
	unsigned __int32 Retval;
	Tempval = *(unsigned __int32*)(&Value);
	Retval = ( ( ((Tempval) >> 24) & 0x000000FFL ) | ( ((Tempval) >> 8) & 0x0000FF00L ) | ( ((Tempval) << 8) & 0x00FF0000L ) | ( ((Tempval) << 24) & 0xFF000000L ) );
	return Retval;
}
#line 1860 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__inline float ntohf ( unsigned __int32 Value ) 
{ 
	const unsigned __int32 Tempval = ( ( ((Value) >> 24) & 0x000000FFL ) | ( ((Value) >> 8) & 0x0000FF00L ) | ( ((Value) << 8) & 0x00FF0000L ) | ( ((Value) << 24) & 0xFF000000L ) );
	float Retval;
	*((unsigned __int32*)&Retval) = Tempval;
	return Retval;
}
#line 1870 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__inline unsigned __int64 htond ( double Value ) 
{ 
	unsigned __int64 Tempval;
	unsigned __int64 Retval;
	Tempval = *(unsigned __int64*)(&Value);
	Retval = ( ( ((Tempval) >> 56) & 0x00000000000000FFLL ) | ( ((Tempval) >> 40) & 0x000000000000FF00LL ) | ( ((Tempval) >> 24) & 0x0000000000FF0000LL ) | ( ((Tempval) >> 8) & 0x00000000FF000000LL ) | ( ((Tempval) << 8) & 0x000000FF00000000LL ) | ( ((Tempval) << 24) & 0x0000FF0000000000LL ) | ( ((Tempval) << 40) & 0x00FF000000000000LL ) | ( ((Tempval) << 56) & 0xFF00000000000000LL ) );
	return Retval;
}
#line 1881 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__inline double ntohd ( unsigned __int64 Value ) 
{ 
	const unsigned __int64 Tempval = ( ( ((Value) >> 56) & 0x00000000000000FFLL ) | ( ((Value) >> 40) & 0x000000000000FF00LL ) | ( ((Value) >> 24) & 0x0000000000FF0000LL ) | ( ((Value) >> 8) & 0x00000000FF000000LL ) | ( ((Value) << 8) & 0x000000FF00000000LL ) | ( ((Value) << 24) & 0x0000FF0000000000LL ) | ( ((Value) << 40) & 0x00FF000000000000LL ) | ( ((Value) << 56) & 0xFF00000000000000LL ) );
	double Retval;
	*((unsigned __int64*)&Retval) = Tempval;
	return Retval;
}
#line 1891 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 1892 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
listen(
      SOCKET s,
      int backlog
    );
#line 1902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 1911 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
u_long
 __stdcall
ntohl(
      u_long netlong
    );
#line 1920 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1928 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
u_short
 __stdcall
ntohs(
      u_short netshort
    );
#line 1937 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 1945 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
recv(
      SOCKET s,
       char  * buf,
      int len,
      int flags
    );
#line 1957 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"










#line 1968 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
recvfrom(
      SOCKET s,
       char  * buf,
      int len,
      int flags,
      struct sockaddr  * from,
      int  * fromlen
    );
#line 1982 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"












#line 1995 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
select(
      int nfds,
      fd_set  * readfds,
      fd_set  * writefds,
      fd_set  * exceptfds,
      const struct timeval  * timeout
    );
#line 2008 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2020 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
send(
      SOCKET s,
      const char  * buf,
      int len,
      int flags
    );
#line 2032 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"










#line 2043 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
sendto(
      SOCKET s,
      const char  * buf,
      int len,
      int flags,
      const struct sockaddr  * to,
      int tolen
    );
#line 2057 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"












#line 2070 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
setsockopt(
      SOCKET s,
      int level,
      int optname,
      const char  * optval,
      int optlen
    );
#line 2083 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2095 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
shutdown(
      SOCKET s,
      int how
    );
#line 2105 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 2114 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
 
SOCKET
 __stdcall
socket(
      int af,
      int type,
      int protocol
    );
#line 2126 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"










#line 2137 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




__declspec(dllimport)
struct hostent  *
 __stdcall
gethostbyaddr(
      const char  * addr,
      int len,
      int type
    );
#line 2150 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2160 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
struct hostent  *
 __stdcall
gethostbyname(
      const char  * name
    );
#line 2169 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
gethostname(
      char  * name,
      int namelen
    );

#line 2188 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 2197 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
GetHostNameW(
      PWSTR name,
      int namelen
    );

#line 2208 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 2217 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
struct servent  *
 __stdcall
getservbyport(
      int port,
      const char  * proto
    );
#line 2227 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 2236 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
struct servent  *
 __stdcall
getservbyname(
      const char  * name,
      const char  * proto
    );
#line 2246 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 2255 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
struct protoent  *
 __stdcall
getprotobynumber(
      int number
    );
#line 2264 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2272 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
struct protoent  *
 __stdcall
getprotobyname(
      const char  * name
    );
#line 2281 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2289 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




__declspec(dllimport)
 
int
 __stdcall
WSAStartup(
      WORD wVersionRequested,
      LPWSADATA lpWSAData
    );
#line 2302 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2312 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSACleanup(
    void
    );
#line 2321 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2329 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
void
 __stdcall
WSASetLastError(
      int iError
    );
#line 2338 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2346 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAGetLastError(
    void
    );
#line 2355 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2363 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSAIsBlocking(
    void
    );
#line 2372 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2380 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAUnhookBlockingHook(
    void
    );
#line 2389 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2397 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
FARPROC
 __stdcall
WSASetBlockingHook(
      FARPROC lpBlockFunc
    );
#line 2406 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2414 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSACancelBlockingCall(
    void
    );
#line 2423 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2431 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetServByName(
      HWND hWnd,
      u_int wMsg,
      const char  * name,
      const char  * proto,
      char  * buf,
      int buflen
    );
#line 2445 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"












#line 2458 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetServByPort(
      HWND hWnd,
      u_int wMsg,
      int port,
      const char  * proto,
      char  * buf,
      int buflen
    );
#line 2472 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"












#line 2485 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetProtoByName(
      HWND hWnd,
      u_int wMsg,
      const char  * name,
      char  * buf,
      int buflen
    );
#line 2498 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2510 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetProtoByNumber(
      HWND hWnd,
      u_int wMsg,
      int number,
      char  * buf,
      int buflen
    );
#line 2523 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2535 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetHostByName(
      HWND hWnd,
      u_int wMsg,
      const char  * name,
      char  * buf,
      int buflen
    );
#line 2548 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2560 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSAAsyncGetHostByAddr(
      HWND hWnd,
      u_int wMsg,
      const char  * addr,
      int len,
      int type,
      char  * buf,
      int buflen
    );
#line 2575 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"













#line 2589 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSACancelAsyncRequest(
      HANDLE hAsyncTaskHandle
    );
#line 2598 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2606 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAAsyncSelect(
      SOCKET s,
      HWND hWnd,
      u_int wMsg,
      long lEvent
    );
#line 2618 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"










#line 2629 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




__declspec(dllimport)
 
SOCKET
 __stdcall
WSAAccept(
      SOCKET s,
      struct sockaddr  * addr,
      LPINT addrlen,
      LPCONDITIONPROC lpfnCondition,
      DWORD_PTR dwCallbackData
    );
#line 2645 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"












#line 2658 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSACloseEvent(
      HANDLE hEvent
    );
#line 2667 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2675 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAConnect(
      SOCKET s,
      const struct sockaddr  * name,
      int namelen,
      LPWSABUF lpCallerData,
      LPWSABUF lpCalleeData,
      LPQOS lpSQOS,
      LPQOS lpGQOS
    );
#line 2690 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2698 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

BOOL
__stdcall
WSAConnectByNameW(
      SOCKET s,
      LPWSTR nodename,
      LPWSTR servicename,
      LPDWORD LocalAddressLength,
      LPSOCKADDR LocalAddress,
      LPDWORD RemoteAddressLength,
      LPSOCKADDR RemoteAddress,
      const struct timeval * timeout,
      LPWSAOVERLAPPED Reserved);

BOOL
__stdcall
WSAConnectByNameA(
      SOCKET s,
      LPCSTR nodename,
      LPCSTR servicename,
      LPDWORD LocalAddressLength,
      LPSOCKADDR LocalAddress,
      LPDWORD RemoteAddressLength,
      LPSOCKADDR RemoteAddress,
      const struct timeval * timeout,
      LPWSAOVERLAPPED Reserved);

BOOL
__stdcall
WSAConnectByList(
      SOCKET s,
      PSOCKET_ADDRESS_LIST SocketAddress,
      LPDWORD LocalAddressLength,
      LPSOCKADDR LocalAddress,
      LPDWORD RemoteAddressLength,
      LPSOCKADDR RemoteAddress,
      const struct timeval * timeout,
      LPWSAOVERLAPPED Reserved);
#line 2737 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"













#line 2751 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
HANDLE
 __stdcall
WSACreateEvent(
    void
    );
#line 2760 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 2768 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSADuplicateSocketA(
      SOCKET s,
      DWORD dwProcessId,
      LPWSAPROTOCOL_INFOA lpProtocolInfo
    );
__declspec(dllimport)
int
 __stdcall
WSADuplicateSocketW(
      SOCKET s,
      DWORD dwProcessId,
      LPWSAPROTOCOL_INFOW lpProtocolInfo
    );




#line 2791 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 2792 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





















#line 2814 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAEnumNetworkEvents(
      SOCKET s,
      HANDLE hEventObject,
      LPWSANETWORKEVENTS lpNetworkEvents
    );
#line 2825 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2835 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAEnumProtocolsA(
      LPINT lpiProtocols,
      LPWSAPROTOCOL_INFOA lpProtocolBuffer,
      LPDWORD lpdwBufferLength
    );
__declspec(dllimport)
int
 __stdcall
WSAEnumProtocolsW(
      LPINT lpiProtocols,
      LPWSAPROTOCOL_INFOW lpProtocolBuffer,
      LPDWORD lpdwBufferLength
    );




#line 2858 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 2859 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





















#line 2881 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAEventSelect(
      SOCKET s,
      HANDLE hEventObject,
      long lNetworkEvents
    );
#line 2892 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2902 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSAGetOverlappedResult(
      SOCKET s,
      LPWSAOVERLAPPED lpOverlapped,
      LPDWORD lpcbTransfer,
      BOOL fWait,
      LPDWORD lpdwFlags
    );
#line 2915 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 2927 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSAGetQOSByName(
      SOCKET s,
      LPWSABUF lpQOSName,
      LPQOS lpQOS
    );
#line 2938 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2948 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAHtonl(
       SOCKET s,
       u_long hostlong,
       u_long  * lpnetlong
    );
#line 2959 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2969 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAHtons(
       SOCKET s,
       u_short hostshort,
       u_short  * lpnetshort
    );
#line 2980 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 2990 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSAIoctl(
      SOCKET s,
      DWORD dwIoControlCode,
      LPVOID lpvInBuffer,
      DWORD cbInBuffer,
      LPVOID lpvOutBuffer,
      DWORD cbOutBuffer,
      LPDWORD lpcbBytesReturned,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3007 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"















#line 3023 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
SOCKET
 __stdcall
WSAJoinLeaf(
      SOCKET s,
      const struct sockaddr  * name,
      int namelen,
      LPWSABUF lpCallerData,
      LPWSABUF lpCalleeData,
      LPQOS lpSQOS,
      LPQOS lpGQOS,
      DWORD dwFlags
    );
#line 3039 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"














#line 3054 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSANtohl(
      SOCKET s,
      u_long netlong,
      u_long  * lphostlong
    );
#line 3065 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 3075 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSANtohs(
      SOCKET s,
      u_short netshort,
      u_short  * lphostshort
    );
#line 3086 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 3096 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSARecv(
      SOCKET s,
       LPWSABUF lpBuffers,
      DWORD dwBufferCount,
      LPDWORD lpNumberOfBytesRecvd,
      LPDWORD lpFlags,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3111 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"













#line 3125 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSARecvDisconnect(
      SOCKET s,
       LPWSABUF lpInboundDisconnectData
    );
#line 3135 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 3144 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSARecvFrom(
      SOCKET s,
       LPWSABUF lpBuffers,
      DWORD dwBufferCount,
      LPDWORD lpNumberOfBytesRecvd,
      LPDWORD lpFlags,
      struct sockaddr  * lpFrom,
      LPINT lpFromlen,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3161 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"















#line 3177 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSAResetEvent(
      HANDLE hEvent
    );
#line 3186 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 3194 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSASend(
      SOCKET s,
      LPWSABUF lpBuffers,
      DWORD dwBufferCount,
      LPDWORD lpNumberOfBytesSent,
      DWORD dwFlags,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3209 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"













#line 3223 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



__declspec(dllimport)
int 
 __stdcall 
WSASendMsg(
      SOCKET Handle,
      LPWSAMSG lpMsg,
      DWORD dwFlags,
      LPDWORD lpNumberOfBytesSent,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3238 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3239 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSASendDisconnect(
      SOCKET s,
      LPWSABUF lpOutboundDisconnectData
    );
#line 3249 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"








#line 3258 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
int
 __stdcall
WSASendTo(
      SOCKET s,
      LPWSABUF lpBuffers,
      DWORD dwBufferCount,
      LPDWORD lpNumberOfBytesSent,
      DWORD dwFlags,
      const struct sockaddr  * lpTo,
      int iTolen,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3275 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"















#line 3291 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
BOOL
 __stdcall
WSASetEvent(
      HANDLE hEvent
    );
#line 3300 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 3308 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
 
SOCKET
 __stdcall
WSASocketA(
      int af,
      int type,
      int protocol,
      LPWSAPROTOCOL_INFOA lpProtocolInfo,
      GROUP g,
      DWORD dwFlags
    );

__declspec(dllimport)
 
SOCKET
 __stdcall
WSASocketW(
      int af,
      int type,
      int protocol,
      LPWSAPROTOCOL_INFOW lpProtocolInfo,
      GROUP g,
      DWORD dwFlags
    );




#line 3340 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3341 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"






























#line 3372 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
DWORD
 __stdcall
WSAWaitForMultipleEvents(
      DWORD cEvents,
      const HANDLE  * lphEvents,
      BOOL fWaitAll,
      DWORD dwTimeout,
      BOOL fAlertable
    );
#line 3385 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"











#line 3397 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAAddressToStringA(
      LPSOCKADDR lpsaAddress,
          DWORD               dwAddressLength,
      LPWSAPROTOCOL_INFOA lpProtocolInfo,
      LPSTR lpszAddressString,
       LPDWORD             lpdwAddressStringLength
    );
__declspec(dllimport)
INT
 __stdcall
WSAAddressToStringW(
      LPSOCKADDR lpsaAddress,
          DWORD               dwAddressLength,
      LPWSAPROTOCOL_INFOW lpProtocolInfo,
      LPWSTR lpszAddressString,
       LPDWORD             lpdwAddressStringLength
    );




#line 3424 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3425 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

























#line 3451 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAStringToAddressA(
         LPSTR               AddressString,
         INT                 AddressFamily,
      LPWSAPROTOCOL_INFOA lpProtocolInfo,
      LPSOCKADDR lpAddress,
      LPINT               lpAddressLength
    );
__declspec(dllimport)
INT
 __stdcall
WSAStringToAddressW(
         LPWSTR             AddressString,
         INT                AddressFamily,
      LPWSAPROTOCOL_INFOW lpProtocolInfo,
      LPSOCKADDR lpAddress,
      LPINT              lpAddressLength
    );




#line 3478 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3479 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

























#line 3505 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





__declspec(dllimport)
INT
 __stdcall
WSALookupServiceBeginA(
      LPWSAQUERYSETA lpqsRestrictions,
      DWORD          dwControlFlags,
      LPHANDLE       lphLookup
    );
__declspec(dllimport)
INT
 __stdcall
WSALookupServiceBeginW(
      LPWSAQUERYSETW lpqsRestrictions,
      DWORD          dwControlFlags,
      LPHANDLE       lphLookup
    );




#line 3531 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3532 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





















#line 3554 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSALookupServiceNextA(
      HANDLE           hLookup,
      DWORD            dwControlFlags,
      LPDWORD       lpdwBufferLength,
      LPWSAQUERYSETA lpqsResults
    );
__declspec(dllimport)
INT
 __stdcall
WSALookupServiceNextW(
      HANDLE           hLookup,
      DWORD            dwControlFlags,
      LPDWORD       lpdwBufferLength,
      LPWSAQUERYSETW lpqsResults
    );




#line 3579 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3580 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"























#line 3604 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



__declspec(dllimport)
INT
 __stdcall
WSANSPIoctl(
      HANDLE           hLookup,
      DWORD            dwControlCode,
      LPVOID lpvInBuffer,
      DWORD            cbInBuffer,
      LPVOID lpvOutBuffer,
      DWORD            cbOutBuffer,
      LPDWORD        lpcbBytesReturned,
      LPWSACOMPLETION lpCompletion
    );
#line 3621 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"














#line 3636 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3637 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSALookupServiceEnd(
      HANDLE  hLookup
    );
#line 3646 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 3654 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAInstallServiceClassA(
       LPWSASERVICECLASSINFOA   lpServiceClassInfo
    );
__declspec(dllimport)
INT
 __stdcall
WSAInstallServiceClassW(
       LPWSASERVICECLASSINFOW   lpServiceClassInfo
    );




#line 3673 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3674 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

















#line 3692 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSARemoveServiceClass(
       LPGUID  lpServiceClassId
    );
#line 3701 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"







#line 3709 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAGetServiceClassInfoA(
       LPGUID  lpProviderId,
       LPGUID  lpServiceClassId,
      LPDWORD  lpdwBufSize,
      LPWSASERVICECLASSINFOA lpServiceClassInfo
    );
__declspec(dllimport)
INT
 __stdcall
WSAGetServiceClassInfoW(
       LPGUID  lpProviderId,
       LPGUID  lpServiceClassId,
      LPDWORD  lpdwBufSize,
      LPWSASERVICECLASSINFOW lpServiceClassInfo
    );




#line 3734 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3735 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"























#line 3759 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAEnumNameSpaceProvidersA(
      LPDWORD             lpdwBufferLength,
      LPWSANAMESPACE_INFOA lpnspBuffer
    );
__declspec(dllimport)
INT
 __stdcall
WSAEnumNameSpaceProvidersW(
      LPDWORD             lpdwBufferLength,
      LPWSANAMESPACE_INFOW lpnspBuffer
    );





#line 3781 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAEnumNameSpaceProvidersExA(
      LPDWORD             lpdwBufferLength,
      LPWSANAMESPACE_INFOEXA lpnspBuffer
    );
__declspec(dllimport)
INT
 __stdcall
WSAEnumNameSpaceProvidersExW(
      LPDWORD             lpdwBufferLength,
      LPWSANAMESPACE_INFOEXW lpnspBuffer
    );





#line 3803 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"

#line 3805 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


#line 3808 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









































#line 3850 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
  INT
 __stdcall
WSAGetServiceClassNameByClassIdA(
            LPGUID  lpServiceClassId,
      LPSTR lpszServiceClassName,
      LPDWORD lpdwBufferLength
    );
__declspec(dllimport)
  INT
 __stdcall
WSAGetServiceClassNameByClassIdW(
            LPGUID  lpServiceClassId,
      LPWSTR lpszServiceClassName,
      LPDWORD lpdwBufferLength
    );




#line 3873 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3874 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





















#line 3896 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSASetServiceA(
      LPWSAQUERYSETA lpqsRegInfo,
      WSAESETSERVICEOP essoperation,
      DWORD dwControlFlags
    );
__declspec(dllimport)
INT
 __stdcall
WSASetServiceW(
      LPWSAQUERYSETW lpqsRegInfo,
      WSAESETSERVICEOP essoperation,
      DWORD dwControlFlags
    );




#line 3919 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3920 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"





















#line 3942 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


__declspec(dllimport)
INT
 __stdcall
WSAProviderConfigChange(
      LPHANDLE lpNotificationHandle,
      LPWSAOVERLAPPED lpOverlapped,
      LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 3953 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 3963 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"



__declspec(dllimport)
int
 __stdcall
WSAPoll(
      LPWSAPOLLFD fdArray,
      ULONG fds,
      INT timeout
    );
#line 3975 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#line 3976 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"




typedef struct sockaddr_in  *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger  *LPLINGER;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set  *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent  *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent  *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent  *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval  *LPTIMEVAL;








































}
#line 4047 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"









#line 4057 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


#line 4060 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"
#pragma endregion

#line 4063 "c:\\Users\\Franta\\p4\\External\\SDK\\Windows8.1\\include\\um\\winsock2.h"


#line 11 "c:\\users\\franta\\p4\\code\\core\\network\\NetworkStartupHelper.h"
#line 12 "c:\\users\\franta\\p4\\code\\core\\network\\NetworkStartupHelper.h"






class NetworkStartupHelper
{
public:
    
	NetworkStartupHelper();
    ~NetworkStartupHelper();

private:

	static WSADATA s_WSAData;
#line 29 "c:\\users\\franta\\p4\\code\\core\\network\\NetworkStartupHelper.h"
	static Mutex s_Mutex;
    static uint32_t s_RefCount;
};


#line 35 "c:\\users\\franta\\p4\\code\\core\\network\\NetworkStartupHelper.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Network/TCPConnectionPool.h"









class TCPConnectionPool;


    typedef uintptr_t TCPSocket;


#line 26 "c:\\Users\\Franta\\p4\\Code\\Core/Network/TCPConnectionPool.h"



class ConnectionInfo
{
public:
	ConnectionInfo( TCPConnectionPool * ownerPool );

	
	void SetUserData( void * userData ) const { m_UserData = userData; }
	void * GetUserData() const { return m_UserData; }

	
	TCPConnectionPool & GetTCPConnectionPool() const { return *m_TCPConnectionPool; }
	inline uint32_t GetRemoteAddress() const { return m_RemoteAddress; }

private:
	friend class TCPConnectionPool;

	TCPSocket				m_Socket;
	uint32_t				m_RemoteAddress;
	uint16_t				m_RemotePort;
	volatile mutable bool	m_ThreadQuitNotification;
	TCPConnectionPool *		m_TCPConnectionPool; 
	mutable void *			m_UserData;


	mutable bool			m_InUse; 
#line 55 "c:\\Users\\Franta\\p4\\Code\\Core/Network/TCPConnectionPool.h"
};



class TCPConnectionPool
{
public:
    TCPConnectionPool();
    virtual ~TCPConnectionPool();

	
	void ShutdownAllConnections();

    
    bool Listen( uint16_t port );
	void StopListening();
    const ConnectionInfo * Connect( const AString & host, uint16_t port, uint32_t timeout = 2000 );
	const ConnectionInfo * Connect( uint32_t hostIP, uint16_t port, uint32_t timeout = 2000 );
    void Disconnect( const ConnectionInfo * ci );
	void SetShuttingDown() { m_ShuttingDown = true; }

	
	size_t GetNumConnections() const;

    
    bool Send( const ConnectionInfo * connection, const void * data, size_t size, uint32_t timeoutMS = 2000 );
    bool Broadcast( const void * data, size_t size );

	static void GetAddressAsString( uint32_t addr, AString & address );

protected:
    
    virtual void OnReceive( const ConnectionInfo *, void * , uint32_t , bool &  ) {}
    virtual void OnConnected( const ConnectionInfo * ) {}
    virtual void OnDisconnected( const ConnectionInfo * ) {}

	
    virtual void * AllocBuffer( uint32_t size );
    virtual void FreeBuffer( void * data );

private:
    
    bool        HandleRead( ConnectionInfo * ci );

    
    int         GetLastError() const;
    bool        WouldBlock() const;
    int         CloseSocket( TCPSocket socket ) const;
    int			Select( TCPSocket maxSocketPlusOne,
                    	void * readSocketSet, 
	                void * writeSocketSet,
                    	void * exceptionSocketSet,
                        struct timeval * timeOut ) const;
    TCPSocket   Accept( TCPSocket socket,
                        struct sockaddr * address,
                        int * addressSize ) const;

    
    void                CreateListenThread( TCPSocket socket, uint32_t host, uint16_t port );
    static uint32_t     ListenThreadWrapperFunction( void * data );
    void                ListenThreadFunction( ConnectionInfo * ci );
	ConnectionInfo *	CreateConnectionThread( TCPSocket socket, uint32_t host, uint16_t port );
    static uint32_t     ConnectionThreadWrapperFunction( void * data );
	void                ConnectionThreadFunction( ConnectionInfo * ci );

    
	ConnectionInfo *			m_ListenConnection;

    
	mutable Mutex				m_ConnectionsMutex;
	Array< ConnectionInfo * >	m_Connections;

	bool						m_ShuttingDown;

	
    NetworkStartupHelper m_EnsureNetworkStarted;
};


#line 135 "c:\\Users\\Franta\\p4\\Code\\Core/Network/TCPConnectionPool.h"
#line 11 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\protocol\\Client.h"






class Job;
namespace Protocol
{
	class IMessage;
	class MsgJobResult;
	class MsgRequestJob;
	class MsgRequestManifest;
	class MsgRequestFile;
	class MsgServerStatus;
}
class ToolManifest;



class Client : public TCPConnectionPool
{
public:
	Client( const Array< AString > & workerList );
	~Client();

private:
	virtual void OnDisconnected( const ConnectionInfo * connection );
	virtual void OnReceive( const ConnectionInfo * connection, void * data, uint32_t size, bool & keepMemory );

	void Process( const ConnectionInfo * connection, const Protocol::MsgRequestJob * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgJobResult *, const void * payload, size_t payloadSize );
	void Process( const ConnectionInfo * connection, const Protocol::MsgRequestManifest * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgRequestFile * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgServerStatus * msg );

	const ToolManifest * FindManifest( const ConnectionInfo * connection, uint64_t toolId ) const;

	static uint32_t ThreadFuncStatic( void * param );
	void			ThreadFunc();

	void			LookForWorkers();
	void			CommunicateJobAvailability();
	void			CheckForTimeouts();

	Array< AString >	m_WorkerList;	
	volatile bool		m_ShouldExit;	
	volatile bool		m_Exited;		
	Thread::ThreadHandle m_Thread;		

	
	Timer				m_StatusUpdateTimer;

	struct ServerState
	{
		explicit ServerState();

		const ConnectionInfo *	m_Connection;

		Mutex					m_Mutex;
		const Protocol::IMessage * m_CurrentMessage;
		Timer					m_DelayTimer;
		uint32_t				m_NumJobsAvailable;		
		Array< Job * >			m_Jobs;					

		Timer					m_StatusTimer;

		bool					m_Denylisted;
	};
	Mutex					m_ServerListMutex;
	Array< ServerState >	m_ServerList;
};


#line 86 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\protocol\\Client.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"

#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Protocol/Protocol.h"


#pragma once









class ConnectionInfo;
class ConstMemoryStream;
class MemoryStream;
class TCPConnectionPool;








	
#line 27 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Protocol/Protocol.h"



namespace Protocol
{
	enum { PROTOCOL_PORT = 31264 };	
	enum { PROTOCOL_VERSION = 14 };

	enum { SERVER_STATUS_FREQUENCY_MS = 1000 }; 
	enum { SERVER_STATUS_TIMEOUT = 5000 };		

	
	
	enum MessageType
	{
		MSG_CONNECTION			= 1, 
		MSG_STATUS				= 2, 

		MSG_REQUEST_JOB			= 3, 
		MSG_NO_JOB_AVAILABLE	= 4, 
		MSG_JOB					= 5, 

		MSG_JOB_RESULT			= 6, 

		MSG_REQUEST_MANIFEST    = 7, 
		MSG_MANIFEST			= 8, 

		MSG_REQUEST_FILE		= 9, 
		MSG_FILE				= 10,

		MSG_SERVER_STATUS		= 11,

		NUM_MESSAGES			
	};
};





namespace Protocol
{
	
	
	class IMessage
	{
	public:
		void Send( const ConnectionInfo * connection ) const;
		void Send( const ConnectionInfo * connection, const MemoryStream & payload ) const;
		void Send( const ConnectionInfo * connection, const ConstMemoryStream & payload ) const;
		void Broadcast( TCPConnectionPool * pool ) const;

		inline MessageType	GetType() const { return m_MsgType; }
		inline bool			HasPayload() const { return m_HasPayload; }

	protected:
		IMessage( MessageType msgType, uint32_t msgSize, bool hasPayload );

		
		MessageType		m_MsgType;
		uint32_t		m_MsgSize;
		bool			m_HasPayload;
	};

	
	
	class MsgConnection : public IMessage
	{
	public:
		MsgConnection( uint32_t numJobsAvailable );

		inline uint32_t GetProtocolVersion() const { return m_ProtocolVersion; }
		inline uint32_t GetNumJobsAvailable() const { return m_NumJobsAvailable; }
		const char * GetHostName() const { return m_HostName; }
	private:
		uint32_t		m_ProtocolVersion;
		uint32_t		m_NumJobsAvailable;
		char			m_HostName[ 64 ];
	};

	
	
	class MsgStatus : public IMessage
	{
	public:
		MsgStatus( uint32_t numJobsAvailable );

		inline uint32_t GetNumJobsAvailable() const { return m_NumJobsAvailable; }
	private:
		uint32_t		m_NumJobsAvailable;
	};

	
	
	class MsgRequestJob : public IMessage
	{
	public:
		MsgRequestJob();
	};

	
	
	class MsgNoJobAvailable : public IMessage
	{
	public:
		MsgNoJobAvailable();
	};

	
	
	class MsgJob : public IMessage
	{
	public:
		MsgJob( uint64_t toolId );

		inline uint64_t GetToolId() const { return m_ToolId; }
	private:
		uint64_t m_ToolId;
	};

	
	
	class MsgJobResult : public IMessage
	{
	public:
		MsgJobResult();
	};

	
	
	class MsgRequestManifest : public IMessage
	{
	public:
		explicit MsgRequestManifest( uint64_t toolId );

		inline uint64_t GetToolId() const { return m_ToolId; }
	private:
		uint64_t m_ToolId;
	};

	
	
	class MsgManifest : public IMessage
	{
	public:
		explicit MsgManifest( uint64_t toolId );

		inline uint64_t GetToolId() const { return m_ToolId; }
	private:
		uint64_t m_ToolId;
	};

	
	
	class MsgRequestFile : public IMessage
	{
	public:
		MsgRequestFile( uint64_t toolId, uint32_t fileId );

		inline uint64_t GetToolId() const { return m_ToolId; }
		inline uint32_t GetFileId() const { return m_FileId; }
	private:
		uint64_t m_ToolId;
		uint32_t m_FileId;
	};

	
	
	class MsgFile : public IMessage
	{
	public:
		MsgFile( uint64_t toolId, uint32_t fileId );

		inline uint64_t GetToolId() const { return m_ToolId; }
		inline uint32_t GetFileId() const { return m_FileId; }
	private:
		uint64_t m_ToolId;
		uint32_t m_FileId;
	};

	
	
	class MsgServerStatus : public IMessage
	{
	public:
		MsgServerStatus();
	};
};


#line 218 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/Protocol/Protocol.h"
#line 11 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"













#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Random.h"


#pragma once









class Random
{
public:
	static const uint32_t CORE_RAND_MAX = 32767;

	
	Random();

	
	inline Random( uint32_t seed ) : m_Seed( seed ) {}

	
    uint32_t GetRand();

	
    float GetRandFloat()
    {
        return ( (float) GetRand() ) / ( (float)CORE_RAND_MAX );
    }
    
	
    uint32_t GetRandIndex( uint32_t size )
    {
        return ( (uint32_t)( (float) size * ( GetRand() / (CORE_RAND_MAX + 1.0) ) ) );
    }

	
	inline void		SetSeed( uint32_t seed ) { m_Seed = seed; }
    inline uint32_t GetSeed() const { return m_Seed; }
private:
	uint32_t m_Seed;
};


#line 48 "c:\\Users\\Franta\\p4\\Code\\Core/Math/Random.h"
#line 25 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"










Client::Client( const Array< AString > & workerList )
	: m_WorkerList( workerList )
	, m_ShouldExit( false )
	, m_Exited( false )
{
	
	m_ServerList.SetSize( workerList.GetSize() );

	m_Thread = Thread::CreateThread( ThreadFuncStatic,
									 "Client",
									 ( 64 * (1024) ),
									 this );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Thread ) ) { if ( AssertHandler::Failure( "m_Thread", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 47 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



Client::~Client()
{
	SetShuttingDown();

	m_ShouldExit = true;
	while ( m_Exited == false )
	{
		Thread::Sleep( 1 );
	}

	ShutdownAllConnections();

	Thread::CloseHandle( m_Thread );
}


 void Client::OnDisconnected( const ConnectionInfo * connection )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( connection ) ) { if ( AssertHandler::Failure( "connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 70 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 72 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	MutexHolder mh( m_ServerListMutex );
	if ( ss->m_Jobs.IsEmpty() == false )
	{
		Job ** it = ss->m_Jobs.Begin();
		const Job * const * end = ss->m_Jobs.End();
		while ( it != end )
		{
			JobQueue::Get().ReturnUnfinishedDistributableJob( *it );
			++it;
		}
		ss->m_Jobs.Clear();
	}

	
	
	::Free( (void *)( ss->m_CurrentMessage ) );

	ss->m_Connection = nullptr;
	ss->m_CurrentMessage = nullptr;
}



 uint32_t Client::ThreadFuncStatic( void * param )
{
	Client * c = (Client *)param;
	c->ThreadFunc();
	return 0;
}



void Client::ThreadFunc()
{
	
	m_StatusUpdateTimer.Start( ( 1.0f ) * 0.5f );

	for ( ;; )
	{
		LookForWorkers();
		if ( m_ShouldExit )
		{
			break;
		}

		CommunicateJobAvailability();
		if ( m_ShouldExit )
		{
			break;
		}

		CheckForTimeouts();
		if ( m_ShouldExit )
		{
			break;
		}

		Thread::Sleep( 1 );
	}

	m_Exited = true;
}



void Client::LookForWorkers()
{
	MutexHolder mh( m_ServerListMutex );

	const size_t numWorkers( m_ServerList.GetSize() );

	
	size_t numConnections = 0;
	for ( size_t i=0; i<numWorkers; i++ )
	{
		if ( m_ServerList[ i ].m_Connection )
		{
			numConnections++;
		}
	}

	
	if ( numConnections >= ( 15 ) )
	{
		return;
	}

	
	if ( numConnections == numWorkers )
	{
		return;
	}

	
	
	
	Random r;
	size_t startIndex = r.GetRandIndex( (uint32_t)numWorkers );

	
	for ( size_t j=0; j<numWorkers; j++ )
	{
		const size_t i( ( j + startIndex ) % numWorkers );

		ServerState & ss = m_ServerList[ i ];
		if ( ss.m_Connection )
		{
			continue;
		}

		
		if ( ss.m_Denylisted )
		{
			continue;
		}

		
		MutexHolder mhSS( ss.m_Mutex );

		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss.m_Jobs.IsEmpty() ) ) { if ( AssertHandler::Failure( "ss.m_Jobs.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 193 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		if ( ss.m_DelayTimer.GetElapsed() < ( 10.0f ) )
		{
			continue;
		}

		const ConnectionInfo * ci = Connect( m_WorkerList[ i ], Protocol::PROTOCOL_PORT );
		if ( ci == nullptr )
		{
			ss.m_DelayTimer.Start(); 
		}
		else
		{
			const uint32_t numJobsAvailable( JobQueue::IsValid() ? (uint32_t)JobQueue::Get().GetNumDistributableJobsAvailable() : 0 );

			ci->SetUserData( &ss );
			ss.m_Connection = ci; 
			ss.m_NumJobsAvailable = numJobsAvailable;
			ss.m_StatusTimer.Start();

			
			Protocol::MsgConnection msg( numJobsAvailable );
			MutexHolder mh2( ss.m_Mutex );
			msg.Send( ci );
		}

		
		return;
	}
}



void Client::CommunicateJobAvailability()
{
	
	if ( m_StatusUpdateTimer.GetElapsed() < ( 1.0f ) )
	{
		return;
	}

	m_StatusUpdateTimer.Start(); 

	
	if ( !JobQueue::IsValid() )
	{
		return;
	}

	
	uint32_t numJobsAvailable = (uint32_t)JobQueue::Get().GetNumDistributableJobsAvailable();
	Protocol::MsgStatus msg( numJobsAvailable );

	MutexHolder mh( m_ServerListMutex );
	if ( m_ServerList.IsEmpty() )
	{
		return; 
	}

	
	ServerState * it = m_ServerList.Begin();
	const ServerState * const end = m_ServerList.End();
	while ( it != end )
	{
		if ( it->m_Connection )
		{
			MutexHolder ssMH( it->m_Mutex );
			if ( it->m_NumJobsAvailable != numJobsAvailable )
			{
				msg.Send( it->m_Connection );
				it->m_NumJobsAvailable = numJobsAvailable;
			}
		}
		++it;
	}
}



void Client::CheckForTimeouts()
{
	MutexHolder mh( m_ServerListMutex );

	
	const ServerState * const end = m_ServerList.End();
	for ( ServerState * it = m_ServerList.Begin(); it != end; ++it )
	{
		ServerState & ss = *it;
		if ( ss.m_Connection )
		{
			MutexHolder ssMH( it->m_Mutex );
			if ( ss.m_StatusTimer.GetElapsedMS() >= Protocol::SERVER_STATUS_TIMEOUT )
			{
				Disconnect( ss.m_Connection );
			}
		}
		else
		{
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss.m_Jobs.IsEmpty() ) ) { if ( AssertHandler::Failure( "ss.m_Jobs.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 292 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		}
	}
}



 void Client::OnReceive( const ConnectionInfo * connection, void * data, uint32_t size, bool & keepMemory )
{
	keepMemory = true; 

	MutexHolder mh( m_ServerListMutex );

	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 306 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	void * payload = nullptr;
	size_t payloadSize = 0;
	if ( ss->m_CurrentMessage == nullptr )
	{
		
		ss->m_CurrentMessage = reinterpret_cast< const Protocol::IMessage * >( data );
		if ( ss->m_CurrentMessage->HasPayload() )
		{
			return;
		}
	}
	else
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss->m_CurrentMessage->HasPayload() ) ) { if ( AssertHandler::Failure( "ss->m_CurrentMessage->HasPayload()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 323 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		payload = data;
		payloadSize = size;
	}

	
	const Protocol::IMessage * imsg = ss->m_CurrentMessage;
	Protocol::MessageType messageType = imsg->GetType();

	(void)0;

	switch ( messageType )
	{
		case Protocol::MSG_REQUEST_JOB:
		{
			const Protocol::MsgRequestJob * msg = static_cast< const Protocol::MsgRequestJob * >( imsg );
			Process( connection, msg ); 
			break;
		}
		case Protocol::MSG_JOB_RESULT:
		{
			const Protocol::MsgJobResult * msg = static_cast< const Protocol::MsgJobResult * >( imsg );
			Process( connection, msg, payload, payloadSize ); 
			break;
		}
		case Protocol::MSG_REQUEST_MANIFEST:
		{
			const Protocol::MsgRequestManifest * msg = static_cast< const Protocol::MsgRequestManifest * >( imsg );
			Process( connection, msg ); 
			break;
		}
		case Protocol::MSG_REQUEST_FILE:
		{
			const Protocol::MsgRequestFile * msg = static_cast< const Protocol::MsgRequestFile * >( imsg );
			Process( connection, msg ); 
			break;
		}
		case Protocol::MSG_SERVER_STATUS:
		{
			const Protocol::MsgServerStatus * msg = static_cast< const Protocol::MsgServerStatus * >( imsg );
			Process( connection, msg ); 
			break;
		}
		default:
		{
			
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 369 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			Disconnect( connection );
			break;
		}
	}

	
	::Free( (void *)( ss->m_CurrentMessage ) );
	::Free( payload );
	ss->m_CurrentMessage = nullptr;
}



void Client::Process( const ConnectionInfo * connection, const Protocol::MsgRequestJob * )
{
	if ( JobQueue::IsValid() == false )
	{
		return;
	}

	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 391 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( ss->m_Denylisted )
	{
		MutexHolder mh( ss->m_Mutex );
		Protocol::MsgNoJobAvailable msg;
		msg.Send( connection );
		return;
	}

	Job * job = JobQueue::Get().GetDistributableJobToProcess( true );
	if ( job == nullptr )
	{
		
		
		MutexHolder mh( ss->m_Mutex );
		Protocol::MsgNoJobAvailable msg;
		msg.Send( connection );
		return;
	}

	
	MemoryStream stream;
	job->Serialize( stream );

	MutexHolder mh( ss->m_Mutex );

	ss->m_Jobs.Append( job ); 

	
	Node * n = job->GetNode()->CastTo< ObjectNode >()->GetCompiler();
	const ToolManifest & manifest = n->CastTo< CompilerNode >()->GetManifest();
	uint64_t toolId = manifest.GetToolId();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( toolId ) ) { if ( AssertHandler::Failure( "toolId", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 425 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	AStackString<> address; 
	TCPConnectionPool::GetAddressAsString( connection->GetRemoteAddress(), address );
	do { FLog::Build( "-> Obj: %s <REMOTE: %s>\n",job->GetNode()->GetName().Get(), address.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	Protocol::MsgJob msg( toolId );
	msg.Send( connection, stream );
}



void Client::Process( const ConnectionInfo * connection, const Protocol::MsgJobResult *, const void * payload, size_t payloadSize )
{
	
	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 442 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	ConstMemoryStream ms( payload, payloadSize );

	uint32_t jobId = 0;
	ms.Read( jobId );

	AStackString<> name;
	ms.Read( name );

	bool result = false;
	ms.Read( result );

	bool systemError = false;
	ms.Read( systemError );

	Array< AString > messages;
	ms.Read( messages );

	uint32_t buildTime;
	ms.Read( buildTime );

	
	uint32_t size = 0;
	ms.Read( size );
	const void * data = (const char *)ms.GetData() + ms.Tell();

	
	bool cancelled( false );
	Job * job = JobQueue::Get().OnReturnRemoteJob( jobId, cancelled );

	{
		MutexHolder mh( ss->m_Mutex );
		Job ** iter = ss->m_Jobs.Find( job );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( iter ) ) { if ( AssertHandler::Failure( "iter", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 476 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		ss->m_Jobs.Erase( iter );
	}

	
	if ( cancelled )
	{
		
		return;
	}

	if ( result == true )
	{
		

		ObjectNode * objectNode = job->GetNode()->CastTo< ObjectNode >();
		const AString & nodeName = objectNode->GetName();
		if ( Node::EnsurePathExistsForFile( nodeName ) == false )
		{
			do { FLog::Error( "Failed to create path for '%s'",nodeName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			result = false;
		}
		else
		{
			const ObjectNode * on = job->GetNode()->CastTo< ObjectNode >();
			const uint32_t firstFileSize = *(uint32_t *)data;
			const uint32_t secondFileSize = on->IsUsingPDB() ? *(uint32_t *)( (const char *)data + sizeof( uint32_t ) + firstFileSize ) : 0;

			FileStream fs;
			if ( fs.Open( nodeName.Get(), FileStream::WRITE_ONLY ) == false )
			{
				do { FLog::Error( "Failed to create file '%s'",nodeName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				result = false;
			}
			else if ( fs.WriteBuffer( (const char *)data + sizeof( uint32_t ), firstFileSize ) != firstFileSize )
			{
				do { FLog::Error( "Failed to write file '%s'",nodeName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
				result = false;
			}
			else if ( on->IsUsingPDB() ) 
			{
				data = (const void *)( (const char *)data + sizeof( uint32_t ) + firstFileSize );
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( firstFileSize + secondFileSize + ( sizeof( uint32_t ) * 2 ) ) == size ) ) { if ( AssertHandler::Failure( "( firstFileSize + secondFileSize + ( sizeof( uint32_t ) * 2 ) ) == size", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 518 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

				AStackString<> pdbName;
				on->GetPDBName( pdbName );
				FileStream fs2;
				if ( fs2.Open( pdbName.Get(), FileStream::WRITE_ONLY ) == false )
				{
					do { FLog::Error( "Failed to create file '%s'",pdbName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					result = false;
				}
				else if ( fs2.WriteBuffer( (const char *)data + sizeof( uint32_t ), secondFileSize ) != secondFileSize )
				{
					do { FLog::Error( "Failed to write file '%s'",pdbName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					result = false;
				}
			}

			if ( result == true )
			{
				
				fs.Close();
				FileNode * f = (FileNode *)job->GetNode();
				f->m_Stamp = FileIO::GetFileLastWriteTime( nodeName );

				
				f->SetLastBuildTime( buildTime );
				f->SetStatFlag(Node::STATS_BUILT);
				f->SetStatFlag(Node::STATS_BUILT_REMOTE);

				
				if ( FBuild::Get().GetOptions().m_UseCacheWrite &&
						objectNode->ShouldUseCache() )
				{
					objectNode->WriteToCache( job );
				}
			}
		}
	}
	else
	{
		
		const AString & nodeName = job->GetNode()->GetName();
		AStackString< 8192 > failureOutput;
		failureOutput.Format( "PROBLEM: %s\n", nodeName.Get() );
		for ( const AString * it = messages.Begin(); it != messages.End(); ++it )
		{
			failureOutput += *it;
		}

		
		if ( systemError )
		{
			
			ss->m_Denylisted = true;

			
			job->OnSystemError();

			
			const size_t workerIndex = ( ss - m_ServerList.Begin() );
			const AString & workerName = m_WorkerList[ workerIndex ];
			do { if ( FLog::ShowInfo() ) { FLog::Info( "Remote System Failure!\n" " - Deny listed Worker: %s\n" " - Node		         : %s\n" " - Job Error Count   : %u / %u\n",workerName.Get(), job->GetNode()->GetName().Get(), job->GetSystemErrorCount(), ( 3 ) ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
#line 587 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp"

			
			if ( job->GetSystemErrorCount() < ( 3 ) )
			{
				
				JobQueue::Get().ReturnUnfinishedDistributableJob( job, systemError );
				return;
			}

			
			
			AStackString<> tmp;
			tmp.Format( "FBuild: Error: Task failed on %u different workers\n", (uint32_t)( 3 ) );
			if ( failureOutput.EndsWith( '\n' ) == false )
			{
				failureOutput += '\n';
			}
			failureOutput += tmp;
		}

		Node::DumpOutput( nullptr, failureOutput.Get(), failureOutput.GetLength(), nullptr );
	}

	JobQueue::Get().FinishedProcessingJob( job, result, true, false ); 
}



void Client::Process( const ConnectionInfo * connection, const Protocol::MsgRequestManifest * msg )
{
	
	const uint64_t toolId = msg->GetToolId();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( toolId ) ) { if ( AssertHandler::Failure( "toolId", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 619 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	const ToolManifest * manifest = FindManifest( connection, toolId );

	if ( manifest == nullptr )
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 625 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		Disconnect( connection );
		return;
	}

	MemoryStream ms;
	manifest->Serialize( ms );

	
	Protocol::MsgManifest resultMsg( toolId );
	resultMsg.Send( connection, ms );
}



void Client::Process( const ConnectionInfo * connection, const Protocol::MsgRequestFile * msg )
{
	
	const uint64_t toolId = msg->GetToolId();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( toolId != 0 ) ) { if ( AssertHandler::Failure( "toolId != 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 644 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
	const ToolManifest * manifest = FindManifest( connection, toolId );

	if ( manifest == nullptr )
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 650 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		Disconnect( connection );
		return;
	}

	const uint32_t fileId = msg->GetFileId();
	size_t dataSize( 0 );
	const void * data = manifest->GetFileData( fileId, dataSize );
	if ( !data )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 660 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		Disconnect( connection );
		return;
	}

	ConstMemoryStream ms( data, dataSize );

	
	Protocol::MsgFile resultMsg( toolId, fileId );
	resultMsg.Send( connection, ms );
}



void Client::Process( const ConnectionInfo * connection, const Protocol::MsgServerStatus * msg )
{
	(void)msg;

	
	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 680 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	MutexHolder mh( ss->m_Mutex );
	ss->m_StatusTimer.Start();
}



const ToolManifest * Client::FindManifest( const ConnectionInfo * connection, uint64_t toolId ) const
{
	ServerState * ss = (ServerState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ss ) ) { if ( AssertHandler::Failure( "ss", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Client.cpp", 691 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	MutexHolder mh( ss->m_Mutex );

	for ( Job ** it = ss->m_Jobs.Begin();
		  it != ss->m_Jobs.End();
		  ++it )
	{
		Node * n = ( *it )->GetNode()->CastTo< ObjectNode >()->GetCompiler();
		const ToolManifest & m = n->CastTo< CompilerNode >()->GetManifest();
		if ( m.GetToolId() == toolId )
		{
			
			return &m;
		}
	}

	return nullptr;
}



Client::ServerState::ServerState() 
	: m_Connection( nullptr )
	, m_CurrentMessage( nullptr ) 
	, m_Jobs( 16, true )
	, m_Denylisted( false )
{ 
	m_DelayTimer.Start( 999.0f );
}


#line 169 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Protocol/Protocol.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp"









#line 17 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp"






























Protocol::IMessage::IMessage( Protocol::MessageType msgType, uint32_t msgSize, bool hasPayload )
	: m_MsgType( msgType )
	, m_MsgSize( msgSize )
	, m_HasPayload( hasPayload )
{
}



void Protocol::IMessage::Send( const ConnectionInfo * connection ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( connection ) ) { if ( AssertHandler::Failure( "connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 58 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_HasPayload == false ) ) { if ( AssertHandler::Failure( "m_HasPayload == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 59 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	TCPConnectionPool & pool = connection->GetTCPConnectionPool();
	pool.Send( connection, this, m_MsgSize );
}



void Protocol::IMessage::Send( const ConnectionInfo * connection, const MemoryStream & payload ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( connection ) ) { if ( AssertHandler::Failure( "connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 70 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_HasPayload == true ) ) { if ( AssertHandler::Failure( "m_HasPayload == true", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 71 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	TCPConnectionPool & pool = connection->GetTCPConnectionPool();
	pool.Send( connection, this, m_MsgSize );
	pool.Send( connection, payload.GetData(), payload.GetSize() );
}



void Protocol::IMessage::Send( const ConnectionInfo * connection, const ConstMemoryStream & payload ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( connection ) ) { if ( AssertHandler::Failure( "connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 82 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_HasPayload == true ) ) { if ( AssertHandler::Failure( "m_HasPayload == true", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 83 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	TCPConnectionPool & pool = connection->GetTCPConnectionPool();
	pool.Send( connection, this, m_MsgSize );
	pool.Send( connection, payload.GetData(), payload.GetSize() );
}



void Protocol::IMessage::Broadcast( TCPConnectionPool * pool ) const
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( pool ) ) { if ( AssertHandler::Failure( "pool", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 94 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_HasPayload == false ) ) { if ( AssertHandler::Failure( "m_HasPayload == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 95 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	pool->Broadcast( this, m_MsgSize );
}



Protocol::MsgConnection::MsgConnection( uint32_t numJobsAvailable )
	: Protocol::IMessage( Protocol::MSG_CONNECTION, sizeof( MsgConnection ), false )
	, m_ProtocolVersion( PROTOCOL_VERSION )
	, m_NumJobsAvailable( numJobsAvailable )
{
	if ( ::gethostname( m_HostName, 64 ) != 0 )
	{
		AString::Copy( "Unavailable", m_HostName, 12 ); 
	}
}



Protocol::MsgStatus::MsgStatus( uint32_t numJobsAvailable )
	: Protocol::IMessage( Protocol::MSG_STATUS, sizeof( MsgStatus ), false )
	, m_NumJobsAvailable( numJobsAvailable )
{
}



Protocol::MsgRequestJob::MsgRequestJob()
	: Protocol::IMessage( Protocol::MSG_REQUEST_JOB, sizeof( MsgRequestJob ), false )
{
}



Protocol::MsgNoJobAvailable::MsgNoJobAvailable()
	: Protocol::IMessage( Protocol::MSG_NO_JOB_AVAILABLE, sizeof( MsgNoJobAvailable ), false )
{
}



Protocol::MsgJob::MsgJob( uint64_t toolId )
	: Protocol::IMessage( Protocol::MSG_JOB, sizeof( MsgJob ), true )
	, m_ToolId( toolId )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( toolId ) ) { if ( AssertHandler::Failure( "toolId", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Protocol.cpp", 142 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



Protocol::MsgJobResult::MsgJobResult()
	: Protocol::IMessage( Protocol::MSG_JOB_RESULT, sizeof( MsgJobResult ), true )
{
}



Protocol::MsgRequestManifest::MsgRequestManifest( uint64_t toolId )
	: Protocol::IMessage( Protocol::MSG_REQUEST_MANIFEST, sizeof( MsgRequestManifest ), false )
	, m_ToolId( toolId )
{
}



Protocol::MsgManifest::MsgManifest( uint64_t toolId )
	: Protocol::IMessage( Protocol::MSG_MANIFEST, sizeof( MsgManifest ), true )
	, m_ToolId( toolId )
{
}



Protocol::MsgRequestFile::MsgRequestFile( uint64_t toolId, uint32_t fileId )
	: Protocol::IMessage( Protocol::MSG_REQUEST_FILE, sizeof( MsgRequestFile ), false )
	, m_ToolId( toolId )
	, m_FileId( fileId )
{
}



Protocol::MsgFile::MsgFile( uint64_t toolId, uint32_t fileId )
	: Protocol::IMessage( Protocol::MSG_FILE, sizeof( MsgFile ), true )
	, m_ToolId( toolId )
	, m_FileId( fileId )
{
}



Protocol::MsgServerStatus::MsgServerStatus()
	: Protocol::IMessage( Protocol::MSG_SERVER_STATUS, sizeof( MsgServerStatus ), false )
{}


#line 172 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Protocol/Server.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"

#line 1 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\protocol\\Server.h"


#pragma once










class Job;
namespace Protocol
{
	class IMessage;
	class MsgConnection;
	class MsgJob;
	class MsgManifest;
	class MsgNoJobAvailable;
	class MsgStatus;
	class MsgFile;
}
class ToolManifest;



class Server : public TCPConnectionPool
{
public:
	Server();
	~Server();

	static void GetHostForJob( const Job * job, AString & hostName );

	bool IsSynchingTool( AString & statusStr ) const;
	void StopRequestingJobs() { m_RequestJobs = false; }

private:
	
	virtual void OnConnected( const ConnectionInfo * connection );
	virtual void OnDisconnected( const ConnectionInfo * connection );
	virtual void OnReceive( const ConnectionInfo * connection, void * data, uint32_t size, bool & keepMemory );

	
	void Process( const ConnectionInfo * connection, const Protocol::MsgConnection * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgStatus * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgNoJobAvailable * msg );
	void Process( const ConnectionInfo * connection, const Protocol::MsgJob * msg, const void * payload, size_t payloadSize );
	void Process( const ConnectionInfo * connection, const Protocol::MsgManifest * msg, const void * payload, size_t payloadSize );
	void Process( const ConnectionInfo * connection, const Protocol::MsgFile * msg, const void * payload, size_t payloadSize );

	static uint32_t ThreadFuncStatic( void * param );
	void			ThreadFunc();

	void			FindNeedyClients();
	void			FinalizeCompletedJobs();
	void			SendServerStatus();
	void			CheckWaitingJobs( const ToolManifest * manifest );

	void			RequestMissingFiles( const ConnectionInfo * connection, ToolManifest * manifest ) const;

	struct ClientState
	{
		ClientState( const ConnectionInfo * ci ) : m_CurrentMessage( nullptr ), m_Connection( ci ), m_NumJobsAvailable( 0 ), m_NumJobsRequested( 0 ), m_NumJobsActive( 0 ), m_WaitingJobs( 16, true ) {}

		inline bool operator < ( const ClientState & other ) const { return ( m_NumJobsAvailable > other.m_NumJobsAvailable ); }

		Mutex					m_Mutex;

		const Protocol::IMessage * m_CurrentMessage;
		const ConnectionInfo *	m_Connection;
		uint32_t				m_NumJobsAvailable;
		uint32_t				m_NumJobsRequested;
		uint32_t				m_NumJobsActive;

		AString					m_HostName;

		Array< Job * >			m_WaitingJobs; 

		Timer					m_StatusTimer;
	};

	volatile bool			m_ShouldExit;	
	volatile bool			m_Exited;		
	bool					m_RequestJobs;  
	Thread::ThreadHandle	m_Thread;		
	Mutex					m_ClientListMutex;
	Array< ClientState * >	m_ClientList;

	mutable Mutex			m_ToolManifestsMutex;
	Array< ToolManifest * > m_Tools;
};


#line 98 "c:\\users\\franta\\p4\\code\\tools\\fbuild\\fbuildcore\\protocol\\Server.h"
#line 9 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/JobQueueRemote.h"


#pragma once













class Node;
class Job;
class WorkerThread;



class JobQueueRemote : public Singleton< JobQueueRemote >
{
public:
	JobQueueRemote( uint32_t numWorkerThreads );
	~JobQueueRemote();

	
	void QueueJob( Job * job );
	Job * GetCompletedJob();
	void CancelJobsWithUserData( void * userData );

	
	void SignalStopWorkers();
	bool HaveWorkersStopped() const;

	inline size_t GetNumWorkers() const { return m_Workers.GetSize(); }
	void		  GetWorkerStatus( size_t index, AString & hostName, AString & status, bool & isIdle ) const;
private:
	
	friend class WorkerThread;
	friend class WorkerThreadRemote;
	Job *		GetJobToProcess();
	static Node::BuildResult DoBuild( Job * job, bool racingRemoteJob );
	void		FinishedProcessingJob( Job * job, bool result );

	
	static bool	ReadResults( Job * job );

	mutable Mutex		m_PendingJobsMutex;
	Array< Job * >		m_PendingJobs;
	mutable Mutex		m_InFlightJobsMutex;
	Array< Job * >		m_InFlightJobs;
	Mutex				m_CompletedJobsMutex;
	Array< Job * >		m_CompletedJobs;
	Array< Job * >		m_CompletedJobsFailed;

	Array< WorkerThread * > m_Workers;
};


#line 64 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/JobQueueRemote.h"
#line 15 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"
#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/WorkerThreadRemote.h"


#pragma once










class Job;



class WorkerThreadRemote : public WorkerThread
{
public:
	WorkerThreadRemote( uint32_t threadIndex );
	virtual ~WorkerThreadRemote();

	void GetStatus( AString & hostName, AString & status, bool & isIdle ) const;

	
	static void		SetNumCPUsToUse( uint32_t c ) { s_NumCPUsToUse = c; }
	static uint32_t GetNumCPUsToUse() { return s_NumCPUsToUse; }
private:
	virtual void Main();

	bool IsEnabled() const;
	
	mutable Mutex m_CurrentJobMutex;
	Job * m_CurrentJob;

	
	static uint32_t s_NumCPUsToUse;
};


#line 43 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/WorkerPool/WorkerThreadRemote.h"
#line 16 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"











Server::Server()
	: m_ShouldExit( false )
	, m_Exited( false )
	, m_RequestJobs( true )
	, m_ClientList( 32, true )
{
	m_Thread = Thread::CreateThread( ThreadFuncStatic,
									 "Server",
									 ( 64 * (1024) ),
									 this );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Thread ) ) { if ( AssertHandler::Failure( "m_Thread", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 37 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



Server::~Server()
{
	m_ShouldExit = true;
	while ( m_Exited == false )
	{
		Thread::Sleep( 1 );
	}

	ShutdownAllConnections();

	Thread::CloseHandle( m_Thread );

	const ToolManifest * const * end = m_Tools.End();
	for ( ToolManifest ** it = m_Tools.Begin(); it != end; ++it )
	{
		delete *it;
	}
}



 void Server::GetHostForJob( const Job * job, AString & hostName )
{
	const ClientState * cs = (const ClientState *)job->GetUserData();
	if ( cs )
	{
		hostName = cs->m_HostName;
	}
	else
	{
		hostName.Clear();
	}
}



bool Server::IsSynchingTool( AString & statusStr ) const
{
	MutexHolder manifestMH( m_ToolManifestsMutex ); 

	const ToolManifest * const * end = m_Tools.End();
	ToolManifest ** it = m_Tools.Begin();
	while ( it != end )
	{
		if ( ( *it )->IsSynchronized() == false )
		{
			uint32_t synchDone;
			uint32_t synchTotal;
			bool synching = ( *it )->GetSynchronizationStatus( synchDone, synchTotal );
			if ( synching )
			{
				statusStr.Format( "Synchronizing Compiler %2.1f / %2.1f MiB\n", 
									(float)synchDone / (float)(1024 * 1024),
									(float)synchTotal / (float)(1024 * 1024) );
				return true;
			}
		}
		++it;
	}

	return false; 
}



 void Server::OnConnected( const ConnectionInfo * connection )
{
	ClientState * cs = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 109 ) ClientState( connection );
	connection->SetUserData( cs );

	MutexHolder mh( m_ClientListMutex );
	m_ClientList.Append( cs );
}


 void Server::OnDisconnected( const ConnectionInfo * connection )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( connection ) ) { if ( AssertHandler::Failure( "connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 119 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	ClientState * cs = (ClientState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs ) ) { if ( AssertHandler::Failure( "cs", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 121 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	
	
	JobQueueRemote & jqr = JobQueueRemote::Get();
	jqr.CancelJobsWithUserData( cs );

	
	Array< ToolManifest * > cancelledManifests( 0, true );
	{
		MutexHolder manifestMH( m_ToolManifestsMutex );
		const ToolManifest * const * end = m_Tools.End();
		ToolManifest ** it = m_Tools.Begin();
		while ( it != end )
		{
			
			ToolManifest * tm = *it;
			if ( ( tm->IsSynchronized() == false ) &&
				 ( tm->GetUserData() == connection ) )
			{
				
				tm->CancelSynchronizingFiles();
				tm->SetUserData( nullptr );
				cancelledManifests.Append( tm );
			}
			++it;
		}
	}

	
	MutexHolder mh( m_ClientListMutex );
	ClientState ** iter = m_ClientList.Find( cs );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( iter ) ) { if ( AssertHandler::Failure( "iter", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 154 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_ClientList.Erase( iter );

	
	
	{
		ClientState ** it = m_ClientList.Begin();
		const ClientState * const * end = m_ClientList.End();
		for ( ; it != end; ++it )
		{
			ClientState * otherCS = *it;

			MutexHolder mh2( otherCS->m_Mutex );
			const Job * const * jEnd = otherCS->m_WaitingJobs.End();
			for ( Job ** jIt = otherCS->m_WaitingJobs.Begin(); jIt != jEnd; ++jIt )
			{
				Job * j = *jIt;
				ToolManifest * jMan = j->GetToolManifest();
				if ( cancelledManifests.Find( jMan ) )
				{
					RequestMissingFiles( otherCS->m_Connection, jMan );
				}
			}
		}
	}

	
	
	::Free( (void *)( cs->m_CurrentMessage ) );

	
	const Job * const * end = cs->m_WaitingJobs.End();
	for ( Job ** it=cs->m_WaitingJobs.Begin(); it!=end; ++it )
	{
		delete *it;
	}

	delete cs;
}



 void Server::OnReceive( const ConnectionInfo * connection, void * data, uint32_t size, bool & keepMemory )
{
	keepMemory = true; 

	ClientState * cs = (ClientState *)connection->GetUserData();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs ) ) { if ( AssertHandler::Failure( "cs", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 201 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	void * payload = nullptr;
	size_t payloadSize = 0;
	if ( cs->m_CurrentMessage == nullptr )
	{
		
		cs->m_CurrentMessage = reinterpret_cast< const Protocol::IMessage * >( data );
		if ( cs->m_CurrentMessage->HasPayload() )
		{
			return;
		}
	}
	else
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs->m_CurrentMessage->HasPayload() ) ) { if ( AssertHandler::Failure( "cs->m_CurrentMessage->HasPayload()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 218 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		payload = data;
		payloadSize = size;
	}


	
	const Protocol::IMessage * imsg = cs->m_CurrentMessage;
	Protocol::MessageType messageType = imsg->GetType();

	(void)0;

	switch ( messageType )
	{
		case Protocol::MSG_CONNECTION:
		{
			const Protocol::MsgConnection * msg = static_cast< const Protocol::MsgConnection * >( imsg );
			Process( connection, msg ); 
			break;
		}
		case Protocol::MSG_STATUS:
		{
			const Protocol::MsgStatus * msg = static_cast< const Protocol::MsgStatus * >( imsg );
			Process( connection, msg );
			break;
		}
		case Protocol::MSG_NO_JOB_AVAILABLE:
		{
			const Protocol::MsgNoJobAvailable * msg = static_cast< const Protocol::MsgNoJobAvailable * >( imsg );
			Process( connection, msg );
			break;
		}
		case Protocol::MSG_JOB:
		{
			const Protocol::MsgJob * msg = static_cast< const Protocol::MsgJob * >( imsg );
			Process( connection, msg, payload, payloadSize );
			break;
		}
		case Protocol::MSG_MANIFEST:
		{
			const Protocol::MsgManifest * msg = static_cast< const Protocol::MsgManifest * >( imsg );
			Process( connection, msg, payload, payloadSize );
			break;
		}
		case Protocol::MSG_FILE:
		{
			const Protocol::MsgFile * msg = static_cast< const Protocol::MsgFile * >( imsg );
			Process( connection, msg, payload, payloadSize );
			break;
		}
		default:
		{
			
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 271 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			Disconnect( connection );
			break;
		}
	}

	
	::Free( (void *)( cs->m_CurrentMessage ) );
	::Free( payload );
	cs->m_CurrentMessage = nullptr;
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgConnection * msg )
{
	
	if ( msg->GetProtocolVersion() != Protocol::PROTOCOL_VERSION )
	{
		AStackString<> remoteAddr;
		TCPConnectionPool::GetAddressAsString( connection->GetRemoteAddress(), remoteAddr );
		do { FLog::Warning( "Disconnecting '%s' due to bad protocol version\n",remoteAddr.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		Disconnect( connection );
		return;
	}

	
	ClientState * cs = (ClientState *)connection->GetUserData();
	cs->m_NumJobsAvailable = msg->GetNumJobsAvailable();
	cs->m_HostName = msg->GetHostName();
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgStatus * msg )
{
	
	ClientState * cs = (ClientState *)connection->GetUserData();
	cs->m_NumJobsAvailable = msg->GetNumJobsAvailable();
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgNoJobAvailable * )
{
	
	ClientState * cs = (ClientState *)connection->GetUserData();
	MutexHolder mh( cs->m_Mutex );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs->m_NumJobsRequested > 0 ) ) { if ( AssertHandler::Failure( "cs->m_NumJobsRequested > 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 319 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	cs->m_NumJobsRequested--;
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgJob * msg, const void * payload, size_t payloadSize )
{
	ClientState * cs = (ClientState *)connection->GetUserData();
	MutexHolder mh( cs->m_Mutex );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs->m_NumJobsRequested > 0 ) ) { if ( AssertHandler::Failure( "cs->m_NumJobsRequested > 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 329 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	cs->m_NumJobsRequested--;
	cs->m_NumJobsActive++;

	
	ConstMemoryStream ms( payload, payloadSize );

	Job * job = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 336 ) Job( ms );
	job->SetUserData( cs );

	
	const uint64_t toolId = msg->GetToolId();
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( toolId ) ) { if ( AssertHandler::Failure( "toolId", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 341 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	MutexHolder manifestMH( m_ToolManifestsMutex ); 

	ToolManifest ** found = m_Tools.FindDeref( toolId );
	ToolManifest * manifest = found ? *found : nullptr;
	if ( manifest )
	{
		job->SetToolManifest( manifest );
		if ( manifest->IsSynchronized() )
		{
			
			JobQueueRemote::Get().QueueJob( job );
			return;		
		}

		
		RequestMissingFiles( connection, manifest );
	}
	else
	{
		

		
		manifest = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 365 ) ToolManifest( toolId );
		job->SetToolManifest( manifest );
		m_Tools.Append( manifest );

		
		Protocol::MsgRequestManifest reqMsg( toolId );
		reqMsg.Send( connection );
	}

	
	cs->m_WaitingJobs.Append( job );
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgManifest * msg, const void * payload, size_t payloadSize )
{
	ToolManifest * manifest = nullptr;
	const uint64_t toolId = msg->GetToolId();
	ConstMemoryStream ms( payload, payloadSize );

	{
		MutexHolder manifestMH( m_ToolManifestsMutex ); 

		
		ToolManifest ** found = m_Tools.FindDeref( toolId );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( found ) ) { if ( AssertHandler::Failure( "found", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 391 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		manifest = *found;
		manifest->Deserialize( ms );
	}

	
	
	if ( manifest->IsSynchronized() )
	{
		CheckWaitingJobs( manifest );
		return;
	}

	RequestMissingFiles( connection, manifest );
}



void Server::Process( const ConnectionInfo * connection, const Protocol::MsgFile * msg, const void * payload, size_t payloadSize )
{
	const uint64_t toolId = msg->GetToolId();
	const uint32_t fileId = msg->GetFileId();

	
	ToolManifest * manifest = nullptr;
	{
		MutexHolder manifestMH( m_ToolManifestsMutex );

		
		ToolManifest ** found = m_Tools.FindDeref( toolId );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( found ) ) { if ( AssertHandler::Failure( "found", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 421 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		manifest = *found;
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( manifest->GetUserData() == connection ) ) { if ( AssertHandler::Failure( "manifest->GetUserData() == connection", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 423 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); (void)connection;

		if ( manifest->ReceiveFileData( fileId, payload, payloadSize ) == false )
		{
			
			do { FLog::Warning( "Failed to store fileId %u for manifest 0x%llx\n",fileId, toolId ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			Disconnect( connection );
			return;
		}

		if ( manifest->IsSynchronized() == false )
		{
			
			return;
		}
		manifest->SetUserData( nullptr );
	}

	
	
	CheckWaitingJobs( manifest );
}



void Server::CheckWaitingJobs( const ToolManifest * manifest )
{
	
    
        bool atLeastOneJobStarted = false;
    #line 454 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"

	MutexHolder mhC( m_ClientListMutex );
	const ClientState * const * end = m_ClientList.End();
	for ( ClientState ** it = m_ClientList.Begin(); it!=end; ++it )
	{
		
		ClientState * cs = *it;
		MutexHolder mh2( cs->m_Mutex );

		
		int32_t numJobs = (int32_t)cs->m_WaitingJobs.GetSize();
		for ( int32_t i=( numJobs -1 ); i >= 0; --i )
		{
			Job * job = cs->m_WaitingJobs[ i ];
			ToolManifest * manifestForThisJob = job->GetToolManifest();
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( manifestForThisJob ) ) { if ( AssertHandler::Failure( "manifestForThisJob", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 469 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			if ( manifestForThisJob == manifest )
			{
				cs->m_WaitingJobs.EraseIndex( i );
				JobQueueRemote::Get().QueueJob( job );
				(void)0;
                
                    atLeastOneJobStarted = true;
                #line 478 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp"
			}
		}
	}

	
	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( atLeastOneJobStarted ) ) { if ( AssertHandler::Failure( "atLeastOneJobStarted", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 484 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}




 uint32_t Server::ThreadFuncStatic( void * param )
{
	Server * s = (Server *)param;
	s->ThreadFunc();
	return 0;
}



void Server::ThreadFunc()
{
	while ( m_ShouldExit == false )
	{
		FindNeedyClients();

		FinalizeCompletedJobs();

		SendServerStatus();

		Thread::Sleep( 16 );
	}

	m_Exited = true;
}



void Server::FindNeedyClients()
{
	if ( m_RequestJobs == false )
	{
		return;
	}

	MutexHolder mh( m_ClientListMutex );

	
	int availableJobs = (int)WorkerThreadRemote::GetNumCPUsToUse();

	ClientState ** iter = m_ClientList.Begin();
	const ClientState * const * end = m_ClientList.End();
	for ( ; iter != end; ++iter )
	{
		ClientState * cs = *iter;

		MutexHolder mh2( cs->m_Mutex );

		
		int reservedJobs = cs->m_NumJobsRequested +
							  cs->m_NumJobsActive;
		availableJobs -= reservedJobs;
		if ( availableJobs <= 0 )
		{
			return;
		}
	}

	

	
	m_ClientList.SortDeref();

	iter = m_ClientList.Begin();
	for ( ; iter != end; ++iter )
	{
		ClientState * cs = *iter;

		MutexHolder mh2( cs->m_Mutex );

		size_t reservedJobs = cs->m_NumJobsRequested +
							  cs->m_NumJobsActive;
		if ( reservedJobs >= cs->m_NumJobsAvailable )
		{
			continue; 
		}

		
		Protocol::MsgRequestJob msg;
		msg.Send( cs->m_Connection );
		cs->m_NumJobsRequested++;
		availableJobs--;
		if ( availableJobs == 0 )
		{
			return; 
		}
	}
}



void Server::FinalizeCompletedJobs()
{
	JobQueueRemote & jcr = JobQueueRemote::Get();
	while ( Job * job = jcr.GetCompletedJob() )
	{
		
		ClientState * cs = (ClientState *)job->GetUserData();

		MutexHolder mh( m_ClientListMutex );

		bool connectionStillActive = ( m_ClientList.Find( cs ) != nullptr );
		if ( connectionStillActive )
		{
			Node::State result = job->GetNode()->GetState();
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( result == Node::UP_TO_DATE ) || ( result == Node::FAILED ) ) ) { if ( AssertHandler::Failure( "( result == Node::UP_TO_DATE ) || ( result == Node::FAILED )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 594 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

			MemoryStream ms;
			ms.Write( job->GetJobId() );
			ms.Write( job->GetNode()->GetName() );
			ms.Write( result == Node::UP_TO_DATE );
			ms.Write( job->GetSystemErrorCount() > 0 );
			ms.Write( job->GetMessages() );
			ms.Write( job->GetNode()->GetLastBuildTime() );

			
			ms.Write( (uint32_t)job->GetDataSize() );
			ms.WriteBuffer( job->GetData(), job->GetDataSize() );

			MutexHolder mh2( cs->m_Mutex );
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( cs->m_NumJobsActive ) ) { if ( AssertHandler::Failure( "cs->m_NumJobsActive", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 609 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			cs->m_NumJobsActive--;

			Protocol::MsgJobResult msg;
			msg.Send( cs->m_Connection, ms );
		}
		else
		{
			
			
		}

		delete job;
	}
}



void Server::SendServerStatus()
{
	MutexHolder mh( m_ClientListMutex );

	const ClientState * const * end = m_ClientList.End();
	for ( ClientState ** it = m_ClientList.Begin(); it !=  end; ++it )
	{
		ClientState * cs = *it;
		MutexHolder mh2( cs->m_Mutex );
		if ( cs->m_StatusTimer.GetElapsedMS() < Protocol::SERVER_STATUS_FREQUENCY_MS )
		{
			continue;
		}
		cs->m_StatusTimer.Start();

		Protocol::MsgServerStatus msg;
		msg.Send( cs->m_Connection );
	}
}



void Server::RequestMissingFiles( const ConnectionInfo * connection, ToolManifest * manifest ) const
{
	MutexHolder manifestMH( m_ToolManifestsMutex );

	const Array< ToolManifest::File > & files = manifest->GetFiles();
	const size_t numFiles = files.GetSize();
	for ( size_t i=0; i<numFiles; ++i )
	{
		const ToolManifest::File & f = files[ i ];
		if ( f.m_SyncState == ToolManifest::File::NOT_SYNCHRONIZED )
		{
			
			Protocol::MsgRequestFile reqFileMsg( manifest->GetToolId(), (uint32_t)i );
			reqFileMsg.Send( connection );

			
			manifest->MarkFileAsSynchronizing( i );

			
			
			
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( manifest->GetUserData() == nullptr ) || ( manifest->GetUserData() == connection ) ) ) { if ( AssertHandler::Failure( "( manifest->GetUserData() == nullptr ) || ( manifest->GetUserData() == connection )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Protocol\\Server.cpp", 670 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			manifest->SetUserData( (void *)connection );
		}
	}
}


#line 175 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/Job.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\Job.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\Job.cpp"









#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"


#pragma once







    
#line 13 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"



inline int32_t AtomicInc32( volatile int32_t * i )
{
	
		return _InterlockedIncrement( (volatile uint32_t *)i );
	

#line 23 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline uint32_t AtomicIncU32( volatile uint32_t * i )
{
	
		return _InterlockedIncrement( i );
	

#line 31 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline int32_t AtomicDec32( volatile int32_t * i )
{
	
		return _InterlockedDecrement( (volatile uint32_t *)i );
	

#line 39 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline uint32_t AtomicDecU32( volatile uint32_t * i )
{
	
		return _InterlockedDecrement( i );
	

#line 47 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}



inline int64_t AtomicInc64( volatile int64_t * i )
{
	
		return _InterlockedIncrement64( i );
	

#line 58 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline uint64_t AtomicIncU64( volatile uint64_t * i )
{
	
		return _InterlockedIncrement64( (volatile int64_t *)i );
	

#line 66 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline int64_t AtomicDec64( volatile int64_t * i )
{
	
		return _InterlockedDecrement64( i );
	

#line 74 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}
inline uint64_t AtomicDecU64( volatile uint64_t * i )
{
	
		return _InterlockedDecrement64( (volatile int64_t *)i );
	

#line 82 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
}


#line 86 "c:\\Users\\Franta\\p4\\Code\\Core/Process/Atomic.h"
#line 17 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\Job.cpp"





static uint32_t s_LastJobId( 0 );



Job::Job( Node * node ) 
	: m_Next( nullptr )
	, m_Node( node )
	, m_Data( nullptr )
	, m_DataSize( 0 ) 
	, m_UserData( nullptr )
	, m_DataIsCompressed( false )
	, m_IsLocal( true )
	, m_SystemErrorCount( 0 )
	, m_ToolManifest( nullptr )
{
	m_JobId = AtomicIncU32( &s_LastJobId );
}



Job::Job( IOStream & stream ) 
	: m_Next( nullptr )
	, m_Node( nullptr )
	, m_Data( nullptr )
	, m_DataSize( 0 ) 
	, m_UserData( nullptr )
	, m_IsLocal( false )
	, m_SystemErrorCount( 0 )
	, m_ToolManifest( nullptr )
{
	Deserialize( stream );
}



Job::~Job()
{
	::Free( m_Data );

	if ( m_IsLocal == false )
	{
		delete m_Node;
	}
}



void Job::OwnData( void * data, size_t size, bool compressed )
{
	::Free( m_Data );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( size <= 0xFFFFFFFF ) ) { if ( AssertHandler::Failure( "size <= 0xFFFFFFFF", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\Job.cpp", 73 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	m_Data = data;
	m_DataSize = (uint32_t)size;
	m_DataIsCompressed = compressed;
}



void Job::Error( const char * format, ... )
{
	AStackString< 8192 > buffer;

	va_list args;
	( __va_start(&args, format) );
	buffer.VFormat( format, args );
	( args = (va_list)0 );

	if ( IsLocal() )
	{
		do { FLog::Error( buffer.Get()  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}
	else
	{
		m_Messages.Append( buffer );
	}
}



void Job::Serialize( IOStream & stream )
{
	
	stream.Write( m_JobId );
	stream.Write( m_Node->GetName() );

	
	Node::SaveRemote( stream, m_Node );

	stream.Write( IsDataCompressed() );

	stream.Write( m_DataSize );
	stream.Write( m_Data, m_DataSize );
}



void Job::Deserialize( IOStream & stream )
{
	
	stream.Read( m_JobId );
	stream.Read( m_RemoteName );

	
	m_Node = Node::LoadRemote( stream );

	bool compressed;
	stream.Read( compressed );

	
	uint32_t dataSize;
	stream.Read( dataSize );
	void * data = ::AllocFileLine( dataSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\Job.cpp", 135 );
	stream.Read( data, dataSize );

	OwnData( data, dataSize, compressed );
}


#line 178 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/JobQueue.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp"















JobSubQueue::JobSubQueue()
	: m_Count( 0 )
	, m_Head( nullptr )
	, m_Tail( nullptr )
{
}



JobSubQueue::~JobSubQueue()
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Head == nullptr ) ) { if ( AssertHandler::Failure( "m_Head == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 33 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Tail == nullptr ) ) { if ( AssertHandler::Failure( "m_Tail == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 34 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Count == 0 ) ) { if ( AssertHandler::Failure( "m_Count == 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 35 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



void JobSubQueue::QueueJob( Job * job )
{
	
	MutexHolder mh( m_Mutex );

	if ( m_Head == nullptr )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Tail == nullptr ) ) { if ( AssertHandler::Failure( "m_Tail == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 47 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		m_Head = job;
		m_Tail = job;
	}
	else
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Tail ) ) { if ( AssertHandler::Failure( "m_Tail", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 53 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		m_Tail->m_Next = job;
		m_Tail = job;
	}

	++m_Count;
}



Job * JobSubQueue::RemoveJob()
{
	
	if ( m_Count == 0 )
	{
		return nullptr;
	}

	
	MutexHolder mh( m_Mutex );

	
	if ( !m_Head )
	{
		return nullptr;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Count ) ) { if ( AssertHandler::Failure( "m_Count", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 81 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	--m_Count;

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Tail ) ) { if ( AssertHandler::Failure( "m_Tail", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 85 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 

	
	Job * job = m_Head;
	m_Head = job->m_Next;

	
	if ( m_Tail == job )
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_Head == nullptr ) ) { if ( AssertHandler::Failure( "m_Head == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 94 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
		m_Tail = nullptr;
	}

	return job;
}



JobQueue::JobQueue( uint32_t numWorkerThreads ) :
	m_NumLocalJobsActive( 0 ),
	m_DistributableAvailableJobs( 1024, true ),
	m_DistributableJobsMemoryUsage( 0 ),
	m_DistributedJobsRemote( 1204, true ),
	m_DistributedJobsLocal( 128, true ),
	m_DistributedJobsCancelled( 128, true ),
	m_CompletedJobs( 1024, true ),
	m_CompletedJobsFailed( 1024, true ),
	m_CompletedJobs2( 1024, true ),
	m_CompletedJobsFailed2( 1024, true ),
	m_Workers( numWorkerThreads, false )
{
	WorkerThread::InitTmpDir();

	for ( uint32_t i=0; i<numWorkerThreads; ++i )
	{
		
		
		uint32_t threadIndex = ( i + 1 );
		WorkerThread * wt = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 123 ) WorkerThread( threadIndex );
		wt->Init();
		m_Workers.Append( wt );
	}
}



JobQueue::~JobQueue()
{
	
	SignalStopWorkers();

	
	for ( size_t i=0; i<Node::NUM_PRIORITY_LEVELS; ++i )
	{
		while( m_LocalAvailableJobs[ i ].GetCount() > 0 )
		{
			Job * job = m_LocalAvailableJobs[ i ].RemoveJob();
			delete job;
		}
	}

	
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		m_Workers[ i ]->WaitForStop();
		delete m_Workers[ i ];
	}
}



void JobQueue::SignalStopWorkers()
{
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		m_Workers[ i ]->Stop();
	}
}



bool JobQueue::HaveWorkersStopped() const
{
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		if ( m_Workers[ i ]->HasExited() == false )
		{
			return false;
		}
	}
	return true;
}



size_t JobQueue::GetNumDistributableJobsAvailable() const
{
	MutexHolder m( m_DistributableAvailableJobsMutex );
	return m_DistributableAvailableJobs.GetSize();
}



void JobQueue::GetJobStats( uint32_t & numJobs, 
						    uint32_t & numJobsActive, 
							uint32_t & numJobsDist, 
							uint32_t & numJobsDistActive ) const
{
	{
		numJobs = 0;
		for ( size_t i=0; i<Node::NUM_PRIORITY_LEVELS; ++i )
		{
			numJobs += m_LocalAvailableJobs[ i ].GetCount();
		}
		MutexHolder m( m_DistributableAvailableJobsMutex );
		numJobsDist = (uint32_t)m_DistributableAvailableJobs.GetSize();
	}
	numJobsActive = m_NumLocalJobsActive;

	MutexHolder m( m_DistributedJobsMutex );
	numJobsDistActive = (uint32_t)( m_DistributedJobsRemote.GetSize() +
									m_DistributedJobsLocal.GetSize() +
									m_DistributedJobsBeingRaced.GetSize() );
}



void JobQueue::QueueJob( Node * node )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node->GetState() == Node::DYNAMIC_DEPS_DONE ) ) { if ( AssertHandler::Failure( "node->GetState() == Node::DYNAMIC_DEPS_DONE", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 217 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	node->SetState( Node::BUILDING );

	
	if ( node->GetControlFlags() & Node::FLAG_TRIVIAL_BUILD )
	{
		Job localJob( node );
		Node::BuildResult result = DoBuild( &localJob );
		switch( result )
		{
			case Node::NODE_RESULT_FAILED:	node->SetState( Node::FAILED ); break;
			case Node::NODE_RESULT_OK:		node->SetState( Node::UP_TO_DATE ); break;
			default:						do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 231 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
		}
		return;
	}

	Job * job = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 236 ) Job( node );

	
	m_LocalAvailableJobs[ node->GetPriority() ].QueueJob( job );
}



void JobQueue::QueueJob2( Job * job )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetNode()->GetState() == Node::BUILDING ) ) { if ( AssertHandler::Failure( "job->GetNode()->GetState() == Node::BUILDING", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 246 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	{
		MutexHolder m( m_DistributableAvailableJobsMutex );
		m_DistributableAvailableJobs.Append( job );

		
		m_DistributableJobsMemoryUsage += job->GetDataSize();
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_NumLocalJobsActive > 0 ) ) { if ( AssertHandler::Failure( "m_NumLocalJobsActive > 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 256 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AtomicDecU32( &m_NumLocalJobsActive ); 
}



Job * JobQueue::GetDistributableJobToProcess( bool remote )
{
	Job * job( nullptr );
	{
		MutexHolder m( m_DistributableAvailableJobsMutex );
		if ( m_DistributableAvailableJobs.IsEmpty() )
		{
			return nullptr;
		}

		
		job = m_DistributableAvailableJobs[ 0 ];
		m_DistributableAvailableJobs.PopFront();

		
		m_DistributableJobsMemoryUsage -= job->GetDataSize();
	}

	{
		MutexHolder m( m_DistributedJobsMutex );
		if ( remote )
		{
			m_DistributedJobsRemote.Append( job );
		}
		else
		{
			m_DistributedJobsLocal.Append( job );
		}
	}

	return job;
}



Job * JobQueue::GetDistributableJobToRace()
{
	MutexHolder m( m_DistributedJobsMutex );
	if ( m_DistributedJobsRemote.IsEmpty() )
	{
		return nullptr;
	}

	
	
	Job * job = m_DistributedJobsRemote.Top();
	m_DistributedJobsRemote.Pop();
	m_DistributedJobsBeingRaced.Append( job );

	
	
	CancelledJob c( job, job->GetJobId() );
	m_DistributedJobsCancelled.Append( c );

	return job;
}



Job * JobQueue::OnReturnRemoteJob( uint32_t jobId, bool & cancelled )
{
	MutexHolder m( m_DistributedJobsMutex );
	CancelledJob * it = m_DistributedJobsCancelled.Find( jobId );
	if ( it )
	{
		cancelled = true;
		Job * cancelledJob = it->m_Job; 
		m_DistributedJobsCancelled.Erase( it );
		return cancelledJob;
	}
	cancelled = false;

	
	
	Job ** distIt = m_DistributedJobsRemote.FindDeref( jobId );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( distIt ) ) { if ( AssertHandler::Failure( "distIt", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 337 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	Job * job = *distIt;
	m_DistributedJobsRemote.Erase( distIt );
	return job;
}



void JobQueue::ReturnUnfinishedDistributableJob( Job * job, bool systemError )
{
	if ( !systemError )
	{
		MutexHolder m( m_DistributedJobsMutex );
		Job ** it = m_DistributedJobsRemote.Find( job );
		if ( it == nullptr )
		{
			
			CancelledJob * cIt = m_DistributedJobsCancelled.Find( job );
			if ( cIt )
			{
				
				m_DistributedJobsCancelled.Erase( cIt );
				return;
			}

			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 362 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			return;
		}

		m_DistributedJobsRemote.Erase( it );
	}

	
	{
		MutexHolder m( m_DistributableAvailableJobsMutex );
		m_DistributableAvailableJobs.Append( job );

		
		m_DistributableJobsMemoryUsage += job->GetDataSize();
	}
}



void JobQueue::FinalizeCompletedJobs()
{
	{
		MutexHolder m( m_CompletedJobsMutex );
		m_CompletedJobs2.Swap( m_CompletedJobs );
		m_CompletedJobsFailed2.Swap( m_CompletedJobsFailed );
	}

	
	const Job * const * end = m_CompletedJobs2.End();
	for ( Job ** i = m_CompletedJobs2.Begin();
			i != end;
			i++ )
	{
		Job * job = ( *i );
		Node * n = job->GetNode();
		if ( n->Finalize() )
		{
			n->SetState( Node::UP_TO_DATE );
		}
		else
		{
			n->SetState( Node::FAILED );
		}
		delete job;
	}
	m_CompletedJobs2.Clear();

	
	end = m_CompletedJobsFailed2.End();
	for ( Job ** i = m_CompletedJobsFailed2.Begin();
			i != end;
			i++ )
	{
		Job * job = ( *i );
		job->GetNode()->SetState( Node::FAILED );
		delete job;
	}
	m_CompletedJobsFailed2.Clear();
}



Job * JobQueue::GetJobToProcess()
{
	for ( size_t i=0; i<Node::NUM_PRIORITY_LEVELS; ++i )
	{
		Job * job = m_LocalAvailableJobs[ i ].RemoveJob();
		if ( job )
		{
			AtomicIncU32( &m_NumLocalJobsActive );
			return job;
		}
	}

	return nullptr;
}



void JobQueue::FinishedProcessingJob( Job * job, bool success, bool wasARemoteJob, bool localRaceOfRemoteJob )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetNode()->GetState() == Node::BUILDING ) ) { if ( AssertHandler::Failure( "job->GetNode()->GetState() == Node::BUILDING", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 443 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	if ( wasARemoteJob )
	{
		MutexHolder mh( m_DistributedJobsMutex );
		Job ** it = m_DistributedJobsLocal.Find( job );
		if ( it )
		{
			
			m_DistributedJobsLocal.Erase( it );
		}
		else
		{
			if ( localRaceOfRemoteJob )
			{
				Job ** dIt = m_DistributedJobsBeingRaced.Find( job );
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( dIt ) ) { if ( AssertHandler::Failure( "dIt", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 459 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
				m_DistributedJobsBeingRaced.Erase( dIt );
			}
			else
			{
				
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_DistributedJobsRemote.Find( job ) == nullptr ) ) { if ( AssertHandler::Failure( "m_DistributedJobsRemote.Find( job ) == nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 465 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); 
			}
		}
	}
	else
	{
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( m_NumLocalJobsActive > 0 ) ) { if ( AssertHandler::Failure( "m_NumLocalJobsActive > 0", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 471 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		AtomicDecU32( &m_NumLocalJobsActive );
	}

	MutexHolder m( m_CompletedJobsMutex );
	if ( success )
	{
		m_CompletedJobs.Append( job );
	}
	else
	{
		m_CompletedJobsFailed.Append( job );
	}
}



 Node::BuildResult JobQueue::DoBuild( Job * job )
{
	Timer timer; 

	Node * node = job->GetNode();

	
	
	if ( node->IsAFile() && ( node->GetType() != Node::FILE_NODE ) && ( node->GetType() != Node::COMPILER_NODE ) )
	{
		if ( Node::EnsurePathExistsForFile( node->GetName() ) == false )
		{
			
			return Node::NODE_RESULT_FAILED;
		}
	}

	Node::BuildResult result = node->DoBuild( job );

	uint32_t timeTakenMS = uint32_t( timer.GetElapsedMS() );

	if ( result == Node::NODE_RESULT_OK )
	{
		
		
		node->SetLastBuildTime( timeTakenMS );
		node->SetStatFlag( Node::STATS_BUILT );
		do { if ( FLog::ShowInfo() ) { FLog::Info( "-Build: %u ms\t%s",timeTakenMS, node->GetName().Get() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}

	if ( result == Node::NODE_RESULT_NEED_SECOND_BUILD_PASS )
	{
		
	}
	else if ( node->IsAFile() )
	{
		if ( result == Node::NODE_RESULT_FAILED )
		{
			if ( node->GetControlFlags() & Node::FLAG_NO_DELETE_ON_FAIL )
			{
				
			}
			else
			{
				
				if ( FileIO::FileExists( node->GetName().Get() ) )
				{
					
					if ( FileIO::FileDelete( node->GetName().Get() ) == false )
					{
						
						do { FLog::Error( "Post failure deletion failed for '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					}
				}
			}
		}
		else
		{
			
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( result == Node::NODE_RESULT_OK ) || ( result == Node::NODE_RESULT_OK_CACHE ) ) ) { if ( AssertHandler::Failure( "( result == Node::NODE_RESULT_OK ) || ( result == Node::NODE_RESULT_OK_CACHE )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueue.cpp", 547 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

			
			if ( node->GetType() != Node::FILE_NODE )
			{
				
				if ( !FileIO::FileExists( node->GetName().Get() ) )
				{
					do { FLog::Error( "File missing despite success for '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
					result = Node::NODE_RESULT_FAILED;
				}
			}
		}
	}

	
	node->AddProcessingTime( timeTakenMS );

	return result;
}


#line 181 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/JobQueueRemote.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp"




















JobQueueRemote::JobQueueRemote( uint32_t numWorkerThreads ) :
	m_PendingJobs( 1024, true ),
	m_CompletedJobs( 1024, true ),
	m_CompletedJobsFailed( 1024, true ),
	m_Workers( numWorkerThreads, false )
{
	WorkerThread::InitTmpDir( true ); 

	for ( uint32_t i=0; i<numWorkerThreads; ++i )
	{
		
		
		uint32_t threadIndex = ( i + 1001 );
		WorkerThread * wt = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 40 ) WorkerThreadRemote( threadIndex );
		wt->Init();
		m_Workers.Append( wt );
	}
}



JobQueueRemote::~JobQueueRemote()
{
	
	SignalStopWorkers();

	
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		m_Workers[ i ]->WaitForStop();
		delete m_Workers[ i ];
	}
}



void JobQueueRemote::SignalStopWorkers()
{
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		m_Workers[ i ]->Stop();
	}
}



bool JobQueueRemote::HaveWorkersStopped() const
{
	const size_t numWorkerThreads = m_Workers.GetSize();
	for ( size_t i=0; i<numWorkerThreads; ++i )
	{
		if ( m_Workers[ i ]->HasExited() == false )
		{
			return false;
		}
	}
	return true;
}



void JobQueueRemote::GetWorkerStatus( size_t index, AString & hostName, AString & status, bool & isIdle ) const
{
	( (WorkerThreadRemote *)m_Workers[ index ] )->GetStatus( hostName, status, isIdle );
}



void JobQueueRemote::QueueJob( Job * job )
{
	MutexHolder m( m_PendingJobsMutex );
	m_PendingJobs.Append( job );
}




Job * JobQueueRemote::GetCompletedJob()
{
	MutexHolder m( m_CompletedJobsMutex );

	
	if ( !m_CompletedJobs.IsEmpty() ) 
	{
		Job * job = m_CompletedJobs[ 0 ];
		m_CompletedJobs.PopFront();
		job->GetNode()->SetState( Node::UP_TO_DATE );
		return job;
	}

	
	if ( !m_CompletedJobsFailed.IsEmpty() ) 
	{
		Job * job = m_CompletedJobsFailed[ 0 ];
		m_CompletedJobsFailed.PopFront();
		job->GetNode()->SetState( Node::FAILED );
		return job;
	}

	return nullptr;
}



void JobQueueRemote::CancelJobsWithUserData( void * userData )
{
	
	{
		MutexHolder m( m_PendingJobsMutex );
		Job ** it = m_PendingJobs.Begin();
		while ( it != m_PendingJobs.End() )
		{
			if ( ( *it )->GetUserData() == userData )
			{
				delete *it;
				m_PendingJobs.Erase( it );
				continue;
			}
			++it;
		}
	}

	
	{
		MutexHolder m( m_CompletedJobsMutex );
		Job ** it = m_CompletedJobs.Begin();
		while ( it != m_CompletedJobs.End() )
		{
			if ( ( *it )->GetUserData() == userData )
			{
				delete *it;
				m_CompletedJobs.Erase( it );
				continue;
			}
			++it;
		}
	}

	
	
	
	MutexHolder mh( m_InFlightJobsMutex );
	Job ** it = m_InFlightJobs.Begin();
	while ( it != m_InFlightJobs.End() )
	{
		if ( ( *it )->GetUserData() == userData )
		{
			( *it )->SetUserData( nullptr );
		}
		++it;
	}
}



Job * JobQueueRemote::GetJobToProcess()
{
	MutexHolder m( m_PendingJobsMutex );
	if ( m_PendingJobs.IsEmpty() )
	{
		return nullptr;
	}

	
	Job * job = m_PendingJobs[ 0 ];
	m_PendingJobs.PopFront();

	MutexHolder mh( m_InFlightJobsMutex );
	m_InFlightJobs.Append( job );

	return job;
}



void JobQueueRemote::FinishedProcessingJob( Job * job, bool success )
{


	
	{
		MutexHolder mh( m_InFlightJobsMutex );
		Job ** it = m_InFlightJobs.Find( job );
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( it != nullptr ) ) { if ( AssertHandler::Failure( "it != nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 212 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
		m_InFlightJobs.Erase( it );
	}

	
	if ( job->GetUserData() == nullptr )
	{
		delete job;
		return;
	}

	
	MutexHolder m( m_CompletedJobsMutex );
	if ( success )
	{
		m_CompletedJobs.Append( job );
	}
	else
	{
		m_CompletedJobsFailed.Append( job );
	}
}



 Node::BuildResult JobQueueRemote::DoBuild( Job * job, bool racingRemoteJob )
{
	Timer timer; 

	ObjectNode * node = job->GetNode()->CastTo< ObjectNode >();

	
	if ( job->IsLocal() == false )
	{
		
		const char * fileName = ( job->GetRemoteName().FindLast( ( '\\' ) ) + 1 );

		AStackString<> tmpFileName;
		WorkerThread::CreateTempFilePath( fileName, tmpFileName );
		node->ReplaceDummyName( tmpFileName );

		
			Tracing::DebugSpamFormat( "REMOTE: %s (%s)\n", fileName, job->GetRemoteName().Get() );
		#line 256 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp"
	}

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node->IsAFile() ) ) { if ( AssertHandler::Failure( "node->IsAFile()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 258 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	if ( Node::EnsurePathExistsForFile( node->GetName() ) == false )
	{
		
		return Node::NODE_RESULT_FAILED;
	}

	
	if ( node->IsUsingPDB() && ( job->IsLocal() == false ) )
	{
		AStackString<> pdbName;
		node->GetPDBName( pdbName );
		FileIO::FileDelete( pdbName.Get() );
	}

	Node::BuildResult result = ((Node *)node )->DoBuild2( job, racingRemoteJob );

	uint32_t timeTakenMS = uint32_t( timer.GetElapsedMS() );

	if ( result == Node::NODE_RESULT_OK )
	{
		
		
		node->SetLastBuildTime( timeTakenMS );
		node->SetStatFlag( Node::STATS_BUILT );
		

		
			if ( job->IsLocal() )
			{
				
				do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( node->m_Stamp == FileIO::GetFileLastWriteTime(node->GetName()) ) ) { if ( AssertHandler::Failure( "node->m_Stamp == FileIO::GetFileLastWriteTime(node->GetName())", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 291 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
			}
		#line 294 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp"
	}

	if ( result == Node::NODE_RESULT_FAILED )
	{
		
		if ( FileIO::FileExists( node->GetName().Get() ) )
		{
			
			if ( FileIO::FileDelete( node->GetName().Get() ) == false )
			{
				
				do { FLog::Error( "Post failure deletion failed for '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			}
		}
	}
	else
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( result == Node::NODE_RESULT_OK ) ) { if ( AssertHandler::Failure( "result == Node::NODE_RESULT_OK", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 312 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		
		if ( job->IsLocal() == false )
		{
			
			if ( ReadResults( job ) == false )
			{	
				result = Node::NODE_RESULT_FAILED;
			}
		}
	}

	
	if ( job->IsLocal() == false )
	{
		
		FileIO::FileDelete( node->GetName().Get() );

		
		if ( node->IsUsingPDB() )
		{
			AStackString<> pdbName;
			node->GetPDBName( pdbName );
			FileIO::FileDelete( pdbName.Get() );
		}
	}

	
	node->AddProcessingTime( timeTakenMS );
	
	return result;
}



 bool JobQueueRemote::ReadResults( Job * job )
{
	const ObjectNode * node = job->GetNode()->CastTo< ObjectNode >();
	const bool includePDB = (  node->IsUsingPDB() && ( job->IsLocal() == false ) );

	
	FileStream fs;
	if ( fs.Open( node->GetName().Get() ) == false )
	{
		do { FLog::Error( "File missing despite success: '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	uint32_t size = (uint32_t)fs.GetFileSize();
	uint32_t size2 = 0;

	
	FileStream fs2;
	if ( includePDB )
	{
		AStackString<> pdbName;
		node->GetPDBName( pdbName );
		if ( fs2.Open( pdbName.Get() ) == false )
		{
			do { FLog::Error( "File missing despite success: '%s'",pdbName.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}
		size2 = (uint32_t)fs2.GetFileSize();
	}

	
	size_t memSize = sizeof( uint32_t ); 
	memSize += size;
	if ( includePDB )
	{
		memSize += sizeof( uint32_t ); 
		memSize += size2;
	}

	
	AutoPtr< char > mem( (char *)::AllocFileLine( memSize, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\JobQueueRemote.cpp", 387 ) );

	
	*( (uint32_t *)mem.Get() ) = size;

	
	if ( fs.Read( mem.Get() + sizeof( uint32_t ), size ) != size )
	{
		do { FLog::Error( "File read error for '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	if ( includePDB )
	{
		
		*( (uint32_t *)( mem.Get() + sizeof( uint32_t ) + size ) ) = size2;

		
		if ( fs2.Read( mem.Get() + sizeof( uint32_t ) + size + sizeof( uint32_t ), size2 ) != size2 )
		{
			do { FLog::Error( "File read error for '%s'",node->GetName().Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}
	}

	
	job->OwnData( mem.Release(), memSize );

	return true;
}


#line 184 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/WorkerBrokerage.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerBrokerage.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerBrokerage.cpp"











#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Network/Network.h"


#pragma once











class AString;



class Network
{
public:	
	static void GetHostName( AString & hostName );

	static uint32_t GetHostIPFromName( const AString & hostName, uint32_t timeoutMS = 1000 );

private:
	static uint32_t NameResolutionThreadFunc( void * userData );

	struct NameResolutionData
	{
		AStackString<>	hostName;
		bool			safeToFree;
	};
	static Mutex s_GetHostByNameMutex;
};


#line 39 "c:\\Users\\Franta\\p4\\Code\\Core/Network/Network.h"
#line 19 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerBrokerage.cpp"




WorkerBrokerage::WorkerBrokerage()
	: m_Availability( false )
{
	
	uint32_t protocolVersion = Protocol::PROTOCOL_VERSION;

	
	AStackString<> root;
	if ( Env::GetEnvVariable( "FASTBUILD_BROKERAGE_PATH", root ) )
    {
        
        
            m_BrokerageRoot.Format( "%s\\main\\%u\\", root.Get(), protocolVersion );
        

#line 39 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerBrokerage.cpp"

        FileIO::EnsurePathExists( m_BrokerageRoot );
    }
}



WorkerBrokerage::~WorkerBrokerage()
{
}



void WorkerBrokerage::FindWorkers( Array< AString > & workerList )
{
	if ( m_BrokerageRoot.IsEmpty() )
	{
		return;
	}

	Array< AString > results( 256, true );
	if ( !FileIO::GetFiles( m_BrokerageRoot,
							AStackString<>( "*" ),
							false,
							&results ) )
	{
		return; 
	}

	
	if ( ( workerList.GetSize() + results.GetSize() ) > workerList.GetCapacity() )
	{
		workerList.SetCapacity( workerList.GetSize() + results.GetSize() );
	}

	
	AStackString<> hostName;
	Network::GetHostName( hostName );

	
	const AString * const end = results.End();
	for ( AString * it = results.Begin(); it != end; ++it )
	{
		const AString & fileName = *it;
		const char * lastSlash = fileName.FindLast( ( '\\' ) );
		AStackString<> workerName( lastSlash + 1 );
		if ( workerName.CompareI( hostName ) != 0 )
		{
			workerList.Append( workerName );
		}
	}
}



void WorkerBrokerage::SetAvailability( bool available )
{
	
	if ( m_BrokerageRoot.IsEmpty() )
	{
		return;
	}

	if ( m_Availability == available )
	{
		return; 
	}
	m_Availability = available;

	FileIO::EnsurePathExists( m_BrokerageRoot );

	
	AStackString<> hostName;
	Network::GetHostName( hostName );

	
	AStackString<> filePath;
	filePath.Format( "%s\\%s", m_BrokerageRoot.Get(), hostName.Get() );

	if ( available )
	{
		
		FileStream fs;
		fs.Open( filePath.Get(), FileStream::WRITE_ONLY );
	}
	else
	{
		
		FileIO::FileDelete( filePath.Get() );
	}
}


#line 187 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/WorkerThread.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp"















#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Profile/Profile.h"


#pragma once





#line 1 "c:\\users\\franta\\p4\\code\\core\\profile\\ProfileManager.h"


#pragma once















struct ProfileSection;
struct ProfileEvent;



class ProfileManager
{
public:
	
	static void Synchronize();

	
	
	static void Start( const char * id );
	static void Stop();
private:
	
	static void RegisterThread();

	
	
	friend struct ProfileEventBuffer;
	static void PushThreadEvents( const ProfileEvent * events, size_t num );

	struct ProfileEventInfo
	{
		Thread::ThreadId		m_ThreadId;
		const ProfileEvent  *	m_Events;
		size_t					m_NumEvents;
	};
	static Array< ProfileEventInfo > s_ProfileEventInfo;
};


#line 54 "c:\\users\\franta\\p4\\code\\core\\profile\\ProfileManager.h"


#line 57 "c:\\users\\franta\\p4\\code\\core\\profile\\ProfileManager.h"
#line 10 "c:\\Users\\Franta\\p4\\Code\\Core/Profile/Profile.h"








	
	

	
	

	

	
	class ProfileHelper
	{
	public:
		inline ProfileHelper( const char * id )
		{
			ProfileManager::Start( id );
		}
		inline ~ProfileHelper()
		{
			ProfileManager::Stop();
		}
	private:
	};
#line 41 "c:\\Users\\Franta\\p4\\Code\\Core/Profile/Profile.h"


#line 44 "c:\\Users\\Franta\\p4\\Code\\Core/Profile/Profile.h"
#line 23 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp"



static __declspec( thread ) uint32_t s_WorkerThreadThreadIndex = 0;
AStackString<> WorkerThread::s_TmpRoot;


WorkerThread::WorkerThread( uint32_t threadIndex )
: m_ShouldExit( false )
, m_Exited( false )
, m_ThreadIndex( threadIndex )
{
}



void WorkerThread::Init()
{
	
	Thread::ThreadHandle h = Thread::CreateThread( ThreadWrapperFunc,
												   "WorkerThread",
												   64 * (1024),
												   this );
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( h != nullptr ) ) { if ( AssertHandler::Failure( "h != nullptr", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 46 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	Thread::CloseHandle( h ); 
}


WorkerThread::~WorkerThread()
{
}



 void WorkerThread::InitTmpDir( bool remote )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FileIO::GetTempDir( s_TmpRoot ) ) ) { if ( AssertHandler::Failure( "FileIO::GetTempDir( s_TmpRoot )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 59 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
    
        s_TmpRoot += ".fbuild.tmp\\";
    

#line 65 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp"

    
    AStackString<> buffer;
    const uint32_t workingDirHash = remote ? 0 : FBuild::Get().GetOptions().GetWorkingDirHash();
    buffer.Format( "0x%08x", workingDirHash );
    s_TmpRoot += buffer;
    s_TmpRoot += ( '\\' );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FileIO::EnsurePathExists( s_TmpRoot ) ) ) { if ( AssertHandler::Failure( "FileIO::EnsurePathExists( s_TmpRoot )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 73 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
}



void WorkerThread::WaitForStop()
{
	while ( m_Exited == false )
	{
		Thread::Sleep( 1 );
	}
}



 uint32_t WorkerThread::GetThreadIndex()
{
	return s_WorkerThreadThreadIndex;
}



 uint32_t WorkerThread::ThreadWrapperFunc( void * param )
{
	WorkerThread * wt = reinterpret_cast< WorkerThread * >( param );
	s_WorkerThreadThreadIndex = wt->m_ThreadIndex;

	CreateThreadLocalTmpDir();

	wt->Main();
	return 0;
}



 void WorkerThread::Main()
{
	while ( ( m_ShouldExit == false ) && ( FBuild::GetStopBuild() == false ) )
	{
		ProfileHelper ph112(  __FUNCTION__   );

		bool didSomeWork = Update();
		if ( didSomeWork )
		{
			continue; 
		}

		
		{
			ProfileHelper ph122( "WorkerThread::Main::Sleep" );
			Thread::Sleep( 1 ); 
		}
	}

	m_Exited = true;
}



 bool WorkerThread::Update()
{
	
	Job * job = JobQueue::IsValid() ? JobQueue::Get().GetJobToProcess() : nullptr;
	if ( job != nullptr )
	{
		
		do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( job->GetNode()->GetState() == Node::BUILDING ) ) { if ( AssertHandler::Failure( "job->GetNode()->GetState() == Node::BUILDING", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 139 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

		
		Node::BuildResult result = JobQueue::DoBuild( job );

		if ( result == Node::NODE_RESULT_FAILED )
		{
			FBuild::OnBuildError();
		}

		if ( result == Node::NODE_RESULT_NEED_SECOND_BUILD_PASS )
		{
			JobQueue::Get().QueueJob2( job );
		}
		else
		{
			JobQueue::Get().FinishedProcessingJob( job, ( result != Node::NODE_RESULT_FAILED ), false, false );
		}

		return true; 
	}

	
	if ( FBuild::Get().GetOptions().m_NoLocalConsumptionOfRemoteJobs == false )
	{
		job = JobQueue::IsValid() ? JobQueue::Get().GetDistributableJobToProcess( false ) : nullptr;
		if ( job != nullptr )
		{
			
			Node::BuildResult result = JobQueueRemote::DoBuild( job, false );
	
			if ( result == Node::NODE_RESULT_FAILED )
			{
				FBuild::OnBuildError();
			}
	
			JobQueue::Get().FinishedProcessingJob( job, ( result != Node::NODE_RESULT_FAILED ), true, false ); 
	
			return true; 
		}
	}

	
	if ( FBuild::Get().GetOptions().m_AllowLocalRace )
	{
		job = JobQueue::IsValid() ? JobQueue::Get().GetDistributableJobToRace() : nullptr;
		if ( job != nullptr )
		{
			
			Node::BuildResult result = JobQueueRemote::DoBuild( job, true );
	
			if ( result == Node::NODE_RESULT_FAILED )
			{
				FBuild::OnBuildError();
			}
	
			JobQueue::Get().FinishedProcessingJob( job, ( result != Node::NODE_RESULT_FAILED ), true, true ); 
	
			return true; 
		}
	}

	return false; 
}



 void WorkerThread::CreateTempFilePath( const char * fileName,
												  AString & tmpFileName )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( fileName ) ) { if ( AssertHandler::Failure( "fileName", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 209 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !s_TmpRoot.IsEmpty() ) ) { if ( AssertHandler::Failure( "!s_TmpRoot.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 210 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	
	const uint32_t threadIndex = WorkerThread::GetThreadIndex();

	tmpFileName.Format( "%score_%u%c%s", s_TmpRoot.Get(), threadIndex, ( '\\' ), fileName );
}



 bool WorkerThread::CreateTempFile( const AString & tmpFileName,
										FileStream & file )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( tmpFileName.IsEmpty() == false ) ) { if ( AssertHandler::Failure( "tmpFileName.IsEmpty() == false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 224 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( PathUtils::IsFullPath( tmpFileName ) ) ) { if ( AssertHandler::Failure( "PathUtils::IsFullPath( tmpFileName )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThread.cpp", 225 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	return file.Open( tmpFileName.Get(), FileStream::WRITE_ONLY );
}



 void WorkerThread::CreateThreadLocalTmpDir()
{
	
	AStackString<> tmpFileName;
	CreateTempFilePath( ".tmp", tmpFileName );
	char * lastSlash = tmpFileName.FindLast( ( '\\' ) );
	tmpFileName.SetLength( (uint32_t)( lastSlash - tmpFileName.Get() ) );
	FileIO::EnsurePathExists( tmpFileName );
}


#line 190 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/WorkerPool/WorkerThreadRemote.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThreadRemote.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThreadRemote.cpp"




#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildWorker/Worker/WorkerSettings.h"


#pragma once












class WorkerSettings : public Singleton< WorkerSettings >
{
public:
	explicit WorkerSettings();
	~WorkerSettings();

	
	enum Mode
	{
		DISABLED		= 0, 
		WHEN_IDLE		= 1, 
		DEDICATED		= 2  
	};
	inline Mode GetMode() const { return m_Mode; }
	void SetMode( Mode m );

	
	inline uint32_t GetNumCPUsToUse() const { return m_NumCPUsToUse; }
	void SetNumCPUsToUse( uint32_t c );

	
	void SetStartMinimized( bool startMinimized );
	inline bool GetStartMinimzed() { return m_StartMinimized; }
	
	void Load();
	void Save();
private:
	Mode		m_Mode;
	uint32_t	m_NumCPUsToUse;
	bool		m_StartMinimized;
};


#line 50 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildWorker/Worker/WorkerSettings.h"
#line 12 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThreadRemote.cpp"











 uint32_t WorkerThreadRemote::s_NumCPUsToUse( 999 ); 


WorkerThreadRemote::WorkerThreadRemote( uint32_t threadIndex )
: WorkerThread( threadIndex )
, m_CurrentJob( nullptr )
{
}


WorkerThreadRemote::~WorkerThreadRemote()
{
}



 void WorkerThreadRemote::Main()
{
	while ( m_ShouldExit == false )
	{
		if ( IsEnabled() == false )
		{
			Thread::Sleep( 500 );
			continue; 
		}

		
		Job * job = JobQueueRemote::Get().GetJobToProcess();
		if ( job != nullptr )
		{
			{
				MutexHolder mh( m_CurrentJobMutex );
				m_CurrentJob = job;
			}

			
			Node::BuildResult result = JobQueueRemote::DoBuild( job, false );
			do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( ( result == Node::NODE_RESULT_OK ) || ( result == Node::NODE_RESULT_FAILED ) ) ) { if ( AssertHandler::Failure( "( result == Node::NODE_RESULT_OK ) || ( result == Node::NODE_RESULT_FAILED )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\WorkerPool\\WorkerThreadRemote.cpp", 60 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

			{
				MutexHolder mh( m_CurrentJobMutex );
				m_CurrentJob = nullptr;
			}

			JobQueueRemote::Get().FinishedProcessingJob( job, ( result != Node::NODE_RESULT_FAILED ) );

			
			continue;
		}

		
		Thread::Sleep( 16 ); 
	}

	m_Exited = true;
}



void WorkerThreadRemote::GetStatus( AString & hostName, AString & status, bool & isIdle ) const
{
	isIdle = false;

	MutexHolder mh( m_CurrentJobMutex );
	if ( m_CurrentJob )
	{
		Server::GetHostForJob( m_CurrentJob, hostName );
		if ( IsEnabled() == false )
		{
			status = "(Finishing) ";
		}
		status += m_CurrentJob->GetRemoteName();
	}
	else
	{
		hostName.Clear();

		if ( IsEnabled() == false )
		{
			status = "(Disabled)";
		}
		else
		{
			status = "Idle";
			isIdle = true;
		}
	}
}



bool WorkerThreadRemote::IsEnabled() const
{
	
	uint32_t cpuId = ( m_ThreadIndex - 1000 ); 

	
	return ( cpuId <= s_NumCPUsToUse );
}


#line 193 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/Error.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Error.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Error.cpp"
















 void Error::Error_1001_MissingStringStartToken( const BFFIterator & iter,
														const Function * function )
{
	FormatError( iter, 1001u, function, "Missing string start token \" or '." );
}



 void Error::Error_1002_MatchingClosingTokenNotFound( const BFFIterator & iter,
																const Function * function,
																char expectedChar )
{
	FormatError( iter, 1002u, function, "Matching closing token %c not found.",
									 expectedChar );
}



 void Error::Error_1003_EmptyStringNotAllowedInHeader( const BFFIterator & iter,
													          const Function * function )
{
	FormatError( iter, 1003u, function, "Empty string not allowed in Function header." );
}



 void Error::Error_1004_EmptyStringPropertyNotAllowed( const BFFIterator & iter,
															  const Function * function,
															  const char * propertyName )
{
	FormatError( iter, 1004u, function, "Empty string not allowed for property '%s'.",
									 propertyName );
}



 void Error::Error_1005_UnsupportedNodeType( const BFFIterator & iter,
													const Function * function,
													const char * propertyName,
													const AString & nodeName,
													Node::Type nodeType )
{
	FormatError( iter, 1005u, function, "Unsupported node type in '%s'. (Node: '%s', Type: '%s')",
									 propertyName,
									 nodeName.Get(),
									 Node::GetTypeName( nodeType ) );
}



 void Error::Error_1006_NothingToBuild( const BFFIterator & iter,
											   const Function * function )
{
	FormatError( iter, 1006u, function, "Nothing defined to be built." );
}



 void Error::Error_1007_ExpectedVariable( const BFFIterator & iter,
													const Function * function )
{
	FormatError( iter, 1007u, function, "Expected a variable at this location." );
}



 void Error::Error_1008_VariableOfWrongType( const BFFIterator & iter,
													   const Function * function,
													   BFFVariable::VarType expectedType,
													   BFFVariable::VarType foundType )
{
	FormatError( iter, 1008u, function, "Expected a variable of type '%s', but got '%s'.",
										BFFVariable::GetTypeName( expectedType ), 
										BFFVariable::GetTypeName( foundType ) );
}



 void Error::Error_1009_UnknownVariable( const BFFIterator & iter,
												const Function * function )
{
	FormatError( iter, 1009u, function, "Unknown variable." );
}



 void Error::Error_1010_UnknownConstruct( const BFFIterator & iter )
{
	FormatError( iter, 1010u, nullptr, "Unknown construct." );
}



 void Error::Error_1011_UnnamedConcatMustFollowAssignment( const BFFIterator & iter )
{
	FormatError( iter, 1011u, nullptr, "Unnamed concatenation must follow a variable assignment in the same scope." );
}



 void Error::Error_1012_UnexpectedEndOfFile( const BFFIterator & iter )
{
	FormatError( iter, 1012u, nullptr, "Unexpected end of file." );
}



 void Error::Error_1013_UnexpectedCharInVariableName( const BFFIterator & iter,
															  const Function * function )
{
	FormatError( iter, 1013u, function, "Unexpected character '%c' in variable name.", *iter );
}



 void Error::Error_1014_VariableNameIsTooLong( const BFFIterator & iter, uint32_t length, uint32_t maxLength )
{
	FormatError( iter, 1014u, nullptr, "Variable name is too long. (Length: %u, MaxLength: %u)", length, maxLength );
}



 void Error::Error_1015_UnknownFunction( const BFFIterator & iter )
{
	FormatError( iter, 1015u, nullptr, "Unknown Function." );
}



 void Error::Error_1016_UnexepectedCharFollowingVariableName( const BFFIterator & iter )
{
	FormatError( iter, 1016u, nullptr, "Unexpected character '%c' following variable name. (Expected operator)", *iter );
}



 void Error::Error_1017_UnexepectedCharInVariableValue( const BFFIterator & iter )
{
	FormatError( iter, 1017u, nullptr, "Unexpected character '%c' in variable value.", *iter );
}



 void Error::Error_1018_IntegerValueCouldNotBeParsed( const BFFIterator & iter )
{
	FormatError( iter, 1018u, nullptr, "Integer value could not be parsed." );
}



 void Error::Error_1020_FunctionCanOnlyBeInvokedOnce( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1020u, function, "Function can only be invoked once." );
}



 void Error::Error_1021_UnexpectedHeaderForFunction( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1021u, function, "Unexpected Function header." );
}



 void Error::Error_1022_MissingFunctionHeaderCloseToken( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1022u, function, "Missing Function header close token '%c'.", BFFParser::BFF_FUNCTION_ARGS_CLOSE );
}



 void Error::Error_1023_FunctionRequiresAHeader( const BFFIterator & iter,
														 const Function * function )
{
	FormatError( iter, 1023u, function, "Function requires a header." );
}



 void Error::Error_1024_FunctionRequiresABody( const BFFIterator & iter,
													   const Function * function )
{
	FormatError( iter, 1024u, function, "Function requires a body." );
}



 void Error::Error_1025_MissingScopeCloseToken( const BFFIterator & iter,
														  const Function * function )
{
	FormatError( iter, 1025u, function, "Missing scope close token '%c'.", BFFParser::BFF_SCOPE_CLOSE );
}



 void Error::Error_1026_VariableNotFoundForConcatenation( const BFFIterator & iter,
																  const AString & variableName )
{
	FormatError( iter, 1026u, nullptr, "Variable '%s' not found for concatention.", variableName.Get() );
}



 void Error::Error_1027_CannotConcatenate( const BFFIterator & iter,
												   const AString & variableName,
												   BFFVariable::VarType dstType,
												   BFFVariable::VarType srcType )
{
	FormatError( iter, 1027u, nullptr, "Cannot concatenate <%s> to <%s> for Variable '%s'.",
									 BFFVariable::GetTypeName( srcType ), 
									 BFFVariable::GetTypeName( dstType ),
									 variableName.Get() );
}



 void Error::Error_1028_MissingVariableSubstitutionEnd( const BFFIterator & iter )
{
	FormatError( iter, 1028u, nullptr, "Cannot find '$' to end variable substitution." );
}



 void Error::Error_1029_VariableForSubstitutionIsNotAString( const BFFIterator & iter,
																	 const AString & variableName,
																	 BFFVariable::VarType varType )
{
	FormatError( iter, 1029u, nullptr, "Variable for substitution '%s' is not a string (Type: <%s>).",
									 variableName.Get(),
									 BFFVariable::GetTypeName( varType ) );
}



 void Error::Error_1030_UnknownDirective( const BFFIterator & iter,
													const AString & directiveName )
{
	FormatError( iter, 1030u, nullptr, "Unknown directive '%s'.",
									 directiveName.Get() );
}



 void Error::Error_1031_UnexpectedCharFollowingDirectiveName( const BFFIterator & iter,
																		const AString & directive,
																		char expectedChar )
{
	FormatError( iter, 1031u, nullptr, "Unknown char '%c' following '%s' directive. (Expected '%c').",
									 *iter, 
									 directive.Get(),
									 expectedChar );
}



 void Error::Error_1032_UnableToOpenInclude( const BFFIterator & iter,
													   const AString & include )
{
	FormatError( iter, 1032u, nullptr, "Unable to open include '%s'.",
									 include.Get() );
}



 void Error::Error_1033_ErrorReadingInclude( const BFFIterator & iter,
													   const AString & include,
													   uint32_t errorCode )
{
	FormatError( iter, 1033u, nullptr, "Error reading include '%s' (Error: %u).",
									   include.Get(),
									   errorCode );
}



 void Error::Error_1034_OperationNotSupported( const BFFIterator & rhsIter,
														 BFFVariable::VarType lhs,
														 BFFVariable::VarType rhs,
														 const  BFFIterator & operatorIter )
{
	const char * operation  = "???"; 
	switch ( *operatorIter )
	{
		case BFFParser::BFF_VARIABLE_ASSIGNMENT:	operation = "="; break;
		case BFFParser::BFF_VARIABLE_CONCATENATION: operation = "+"; break;
		default:									do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( false ) ) { if ( AssertHandler::Failure( "false", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Error.cpp", 308 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop)); break;
	}

	FormatError( rhsIter, 1034u, nullptr, "Operation not supported: '%s' %s '%s'.",
									   BFFVariable::GetTypeName( lhs ),
									   operation,
									   BFFVariable::GetTypeName( rhs ) );
}



 void Error::Error_1035_ExcessiveDepthComplexity( const BFFIterator & iter )
{
	FormatError( iter, 1035u, nullptr, "Excessive depth complexity when parsing BFFs. Check for resursive includes or simplify config." );
}



 void Error::Error_1036_UnknownTokenInIfDirective( const BFFIterator & iter )
{
	FormatError( iter, 1036u, nullptr, "Unknown token in #if directive." );
}



 void Error::Error_1037_EndIfWithoutIf( const BFFIterator & iter )
{
	FormatError( iter, 1037u, nullptr, "#endif without matching #if." );
}



 void Error::Error_1050_PropertyMustBeOfType( const BFFIterator & iter,
													  const Function * function,
													  const char * propertyName,
													  BFFVariable::VarType foundType,
													  BFFVariable::VarType requiredType,
													  BFFVariable::VarType alternateRequiredType )
{
	if ( alternateRequiredType == BFFVariable::VAR_ANY )
	{
		FormatError( iter, 1050u, function, "Property '%s' must be of type <%s> (found <%s>).",
										  propertyName,
										  BFFVariable::GetTypeName( requiredType ),
										  BFFVariable::GetTypeName( foundType ) );
	}
	else
	{
		FormatError( iter, 1050u, function, "Property '%s' must be of type <%s> or <%s> (found <%s>).",
										  propertyName,
										  BFFVariable::GetTypeName( requiredType ),
										  BFFVariable::GetTypeName( alternateRequiredType ),
										  BFFVariable::GetTypeName( foundType ) );
	}
}



 void Error::Error_1054_IntegerOutOfRange( const BFFIterator & iter,
												   const Function * function,
												   const char * propertyName,
												   int rangeMin,
												   int rangeMax )
{
	FormatError( iter, 1054u, function, "Integer '%s' must be in range %i to %i.",
									  propertyName,
									  rangeMin, rangeMax );
}



 void Error::Error_1100_AlreadyDefined( const BFFIterator & iter,
												 const Function * function,
												 const AString & name )
{
	FormatError( iter, 1100u, function, "Target '%s' already defined.",
									   name.Get() );
}



 void Error::Error_1101_MissingProperty( const BFFIterator & iter,
												  const Function * function,
												  const AString & name )
{
	FormatError( iter, 1101u, function, "Missing required property '%s'.",
									   name.Get() );
}



 void Error::Error_1102_UnexpectedType( const BFFIterator & iter,
												 const Function * function,
												 const char * propertyName,
												 const AString & name,
												 Node::Type foundType,
												 Node::Type expectedType )
{
	FormatError( iter, 1102u, function, "'%s' ('%s') is of unexpected type '%s'. Expected '%s'.",
									   propertyName,
									   name.Get(),
									   Node::GetTypeName( foundType ),
									   Node::GetTypeName( expectedType ) );
}



 void Error::Error_1103_NotAFile( const BFFIterator & iter,
										   const Function * function,
										   const char * propertyName,
										   const AString & name,
										   Node::Type foundType )
{
	FormatError( iter, 1103u, function, "'%s' ('%s') is a '%s', which does not describe a file.",
									   propertyName,
									   name.Get(),
									   Node::GetTypeName( foundType ) );
}



 void Error::Error_1104_TargetNotDefined( const BFFIterator & iter,
												   const Function * function,
											       const char * propertyName,
												   const AString & name )
{
	FormatError( iter, 1104u, function, "'%s' ('%s') is not defined.",
									   propertyName,
									   name.Get() );
}



 void Error::Error_1105_PathNotAllowed( const BFFIterator & iter,
												  const Function * function,
												  const char * propertyName,
												  const AString & propertyValue )

{
	FormatError( iter, 1105u, function, "Path not allowed for '%s' ('%s').",
									   propertyName,
									   propertyValue.Get() );
}



 void Error::Error_1106_MissingRequiredToken( const BFFIterator & iter,
														const Function * function,
														const char * propertyName,
														const char * token )
{
	FormatError( iter, 1106u, function, "Property '%s' is missing required token '%s'.",
										propertyName,
									    token );
}



 void Error::Error_1200_ExpectedVar( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1200u, function, "Expected a variable at this location." );
}



 void Error::Error_1201_MissingIn( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1201u, function, "Missing 'in' at this location." );
}



 void Error::Error_1202_ExpectedVarFollowingIn( const BFFIterator & iter, const Function * function )
{
	FormatError( iter, 1202u, function, "Expected a variable following 'in'." );
}



 void Error::Error_1204_LoopVariableLengthsDiffer( const BFFIterator & iter, 
															const Function * function, 
															const char * variableName,
															uint32_t foundSize,
															uint32_t expectedSize )
{
	FormatError( iter, 1204u, function, "Variable '%s' contains %u elements, but loop is for %u elements.",
									   variableName,
									   foundSize,
									   expectedSize );
}



 void Error::Error_1300_MissingPCHArgs( const BFFIterator & iter, 
												 const Function * function )
{
	FormatError( iter, 1300u, function, "Precompiled Header use requires 'PCHInputFile', 'PCHOutputFile' and 'PCHOptions' parameters." );
}



 void Error::Error_1301_AlreadyDefinedPCH( const BFFIterator & iter, 
													const Function * function,
													const char * pch )
{
	FormatError( iter, 1301u, function, "Precompiled Header target '%s' has already been defined.",
									   pch );
}



 void Error::Error_1302_MissingPCHCompilerOption( const BFFIterator & iter, 
															const Function * function,
															const char * option,
															const char * property )
{
	FormatError( iter, 1302u, function, "Missing Precompiled Header option '%s' in '%s'.", option, property );
}



 void Error::Error_1303_PCHCreateOptionOnlyAllowedOnPCH( const BFFIterator & iter, 
																   const Function * function,
																   const char * option,
																   const char * property )
{
	FormatError( iter, 1303u, function, "Precompiled Header option '%s' in '%s' invalid. Only allowed on Precompiled Header.", option, property );
}



void Error::FormatError( const BFFIterator & iter,
						 uint32_t errNum, 
						 const Function * function, 
						 const char * message, ... )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( message ) ) { if ( AssertHandler::Failure( "message", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Error.cpp", 544 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	AStackString< 4096 > buffer;

	va_list args;
	( __va_start(&args, message) );
	buffer.VFormat( message, args );
	( args = (va_list)0 );

	
	uint32_t line = 0;
	uint32_t column = 0;
	const char * lineStart = nullptr;
	iter.GetPosInfo( line, column, lineStart );

	
	const AStackString<> fileName( iter.GetFileName() );
	AStackString<> fullPath;
	NodeGraph::CleanPath( fileName, fullPath );

	
	Tracing::OutputFormat( "%s(%u,%u): FASTBuild Error #%04u - %s%s%s\n", fullPath.Get(), line, column, errNum, function ? function->GetName().Get() : "", function ? "() - " : "", buffer.Get() );
#line 572 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\Error.cpp"

	
	BFFIterator lineEnd( iter );
	while ( !lineEnd.IsAtEnd() )
	{
		if (( *lineEnd != '\r' ) && ( *lineEnd != '\n' ))
		{
			lineEnd++;
			continue;
		}
		break;
	}

	
	size_t lineLength = lineEnd.GetCurrent() - lineStart;
	if ( lineLength >= 256 )
	{
		return;
	}

	
	AString::Copy( lineStart, buffer.Get(), lineLength );
	do { FLog::Error( "%s",buffer.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	
	
	char * c = buffer.Get();
	const char * end = c + column - 1;
	for ( ; c < end; ++c )
	{
		if ( *c != '\t' )
		{
			*c = ' ';
		}
	}

	AString::Copy( "^", c, 1 );
	do { FLog::Error( buffer.Get()  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	AString::Copy( "\\--here", c, 8 );
	do { FLog::Error( buffer.Get()  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
}


#line 196 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/FBuild.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp"
























#line 1 "c:\\Users\\Franta\\p4\\Code\\Core/Process/SystemMutex.h"


#pragma once









class SystemMutex
{
public:
	SystemMutex( const char * );
	~SystemMutex();

	bool TryLock();
    bool IsLocked() const;
	void Unlock();

private:    
	
		void * m_Handle;
    

#line 29 "c:\\Users\\Franta\\p4\\Code\\Core/Process/SystemMutex.h"
	AString m_Name;
};


#line 34 "c:\\Users\\Franta\\p4\\Code\\Core/Process/SystemMutex.h"
#line 32 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp"





#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"















#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"



#line 26 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"






#pragma pack(push,8)


extern "C" {
#line 37 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"











#line 49 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"








































typedef long clock_t;

#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"





















struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 126 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"





















    int* __cdecl __daylight(void);



    long* __cdecl __dstbias(void);



    long* __cdecl __timezone(void);



      char ** __cdecl __tzname(void);


 errno_t __cdecl _get_daylight(  int * _Daylight);
 errno_t __cdecl _get_dstbias(  long * _Daylight_savings_bias);
 errno_t __cdecl _get_timezone(  long * _Timezone);
 errno_t __cdecl _get_tzname(  size_t *_ReturnValue,   char *_Buffer,   size_t _SizeInBytes,   int _Index);








    char * __cdecl asctime(  const struct tm * _Tm);

  errno_t __cdecl asctime_s(    char *_Buf,   size_t _SizeInBytes,   const struct tm * _Tm);
#line 178 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   const struct tm * _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }

  char * __cdecl _ctime32(  const __time32_t * _Time);
 errno_t __cdecl _ctime32_s(    char *_Buf,   size_t _SizeInBytes,   const __time32_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }

   clock_t __cdecl clock(void);
 double __cdecl _difftime32(  __time32_t _Time1,   __time32_t _Time2);

    struct tm * __cdecl _gmtime32(  const __time32_t * _Time);
  errno_t __cdecl _gmtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

  struct tm * __cdecl _localtime32(  const __time32_t * _Time);
 errno_t __cdecl _localtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

 size_t __cdecl strftime(  char * _Buf,   size_t _SizeInBytes,     const char * _Format,   const struct tm * _Tm);
 size_t __cdecl _strftime_l(    char *_Buf,   size_t _Max_size,     const char * _Format,   const struct tm *_Tm,   _locale_t _Locale);

  errno_t __cdecl _strdate_s(    char *_Buf,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
  char * __cdecl _strdate( char *_Buffer);

  errno_t __cdecl _strtime_s(    char *_Buf ,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
  char * __cdecl _strtime( char *_Buffer);

 __time32_t __cdecl _time32(  __time32_t * _Time);
 __time32_t __cdecl _mktime32(  struct tm * _Tm);
 __time32_t __cdecl _mkgmtime32(  struct tm * _Tm);



 void __cdecl _tzset(void);

#line 213 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"

   double __cdecl _difftime64(  __time64_t _Time1,   __time64_t _Time2);
  char * __cdecl _ctime64(  const __time64_t * _Time);
 errno_t __cdecl _ctime64_s(  char *_Buf,   size_t _SizeInBytes,   const __time64_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }

  struct tm * __cdecl _gmtime64(  const __time64_t * _Time);
 errno_t __cdecl _gmtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

  struct tm * __cdecl _localtime64(  const __time64_t * _Time);
 errno_t __cdecl _localtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

 __time64_t __cdecl _mktime64(  struct tm * _Tm);
 __time64_t __cdecl _mkgmtime64(  struct tm * _Tm);
 __time64_t __cdecl _time64(  __time64_t * _Time);



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetLocalTime" " instead. See online help for details.")) unsigned __cdecl _getsystime(  struct tm * _Tm);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetLocalTime" " instead. See online help for details.")) unsigned __cdecl _setsystime(  struct tm * _Tm, unsigned _MilliSec);
#line 234 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"











  wchar_t * __cdecl _wasctime(  const struct tm * _Tm);
 errno_t __cdecl _wasctime_s(    wchar_t *_Buf,   size_t _SizeInWords,   const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

  wchar_t * __cdecl _wctime32(  const __time32_t *_Time);
 errno_t __cdecl _wctime32_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

 size_t __cdecl wcsftime(  wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t * _Format,    const struct tm * _Tm);
 size_t __cdecl _wcsftime_l(  wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t *_Format,   const struct tm *_Tm,   _locale_t _Locale);

 errno_t __cdecl _wstrdate_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wstrdate( wchar_t *_Buffer);

 errno_t __cdecl _wstrtime_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wstrtime( wchar_t *_Buffer);

  wchar_t * __cdecl _wctime64(  const __time64_t * _Time);
 errno_t __cdecl _wctime64_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\wtime.inl"












#pragma once







#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\wtime.inl"





#pragma warning(push)
#pragma warning(disable:4996)















static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _wctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl _wctime_s(      wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}
#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\wtime.inl"

#pragma warning(pop)

#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\wtime.inl"
#line 62 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\wtime.inl"
#line 270 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"
#line 271 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"


#line 274 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"


#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"












#pragma once







#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"




























































static __inline double __cdecl difftime(time_t _Time1, time_t _Time2)
{
    return _difftime64(_Time1,_Time2);
}
 static __inline char * __cdecl ctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _ctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t * _Time)
{
    return _ctime64_s(_Buffer, _SizeInBytes, _Time);
}
#line 99 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"
 static __inline struct tm * __cdecl gmtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _gmtime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl gmtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _gmtime64_s(_Tm, _Time);
}
#line 112 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"
 static __inline struct tm * __cdecl localtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _localtime64(_Time);
#pragma warning( pop )
}
static __inline errno_t __cdecl localtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _localtime64_s(_Tm, _Time);
}
static __inline time_t __cdecl mktime(struct tm * _Tm)
{
    return _mktime64(_Tm);
}
static __inline time_t __cdecl _mkgmtime(struct tm * _Tm)
{
    return _mkgmtime64(_Tm);
}
static __inline time_t __cdecl time(time_t * _Time)
{
    return _time64(_Time);
}
#line 136 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"


#line 139 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"
#line 140 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.inl"
#line 277 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"
#line 278 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"













  extern int daylight;
  extern long timezone;
  extern char * tzname[2];
#line 295 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"


__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tzset" ". See online help for details."))  void __cdecl tzset(void);
#line 299 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"

#line 301 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"



}
#line 306 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"

#pragma pack(pop)

#line 310 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\time.h"
#line 38 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp"








 bool FBuild::s_StopBuild( false );



FBuild::FBuild( const FBuildOptions & options )
	: m_Client( nullptr )
	, m_Cache( nullptr )
	, m_LastProgressOutputTime( 0.0f )
	, m_LastProgressCalcTime( 0.0f )
	, m_SmoothedProgressCurrent( 0.0f )
	, m_SmoothedProgressTarget( 0.0f )
	, m_WorkerList( 0, true )
	, m_EnvironmentString( nullptr )
	, m_EnvironmentStringSize( 0 )
{
	






	m_DependencyGraph = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 68 ) NodeGraph();

	
	m_Options = options;

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FileIO::GetCurrentDir( m_OldWorkingDir ) ) ) { if ( AssertHandler::Failure( "FileIO::GetCurrentDir( m_OldWorkingDir )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 74 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	AStackString<> cachePath;
	if ( Env::GetEnvVariable( "FASTBUILD_CACHE_PATH", cachePath ) )
	{
		if ( cachePath.IsEmpty() == false )
		{
			SetCachePath( cachePath );
		}
	}

	
	FLog::SetShowInfo( m_Options.m_ShowInfo );
	FLog::SetShowErrors( m_Options.m_ShowErrors );
	FLog::SetShowProgress( m_Options.m_ShowProgress );

	Function::Create();
}



FBuild::~FBuild()
{
	Function::Destroy();

	delete m_DependencyGraph;
	delete m_Client;
	::Free( m_EnvironmentString );

	if ( m_Cache )
	{
		m_Cache->Shutdown();
		delete m_Cache;
	}

	
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !m_OldWorkingDir.IsEmpty() ) ) { if ( AssertHandler::Failure( "!m_OldWorkingDir.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 111 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	if ( !FileIO::SetCurrentDir( m_OldWorkingDir ) )
	{
		do { FLog::Error( "Failed to restore working dir: '%s' (error: %u)",m_OldWorkingDir.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	}
}



bool FBuild::Initialize( const char * nodeGraphDBFile )
{
	
	if ( !FileIO::SetCurrentDir( m_Options.GetWorkingDir() ) )
	{
		do { FLog::Error( "Failed to set working dir: '%s' (error: %u)",m_Options.GetWorkingDir().Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	const char * bffFile = m_Options.m_ConfigFile.IsEmpty() ? GetDefaultBFFFileName()
														    : m_Options.m_ConfigFile.Get();
	if ( m_DependencyGraph->Initialize( bffFile, nodeGraphDBFile ) == false )
	{
		return false;
	}

	
	if ( m_Options.m_UseCacheRead || m_Options.m_UseCacheWrite )
	{
		if ( !m_CachePluginDLL.IsEmpty() )
		{
			m_Cache = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 141 ) CachePlugin( m_CachePluginDLL );
		}
		else 
		{
			m_Cache = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 145 ) Cache();
		}

		if ( m_Cache->Init( m_CachePath ) == false )
		{
			m_Options.m_UseCacheRead = false;
			m_Options.m_UseCacheWrite = false;
		}
	}

	
	
	if ( m_Options.m_AllowDistributed )
	{
		Array< AString > workers;
		if ( m_WorkerList.IsEmpty() )
		{
			
			
			m_WorkerBrokerage.FindWorkers( workers );
		}
		else
		{
			workers = m_WorkerList;
		}

		if ( workers.IsEmpty() )
		{
			do { FLog::Warning( "No workers available - Distributed compilation disabled"  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			m_Options.m_AllowDistributed = false;
		}
		else
		{
			Tracing::OutputFormat( "Distributed Compilation : %u Workers in pool\n", workers.GetSize() );
			m_Client = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 179 ) Client( workers );
		}
	}

	return true;
}



bool FBuild::Build( const AString & target )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !target.IsEmpty() ) ) { if ( AssertHandler::Failure( "!target.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 190 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	Array< AString > targets( 1, false );
	targets.Append( target );
	return Build( targets );
}



bool FBuild::Build( const Array< AString > & targets )
{
	ProfileHelper ph201(  __FUNCTION__   );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !targets.IsEmpty() ) ) { if ( AssertHandler::Failure( "!targets.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 203 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	const size_t numTargets = targets.GetSize();
	Dependencies nodes( numTargets, 0 );
	for ( size_t i=0; i<numTargets; ++i )
	{
		const AString & target = targets[ i ];

		
		Node * node = m_DependencyGraph->FindNodeInternal( target );
		if ( node == nullptr )
		{
			
			node = m_DependencyGraph->FindNode( target );
		}

		if ( node == nullptr )
		{
			do { FLog::Error( "Unknown build target '%s'",target.Get() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
			return false;
		}
		nodes.Append( Dependency( node ) );
	}

	
	NodeProxy proxy( AStackString< 32 >( "*proxy*" ) );
	proxy.m_StaticDependencies = nodes;

	
	bool result = Build( &proxy );

	
	for ( size_t i=0; i<targets.GetSize(); ++i )
	{
		bool nodeResult = ( nodes[ i ].GetNode()->GetState() == Node::UP_TO_DATE );
		Tracing::OutputFormat( "FBuild: %s: %s\n", nodeResult ? "OK" : "Error: BUILD FAILED", targets[ i ].Get() );
	}

	return result;
}



bool FBuild::SaveDependencyGraph( const char * nodeGraphDBFile ) const
{
	nodeGraphDBFile = nodeGraphDBFile ? nodeGraphDBFile : GetDependencyGraphFileName();

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Saving DepGraph '%s'",nodeGraphDBFile ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));

	Timer t;

	
	MemoryStream memoryStream( 32 * 1024 * 1024, 8 * 1024 * 1024 );
	m_DependencyGraph->Save( memoryStream );

	
	AStackString<> tmpFileName( nodeGraphDBFile );
	tmpFileName += ".tmp";

	
	FileStream fileStream;
	if ( fileStream.Open( tmpFileName.Get(), FileStream::WRITE_ONLY ) == false )
	{
		
		do { FLog::Error( "Failed to open DepGraph for saving '%s'",nodeGraphDBFile ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	
	if ( fileStream.Write( memoryStream.GetData(), memoryStream.GetSize() ) != memoryStream.GetSize() )
	{
		do { FLog::Error( "Saving DepGraph FAILED!"  ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}
	fileStream.Close();

	
	if ( FileIO::FileMove( tmpFileName, AStackString<>( nodeGraphDBFile ) ) == false )
	{
		do { FLog::Error( "Failed to rename temp DB file '%s' (%i)",tmpFileName.Get(), Env::GetLastErr() ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		return false;
	}

	do { if ( FLog::ShowInfo() ) { FLog::Info( "Saving DepGraph Complete in %2.3fs",t.GetElapsed() ); } __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
	return true;
}



bool FBuild::Build( Node * nodeToBuild )
{
	ProfileHelper ph295(  __FUNCTION__   );

	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( nodeToBuild ) ) { if ( AssertHandler::Failure( "nodeToBuild", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 297 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	s_StopBuild = false; 

	
	m_JobQueue = new ( "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 302 ) JobQueue( m_Options.m_NumWorkerThreads );

	m_Timer.Start();
	m_LastProgressOutputTime = 0.0f;
	m_LastProgressCalcTime = 0.0f;
	m_SmoothedProgressCurrent = 0.0f;
	m_SmoothedProgressTarget = 0.0f;
	FLog::StartBuild();

	
	if ( m_Options.m_NumWorkerThreads == 0 )
	{
		WorkerThread::CreateThreadLocalTmpDir();
	}

	bool stopping( false );

	
	for ( ;; )
	{
		bool complete = ( nodeToBuild->GetState() == Node::UP_TO_DATE ) ||
						( nodeToBuild->GetState() == Node::FAILED );

		if ( s_StopBuild || complete )
		{
			if ( stopping == false ) 
			{
				
				delete m_Client;
				m_Client = nullptr;

				
				
				
				m_JobQueue->SignalStopWorkers();
				stopping = true;
			}
		}

		if ( !stopping )
		{
			if ( m_Options.m_WrapperChild )
			{
                SystemMutex wrapperMutex( m_Options.GetMainProcessMutexName().Get() );
				if ( wrapperMutex.TryLock() )
				{
					
					s_StopBuild = true;
				}
			}
		}

		if ( !stopping )
		{
			
			m_DependencyGraph->DoBuildPass( nodeToBuild );
		}

		if ( m_Options.m_NumWorkerThreads == 0 )
		{
			
			WorkerThread::Update();
		}

		
		m_JobQueue->FinalizeCompletedJobs();

		
		if ( stopping && m_JobQueue->HaveWorkersStopped() )
		{
			break;
		}

		Thread::Sleep( 16 );

		
		UpdateBuildStatus( nodeToBuild, false );

		ProfileManager::Synchronize();
	}

	delete m_JobQueue;
	m_JobQueue = nullptr;

	
	UpdateBuildStatus( nodeToBuild, true );

	FLog::StopBuild();

	
	
	
	
	if ( m_Options.m_SaveDBOnCompletion )
	{
		SaveDependencyGraph();
	}

	
	float timeTaken = m_Timer.GetElapsed();
	m_BuildStats.m_TotalBuildTime = timeTaken;

	m_BuildStats.OnBuildStop( nodeToBuild );

	bool buildOK = ( nodeToBuild->GetState() == Node::UP_TO_DATE );

	
	if ( m_Options.m_ShowBuildTime )
	{
		uint32_t minutes = uint32_t( timeTaken / 60.0f );
		timeTaken -= ( minutes * 60.0f );
		float seconds = timeTaken;
		if ( minutes > 0 )
		{
			do { FLog::Build( "Time: %um %05.3fs\n",minutes, seconds ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		}
		else
		{
			do { FLog::Build( "Time: %05.3fs\n",seconds ); __pragma(warning(push)) __pragma(warning(disable:4127)) } while ( false ); __pragma(warning(pop));
		}
	}

	return buildOK;
}



void FBuild::SetEnvironmentString( const char * envString, uint32_t size, const AString & libEnvVar )
{
	::Free( m_EnvironmentString );
	m_EnvironmentString = (char *)::AllocFileLine( size + 1, "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuild.cpp", 432 );
	m_EnvironmentStringSize = size;
	AString::Copy( envString, m_EnvironmentString, size );
	m_LibEnvVar = libEnvVar;
}



void FBuild::GetLibEnvVar( AString & value ) const
{
	
	if ( m_EnvironmentString )
	{
		
		value = m_LibEnvVar;
	}
	else
	{
		
		Env::GetEnvVariable( "LIB", value );
	}
}



 void FBuild::OnBuildError()
{
	if ( FBuild::Get().GetOptions().m_StopOnFirstError )
	{
		s_StopBuild = true;
	}
}



void FBuild::UpdateBuildStatus( const Node * node, bool forceUpdate )
{
	ProfileHelper ph469(  __FUNCTION__   );

	if ( FBuild::Get().GetOptions().m_ShowProgress == false ) 
	{
		return;
	}

	const float OUTPUT_FREQUENCY( 1.0f );
	const float CALC_FREQUENCY( 5.0f );

	float timeNow = m_Timer.GetElapsed();

	bool doUpdate = ( ( timeNow - m_LastProgressOutputTime ) >= OUTPUT_FREQUENCY );	
	doUpdate |= forceUpdate;

	if ( doUpdate == false )
	{
		return;
	}

	
	if ( ( timeNow - m_LastProgressCalcTime ) >= CALC_FREQUENCY )
	{
		FBuildStats & bs = m_BuildStats;
		bs.m_NodeTimeProgressms = 0;
		bs.m_NodeTimeTotalms = 0;
		m_DependencyGraph->UpdateBuildStatus( node, bs.m_NodeTimeProgressms, bs.m_NodeTimeTotalms );
		m_LastProgressCalcTime = m_Timer.GetElapsed();

		
		float doneRatio = (float)( (double)bs.m_NodeTimeProgressms / (double)bs.m_NodeTimeTotalms );

		
		float donePerc = Math::Min< float >( doneRatio * 100.0f, 99.9f );

		
		m_SmoothedProgressTarget = Math::Max< float >( donePerc, m_SmoothedProgressTarget );
	}

	m_SmoothedProgressCurrent = ( 0.5f * m_SmoothedProgressCurrent ) + ( m_SmoothedProgressTarget * 0.5f );

	
	uint32_t numJobs = 0;
	uint32_t numJobsActive = 0;
	uint32_t numJobsDist = 0;
	uint32_t numJobsDistActive = 0;
	if ( JobQueue::IsValid() )
	{
		JobQueue::Get().GetJobStats( numJobs, numJobsActive, numJobsDist, numJobsDistActive );
	}

	FLog::OutputProgress( timeNow, m_SmoothedProgressCurrent, numJobs, numJobsActive, numJobsDist, numJobsDistActive );
	m_LastProgressOutputTime = timeNow;
}



 const char * FBuild::GetDependencyGraphFileName()
{
	return "fbuild.fdb";
}



 const char * FBuild::GetDefaultBFFFileName()
{
	return "fbuild.bff";
}



void FBuild::SetCachePath( const AString & path )
{ 
	m_CachePath = path;
}



void FBuild::GetCacheFileName( uint64_t keyA, uint32_t keyB, uint64_t keyC, AString & path ) const
{
	
	static const int cacheVersion( 5 );

	
	path.Format( "%016llX_%08X_%016llX.%u", keyA, keyB, keyC, cacheVersion );
}


#line 199 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/FBuildOptions.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"











    
#line 20 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"



FBuildOptions::FBuildOptions()
: m_ForceCleanBuild( false )
, m_UseCacheRead( false )
, m_UseCacheWrite( false )
, m_ShowInfo( false )
, m_ShowCommandLines( false )
, m_ShowErrors( true )
, m_ShowProgress( false )
, m_AllowDistributed( false )
, m_ShowSummary( false )
, m_ShowBuildTime( true )
, m_SaveDBOnCompletion( false )
, m_GenerateReport( false )
, m_NoLocalConsumptionOfRemoteJobs( false )
, m_AllowLocalRace( true )
, m_WrapperChild( false )
, m_FixupErrorPaths( false )
, m_StopOnFirstError( true )
, m_WorkingDirHash( 0 )
{

	
#line 46 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"

	
	m_NumWorkerThreads = Env::GetNumProcessors();

	
    AStackString<> workingDir;
    do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( FileIO::GetCurrentDir( workingDir ) ) ) { if ( AssertHandler::Failure( "FileIO::GetCurrentDir( workingDir )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp", 52 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
    SetWorkingDir( workingDir );
}



void FBuildOptions::SetWorkingDir( const AString & path )
{
    do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( !path.IsEmpty() ) ) { if ( AssertHandler::Failure( "!path.IsEmpty()", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp", 60 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));
	m_WorkingDir = path;

	
	PathUtils::FixupFolderPath( m_WorkingDir );
        
    
    if ( m_WorkingDir.EndsWith( ( '\\' ) ) )
    {
        m_WorkingDir.SetLength( m_WorkingDir.GetLength() - 1 );
    }

	
		
		
		if ( ( m_WorkingDir.GetLength() >= 2 ) &&
			 ( m_WorkingDir[ 1 ] == ':' ) &&
			 ( m_WorkingDir[ 0 ] >= 'a' ) &&
			 ( m_WorkingDir[ 0 ] <= 'z' ) )
		{
			m_WorkingDir[ 0 ] = ( 'A' + ( m_WorkingDir[ 0 ] - 'a' ) );
		}
	#line 83 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"

    
    
        
            
            
            
            AStackString<> canonicalPath;
            if ( ( m_WorkingDir.GetLength() >= 2 ) &&
                 ( m_WorkingDir[ 1 ] == ':' ) &&
                 ( m_WorkingDir[ 0 ] >= 'A' ) &&
                 ( m_WorkingDir[ 0 ] <= 'Z' ) )
            {
                
                AStackString<> driveLetter( m_WorkingDir.Get(), m_WorkingDir.Get() + 2 );

                
                char actualPath[ 260 ];
                actualPath[ 0 ] = '\000';
                do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( QueryDosDeviceA( driveLetter.Get(), actualPath, 260 ) ) ) { if ( AssertHandler::Failure( "QueryDosDeviceA( driveLetter.Get(), actualPath, 260 )", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp", 102 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

                
                if ( AString::StrNCmp( actualPath, "\\??\\", 4 ) == 0 )
                {
                    
                    
                    canonicalPath = &actualPath[ 4 ];
                    canonicalPath += ( m_WorkingDir.Get() + 2 ); 
                }
                else
                {
                    
                    canonicalPath = m_WorkingDir;
                }
            }
            else
            {
                
                canonicalPath = m_WorkingDir;
            }
        

#line 126 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"

        
        canonicalPath.ToLower();
    


#line 133 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FBuildOptions.cpp"

    m_WorkingDirHash = Murmur3::Calc32( canonicalPath );
    m_ProcessMutexName.Format( "Global\\FASTBuild-0x%08x", m_WorkingDirHash );
    m_FinalProcessMutexName.Format( "Global\\FASTBuild_Final-0x%08x", m_WorkingDirHash );
    m_SharedMemoryName.Format( "FASTBuildSharedMemory_%08x", m_WorkingDirHash );
}


#line 202 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"

#pragma message( "C:/Users/Franta/p4/Code/Tools/FBuild/FBuildCore/FLog.cpp" )
#line 1 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"





#line 1 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"













	
#line 16 "c:\\Users\\Franta\\p4\\Code\\Tools/FBuild/FBuildCore/PrecompiledHeader.h"


#line 7 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"











#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"















#pragma once




#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"














#pragma once

#line 1 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"















#line 34 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"









































#line 76 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"






#line 83 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"
#line 84 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"




#line 89 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"
#line 90 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"


#line 93 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\limits.h"
#line 23 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"





#pragma pack(push,8)


extern "C" {
#line 33 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"



















typedef int (__cdecl * _onexit_t)(void);



#line 57 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"



#line 61 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"




#line 66 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"


#line 69 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;


#line 92 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 121 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 151 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
































































typedef void (__cdecl *_purecall_handler)(void);


 _purecall_handler __cdecl _set_purecall_handler(  _purecall_handler _Handler);
 _purecall_handler __cdecl _get_purecall_handler(void);
#line 221 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"


extern "C++"
{




#line 230 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
}
#line 232 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


 _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(  _invalid_parameter_handler _Handler);
 _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 241 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"




 extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(  int _Value);
errno_t __cdecl _get_errno(  int * _Value);
#line 251 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

 unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(  unsigned long _Value);
errno_t __cdecl _get_doserrno(  unsigned long * _Value);


  char ** __cdecl __sys_errlist(void);


  int * __cdecl __sys_nerr(void);




















#line 284 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"




 extern int __argc;          
 extern char ** __argv;      
 extern wchar_t ** __wargv;  







#line 299 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#line 301 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"





 extern char ** _environ;    
 extern wchar_t ** _wenviron;    

#line 310 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  extern char * _pgmptr;      
  extern wchar_t * _wpgmptr;  
























#line 338 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);



#line 345 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  extern int _fmode;          



#line 351 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
#line 352 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

 errno_t __cdecl _set_fmode(  int _Mode);
 errno_t __cdecl _get_fmode(  int * _PMode);





#line 361 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 368 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
#line 369 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"







 __declspec(noreturn) void __cdecl exit(  int _Code);

 __declspec(noreturn) void __cdecl _exit(  int _Code);
 __declspec(noreturn) void __cdecl abort(void);
#line 381 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

 unsigned int __cdecl _set_abort_behavior(  unsigned int _Flags,   unsigned int _Mask);

int       __cdecl abs(  int _X);
long      __cdecl labs(  long _X);
long long __cdecl llabs(  long long _X);

        __int64    __cdecl _abs64(__int64);




















#line 410 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"















#line 426 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 428 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
   double  __cdecl atof(  const char *_String);
   double  __cdecl _atof_l(  const char *_String,   _locale_t _Locale);
    int    __cdecl atoi(  const char *_Str);
   int    __cdecl _atoi_l(  const char *_Str,   _locale_t _Locale);
   long   __cdecl atol(  const char *_Str);
   long   __cdecl _atol_l(  const char *_Str,   _locale_t _Locale);
   long long __cdecl atoll(  const char *_Str);
   long long __cdecl _atoll_l(  const char *_Str,   _locale_t _Locale);



   void * __cdecl bsearch_s(  const void * _Key,   const void * _Base,
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 443 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
   void * __cdecl bsearch(  const void * _Key,   const void * _Base,
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));


 void __cdecl qsort_s(  void * _Base,
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 452 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
 void __cdecl qsort(  void * _Base,
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 456 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
          unsigned short __cdecl _byteswap_ushort(  unsigned short _Short);
          unsigned long  __cdecl _byteswap_ulong (  unsigned long _Long);
          unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Int64);
   div_t  __cdecl div(  int _Numerator,   int _Denominator);


    char * __cdecl getenv(  const char * _VarName);

  errno_t __cdecl getenv_s(  size_t * _ReturnSize,   char * _DstBuf,   rsize_t _DstSize,   const char * _VarName);
#line 466 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t * _ReturnSize, char (&_Dest)[_Size],   const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }



#line 471 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _dupenv_s(  char **_PBuffer,   size_t * _PBufferSizeInBytes,   const char * _VarName);



#line 477 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
#line 478 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _itoa_s(  int _Value,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(  int _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _itoa( int _Value,   char *_Dest,  int _Radix);
  errno_t __cdecl _i64toa_s(  __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
  char * __cdecl _i64toa(  __int64 _Val,     char * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64toa_s(  unsigned __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
  char * __cdecl _ui64toa(  unsigned __int64 _Val,     char * _DstBuf,   int _Radix);
   __int64 __cdecl _atoi64(  const char * _String);
   __int64 __cdecl _atoi64_l(  const char * _String,   _locale_t _Locale);
   __int64 __cdecl _strtoi64(  const char * _String,     char ** _EndPtr,   int _Radix);
   __int64 __cdecl _strtoi64_l(  const char * _String,     char ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64 __cdecl _strtoui64(  const char * _String,     char ** _EndPtr,   int _Radix);
   unsigned __int64 __cdecl _strtoui64_l(  const char * _String,     char ** _EndPtr,   int  _Radix,   _locale_t _Locale);
   ldiv_t __cdecl ldiv(  long _Numerator,   long _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

extern "C++"
{
    inline long abs(long _X) throw()
    {
        return labs(_X);
    }
    inline long long abs(long long _X) throw()
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2) throw()
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 515 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
  errno_t __cdecl _ltoa_s(  long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _ltoa( long _Value,   char *_Dest,  int _Radix);
   int    __cdecl mblen(    const char * _Ch,   size_t _MaxCount);
   int    __cdecl _mblen_l(    const char * _Ch,   size_t _MaxCount,   _locale_t _Locale);
   size_t __cdecl _mbstrlen(  const char * _Str);
   size_t __cdecl _mbstrlen_l(  const char *_Str,   _locale_t _Locale);
   size_t __cdecl _mbstrnlen(  const char *_Str,   size_t _MaxCount);
   size_t __cdecl _mbstrnlen_l(  const char *_Str,   size_t _MaxCount,   _locale_t _Locale);
 int    __cdecl mbtowc(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes);
 int    __cdecl _mbtowc_l(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes,   _locale_t _Locale);
  errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
  size_t __cdecl mbstowcs( wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

  errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   const char * _Source,   size_t _MaxCount,   _locale_t _Locale);

   int    __cdecl rand(void);


#line 538 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  int    __cdecl _set_error_mode(  int _Mode);

 void   __cdecl srand(  unsigned int _Seed);
   double __cdecl strtod(  const char * _Str,     char ** _EndPtr);
   double __cdecl _strtod_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);
   long   __cdecl strtol(  const char * _Str,     char ** _EndPtr,   int _Radix );
   long   __cdecl _strtol_l(  const char *_Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);
   long long  __cdecl strtoll(  const char * _Str,     char ** _EndPtr,   int _Radix );
   long long  __cdecl _strtoll_l(  const char * _Str,     char ** _EndPtr,   int _Radix,   _locale_t _Locale );
   unsigned long __cdecl strtoul(  const char * _Str,     char ** _EndPtr,   int _Radix);
   unsigned long __cdecl _strtoul_l(const char * _Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned long long __cdecl strtoull(  const char * _Str,     char ** _EndPtr,   int _Radix);
   unsigned long long __cdecl _strtoull_l(  const char * _Str,     char ** _EndPtr,   int _Radix,   _locale_t _Locale);
   long double __cdecl strtold(  const char * _Str,     char ** _EndPtr);
   long double __cdecl _strtold_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);
   float __cdecl strtof(  const char * _Str,     char ** _EndPtr);
   float __cdecl _strtof_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);




 int __cdecl system(  const char * _Command);
#line 562 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
#line 563 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _ultoa_s(  unsigned long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _ultoa( unsigned long _Value,   char *_Dest,  int _Radix);
  int    __cdecl wctomb(  char * _MbCh,   wchar_t _WCh);
  int    __cdecl _wctomb_l(    char * _MbCh,   wchar_t _WCh,   _locale_t _Locale);

  errno_t __cdecl wctomb_s(  int * _SizeConverted,   char * _MbCh,   rsize_t _SizeInBytes,   wchar_t _WCh);
#line 572 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
  errno_t __cdecl _wctomb_s_l(  int * _SizeConverted,   char * _MbCh,   size_t _SizeInBytes,   wchar_t _WCh,   _locale_t _Locale);
  errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
  size_t __cdecl wcstombs( char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
  errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
  size_t __cdecl _wcstombs_l(  char *_Dest,   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale);

























#line 605 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"


































#line 640 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
        __declspec(noalias) __declspec(restrict)    void * __cdecl calloc(   size_t _Count,    size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl free(    void * _Memory);
        __declspec(noalias) __declspec(restrict)                              void * __cdecl malloc(   size_t _Size);
 
       __declspec(noalias) __declspec(restrict)                           void * __cdecl realloc(    void * _Memory,    size_t _NewSize);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _recalloc(    void * _Memory,    size_t _Count,    size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl _aligned_free(    void * _Memory);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_malloc(   size_t _Size,   size_t _Alignment);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_malloc(   size_t _Size,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_realloc(    void * _Memory,    size_t _NewSize,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_recalloc(    void * _Memory,    size_t _Count,    size_t _Size,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_realloc(    void * _Memory,    size_t _NewSize,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_offset_recalloc(    void * _Memory,    size_t _Count,    size_t _Size,   size_t _Alignment,   size_t _Offset);
                                                    size_t __cdecl _aligned_msize(  void * _Memory,   size_t _Alignment,   size_t _Offset);


















#line 678 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#line 680 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"





  errno_t __cdecl _itow_s (  int _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _itow( int _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ltow_s (  long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _ltow( long _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ultow_s (  unsigned long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _ultow( unsigned long _Value,   wchar_t *_Dest,  int _Radix);
   double __cdecl wcstod(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   double __cdecl _wcstod_l(  const wchar_t *_Str,     wchar_t ** _EndPtr,   _locale_t _Locale);
   long   __cdecl wcstol(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   long   __cdecl _wcstol_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   long long  __cdecl wcstoll(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix);
   long long  __cdecl _wcstoll_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   unsigned long __cdecl wcstoul(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   unsigned long __cdecl _wcstoul_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   unsigned long long __cdecl wcstoull(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   unsigned long long __cdecl _wcstoull_l(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix,   _locale_t _Locale);
   long double __cdecl wcstold(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   long double __cdecl _wcstold_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   _locale_t _Locale);
   float __cdecl wcstof(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   float __cdecl _wcstof_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   _locale_t _Locale);



    wchar_t * __cdecl _wgetenv(  const wchar_t * _VarName);
  errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,   wchar_t * _DstBuf,   size_t _DstSizeInWords,   const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize, wchar_t (&_Dest)[_Size],   const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }




#line 719 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _wdupenv_s(  wchar_t **_Buffer,   size_t *_BufferSizeInWords,   const wchar_t *_VarName);



#line 725 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"



 int __cdecl _wsystem(  const wchar_t * _Command);
#line 730 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#line 732 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

   double __cdecl _wtof(  const wchar_t *_Str);
   double __cdecl _wtof_l(  const wchar_t *_Str,   _locale_t _Locale);
   int __cdecl _wtoi(  const wchar_t *_Str);
   int __cdecl _wtoi_l(  const wchar_t *_Str,   _locale_t _Locale);
   long __cdecl _wtol(  const wchar_t *_Str);
   long __cdecl _wtol_l(  const wchar_t *_Str,   _locale_t _Locale);
   long long __cdecl _wtoll(  const wchar_t *_Str);
   long long __cdecl _wtoll_l(  const wchar_t *_Str,   _locale_t _Locale);

  errno_t __cdecl _i64tow_s(  __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
  wchar_t * __cdecl _i64tow(  __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64tow_s(  unsigned __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
  wchar_t * __cdecl _ui64tow(  unsigned __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
   __int64   __cdecl _wtoi64(  const wchar_t *_Str);
   __int64   __cdecl _wtoi64_l(  const wchar_t *_Str,   _locale_t _Locale);
   __int64   __cdecl _wcstoi64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   __int64   __cdecl _wcstoi64_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64  __cdecl _wcstoui64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   unsigned __int64  __cdecl _wcstoui64_l(  const wchar_t *_Str ,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);


#line 755 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"













#line 769 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

   char * __cdecl _fullpath(  char * _FullPath,   const char * _Path,   size_t _SizeInBytes);





#line 777 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _ecvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDights,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
    char * __cdecl _ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  errno_t __cdecl _fcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
    char * __cdecl _fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
 errno_t __cdecl _gcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
  char * __cdecl _gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);

   int __cdecl _atodbl(  _CRT_DOUBLE * _Result,   char * _Str);
   int __cdecl _atoldbl(  _LDOUBLE * _Result,   char * _Str);
   int __cdecl _atoflt(  _CRT_FLOAT * _Result,   const char * _Str);
   int __cdecl _atodbl_l(  _CRT_DOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoldbl_l(  _LDOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoflt_l(  _CRT_FLOAT * _Result,   const char * _Str,   _locale_t _Locale);
          unsigned long __cdecl _lrotl(  unsigned long _Val,   int _Shift);
          unsigned long __cdecl _lrotr(  unsigned long _Val,   int _Shift);
  errno_t   __cdecl _makepath_s(  char * _PathResult,   size_t _SizeInWords,   const char * _Drive,   const char * _Dir,   const char * _Filename,
          const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size],   const char * _Drive,   const char * _Dir,   const char * _Filename,   const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
  void __cdecl _makepath(  char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 813 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"












#line 826 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"
        _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 828 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"






#pragma warning (push)
#pragma warning (disable:6540) 


   int    __cdecl _putenv(  const char * _EnvString);
  errno_t __cdecl _putenv_s(  const char * _Name,   const char * _Value);
#line 841 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

        unsigned int __cdecl _rotl(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Val,   int _Shift);
        unsigned int __cdecl _rotr(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Val,   int _Shift);
#pragma warning (pop)


 errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar,   char * _ResultPath,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
  void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,   char *_ResultPath);
#line 853 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  void   __cdecl _splitpath(  const char * _FullPath,     char * _Drive,     char * _Dir,     char * _Filename,     char * _Ext);
  errno_t  __cdecl _splitpath_s(  const char * _FullPath,
                  char * _Drive,   size_t _DriveSize,
                  char * _Dir,   size_t _DirSize,
                  char * _Filename,   size_t _FilenameSize,
                  char * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(  const char *_Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

 void   __cdecl _swab(    char * _Buf1,     char * _Buf2, int _SizeInBytes);








#line 872 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

   wchar_t * __cdecl _wfullpath(  wchar_t * _FullPath,   const wchar_t * _Path,   size_t _SizeInWords);



#line 878 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  errno_t __cdecl _wmakepath_s(  wchar_t * _PathResult,   size_t _SIZE,   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,
          const wchar_t * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size],   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,   const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
  void __cdecl _wmakepath(  wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);






   int    __cdecl _wputenv(  const wchar_t * _EnvString);
  errno_t __cdecl _wputenv_s(  const wchar_t * _Name,   const wchar_t * _Value);
 errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar,   wchar_t * _ResultPath,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
  void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,   wchar_t *_ResultPath);
#line 895 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

  void   __cdecl _wsplitpath(  const wchar_t * _FullPath,     wchar_t * _Drive,     wchar_t * _Dir,     wchar_t * _Filename,     wchar_t * _Ext);
 errno_t __cdecl _wsplitpath_s(  const wchar_t * _FullPath,
                  wchar_t * _Drive,   size_t _DriveSize,
                  wchar_t * _Dir,   size_t _DirSize,
                  wchar_t * _Filename,   size_t _FilenameSize,
                  wchar_t * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(  const wchar_t *_Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }


#line 906 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))  void __cdecl _seterrormode(  int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))  void __cdecl _beep(  unsigned _Frequency,   unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))  void __cdecl _sleep(  unsigned long _Duration);
#line 913 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

















#line 931 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 4141) 
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details."))   char * __cdecl ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details."))   char * __cdecl fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details."))            char * __cdecl gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details."))            char * __cdecl itoa(  int _Val,     char * _DstBuf,   int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details."))            char * __cdecl ltoa(  long _Val,     char * _DstBuf,   int _Radix);


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details."))  int    __cdecl putenv(  const char * _EnvString);
#line 943 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details."))                                                                            void   __cdecl swab(  char * _Buf1,  char * _Buf2,   int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details."))          char * __cdecl ultoa(  unsigned long _Val,     char * _Dstbuf,   int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(  _onexit_t _Func);


#line 951 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"


}

#line 956 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#pragma pack(pop)

#line 960 "c:\\Users\\Franta\\p4\\External\\SDK\\VS13.4\\VC\\include\\stdlib.h"

#line 19 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"

	
#line 22 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"








#line 31 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"



 bool FLog::s_ShowInfo = false;
 bool FLog::s_ShowErrors = true;
 bool FLog::s_ShowProgress = false;
 AStackString< 64 > FLog::m_ProgressText;
static AStackString< 72 > g_ClearLineString( "\r                                                               \r" );
static AStackString< 64 > g_OutputString( "\r99.9 % [....................] " );


 void FLog::Info( const char * formatString, ... )
{
	AStackString< 8192 > buffer;

	va_list args;
	( __va_start(&args, formatString) );
	buffer.VFormat( formatString, args );
	( args = (va_list)0 );

	Output( "Info:", buffer.Get() );
}



 void FLog::Build( const char * formatString, ... )
{
	AStackString< 8192 > buffer;

	va_list args;
	( __va_start(&args, formatString) );
	buffer.VFormat( formatString, args );
	( args = (va_list)0 );

	Output( nullptr, buffer.Get() );
}



 void FLog::Warning( const char * formatString, ... )
{
	AStackString< 8192 > buffer;

	va_list args;
	( __va_start(&args, formatString) );
	buffer.VFormat( formatString, args );
	( args = (va_list)0 );

	Output( "Warning:", buffer.Get() );
}



 void FLog::Error( const char * formatString, ... )
{
	
	
	
	if ( FLog::ShowErrors() == false )
	{
		return;
	}

	AStackString< 8192 > buffer;

	va_list args;
	( __va_start(&args, formatString) );
	buffer.VFormat( formatString, args );
	( args = (va_list)0 );

	Output( "Error:", buffer.Get() );
}



 void FLog::ErrorDirect( const char * message )
{
	if ( FLog::ShowErrors() == false )
	{
		return;
	}

	Tracing::Output( message );
}



 void FLog::Output( const char * type, const char * message )
{
	if( type == nullptr )
	{
		Tracing::OutputFormat( "%s", message );
		return;
	}

	AStackString< 1024 > buffer( message );
	if ( buffer.IsEmpty() )
	{
		return;
	}
	if ( buffer[ buffer.GetLength() - 1 ] != '\n' )
	{
		buffer += '\n';
	}

	Tracing::OutputFormat( "%s", buffer.Get() );
}



 void FLog::StartBuild()
{

	{
		Tracing::SetCallbackOutput( &TracingOutputCallback );
	}
}



 void FLog::StopBuild()
{
	if ( s_ShowProgress )
	{
		Tracing::SetCallbackOutput( nullptr );
		fputs( g_ClearLineString.Get(), (&__iob_func()[1]) );
		m_ProgressText.Clear();
	}
}



 void FLog::OutputProgress( float time, 
									  float percentage,
									  uint32_t numJobs, 
									  uint32_t numJobsActive, 
									  uint32_t numJobsDist, 
									  uint32_t numJobsDistActive )
{
	do { __pragma(warning(push)) __pragma(warning(disable:4127)) if ( !( s_ShowProgress ) ) { if ( AssertHandler::Failure( "s_ShowProgress", "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp", 170 ) ) { __debugbreak();; } } } while ( false ); __pragma(warning(pop));

	
	uint32_t intPerc = (uint32_t)( percentage * 10.0f ); 
	uint32_t hundreds = ( intPerc / 100 ); intPerc -= ( hundreds * 100 );
	uint32_t tens = ( intPerc / 10 ); intPerc -= ( tens * 10 );
	uint32_t ones = intPerc;
	m_ProgressText = g_OutputString;
	m_ProgressText[ 1 ] = ( hundreds > 0 ) ? ( '0' + (char)hundreds ) : ' ';
	m_ProgressText[ 2 ] = '0' + (char)tens;
	m_ProgressText[ 4 ] = '0' + (char)ones;

	
	uint32_t numStarsDone = (uint32_t)( percentage * 20.0f / 100.0f ); 
	for ( uint32_t i=0; i<20; ++i ) 
	{
		m_ProgressText[ 9 + i ] = ( i < numStarsDone ) ? '*' : '-';
	}

	
	uint32_t timeTakenMinutes = uint32_t( time / 60.0f );
	uint32_t timeTakenSeconds = (uint32_t)time - ( timeTakenMinutes * 60 );
	if ( timeTakenMinutes > 0 )
	{
		char buffer[ 8 ];
		_itoa_s( timeTakenMinutes, buffer, 8, 10 );
		m_ProgressText += buffer;
		m_ProgressText.Append( "m ", 2 );
	}
	char buffer[ 8 ];
	_itoa_s( timeTakenSeconds, buffer, 8, 10 );
	if ( timeTakenSeconds < 10 ) { m_ProgressText += '0'; }
	m_ProgressText += buffer;
	m_ProgressText += 's';

	
	m_ProgressText.Append( " (", 2 );
	_itoa_s( numJobsActive, buffer, 8, 10 );
	m_ProgressText += buffer;
	m_ProgressText += '/';
	_itoa_s( numJobsActive + numJobs, buffer, 8, 10 );
	m_ProgressText += buffer;
	m_ProgressText += ')';

	
	if ( FBuild::Get().GetOptions().m_AllowDistributed )
	{
		m_ProgressText.Append( "+(", 2 );
		_itoa_s( numJobsDistActive, buffer, 8, 10 );
		m_ProgressText += buffer;
		m_ProgressText += '/';
		_itoa_s( numJobsDistActive + numJobsDist, buffer, 8, 10 );
		m_ProgressText += buffer;
		m_ProgressText += ')';
	}

	m_ProgressText.Append( "    \b\b\b", 7 ); 

	
	if ( FBuild::Get().GetStopBuild() )
	{
		m_ProgressText.Format( "\rBUILD ABORTED - STOPPING (%u) ", numJobsActive );
		m_ProgressText += "                                  \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b";
	}

	
	static int animIndex = 0;
	static char anim[] = { '\\', '|', '/', '-', '\\', '|', '/', '-' };
	m_ProgressText += anim[ ( animIndex++ ) % 8 ]; 

	
	fwrite( m_ProgressText.Get(), 1, m_ProgressText.GetLength(), (&__iob_func()[1]) );
}



 bool FLog::TracingOutputCallback( const char * message )
{
	uint32_t threadIndex = WorkerThread::GetThreadIndex();

	AStackString< 2048 > tmp;

	if ( s_ShowProgress )
	{
		
		tmp += g_ClearLineString;
	}

	
	if ( threadIndex > 0 )
	{
		char buffer[ 8 ];
		_itoa_s( threadIndex, buffer, 8, 10 );
		tmp += buffer;
		tmp += '>';
		if ( threadIndex < 10 )
		{
			tmp += ' '; 
		}
	}

	tmp += message;

	
	
		
			OutputDebugStringA( message );
		#line 278 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"
	#line 279 "C:\\Users\\Franta\\p4\\Code\\Tools\\FBuild\\FBuildCore\\FLog.cpp"

	tmp += m_ProgressText;

	fwrite( tmp.Get(), 1, tmp.GetLength(), (&__iob_func()[1]) );

	return false; 
}


#line 205 "C:\\Users\\Franta\\p4\\tmp\\Unity\\Tools\\FBuild\\FBuildCore\\Unity1.cpp"


