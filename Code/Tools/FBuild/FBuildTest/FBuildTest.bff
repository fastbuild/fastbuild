// FBuildTest
//------------------------------------------------------------------------------
{
    .ProjectName        = 'FBuildTest'
    .ProjectPath        = 'Tools\FBuild\FBuildTest'

    // Unity
    //--------------------------------------------------------------------------
    Unity( '$ProjectName$-Unity' )
    {
        .UnityInputPath             = '$ProjectPath$\'
        .UnityOutputPath            = '$UnityOutputBase$\$ProjectPath$\'

        // Ignore test data (some of which is code)
        .UnityInputExcludePath      = 'Tools\FBuild\FBuildTest\Data\'
    }

    // Executable
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Library
        //--------------------------------------------------------------------------
        ObjectList( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity'

            // Extra Compiler Options
            .CompilerOptions            + .UseExceptions // Test framework uses exceptions

            // Output
            .CompilerOutputPath         = '$OutputBase$/$ProjectName$/'
            .LibrarianOutput            = '$OutputBase$/$ProjectName$/$ProjectName$$LibExtension$'
        }

        // Executable
        //--------------------------------------------------------------------------
        Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
        {
            .Libraries                  = {
                                            'FBuildTest-Lib-$Platform$-$Config$',
                                            'FBuildCore-Lib-$Platform$-$Config$',
                                            'TestFrameWork-Lib-$Platform$-$Config$',
                                            'Core-Lib-$Platform$-$Config$',
                                            'LZ4-Lib-$Platform$-$Config$'
                                          }
            .LinkerOutput               = '$OutputBase$/$ProjectPath$/$ProjectName$$ExeExtension$'
            #if __WINDOWS__
                .LinkerOptions              + ' /SUBSYSTEM:CONSOLE'
                                            + ' kernel32.lib'
                                            + ' Ws2_32.lib'
                                            + ' User32.lib'
                                            + .CRTLibs_Static
            #endif
            #if __LINUX__
                .LinkerOptions              + ' -pthread -ldl -lrt'
            #endif
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }

        // Run Test
        //--------------------------------------------------------------------------
        Test( "$ProjectName$-RunTest-$Platform$-$Config$" )
        {
            .TestExecutable                 = '$ProjectName$-Exe-$Platform$-$Config$'
            .TestOutput                     = "$OutputBase$/$ProjectPath$/TestOutput.txt"
            .TestWorkingDir                 = 'Tools/FBuild/FBuildTest'
            .TestTimeOut                    = 300
        }
    }

    // Aliases
    //--------------------------------------------------------------------------
    #include "../../../gen_default_aliases.bff"

    // Visual Studio Project Generation
    //--------------------------------------------------------------------------
    #if __WINDOWS__
        VCXProject( '$ProjectName$-proj' )
        {
            .ProjectOutput              = '../tmp/VisualStudio/Projects/$ProjectName$.vcxproj'
            .ProjectInputPaths          = '$ProjectPath$\'
            .ProjectBasePath            = '$ProjectPath$\'

            .LocalDebuggerCommand       = '^$(SolutionDir)..\^$(Configuration)\Tools\FBuild\FBuildTest\FBuildTest.exe'
            .LocalDebuggerWorkingDirectory = '^$(SolutionDir)..\..\Code\Tools\FBuild\FBuildTest'

            .ProjectX64Debug        = [ Using( .ProjectX64Debug )           .Target = '$ProjectName$-X64-Debug' ]
            .ProjectX64Profile      = [ Using( .ProjectX64Profile )         .Target = '$ProjectName$-X64-Profile' ]
            .ProjectX64Release      = [ Using( .ProjectX64Release )         .Target = '$ProjectName$-X64-Release' ]
            .ProjectX64ClangDebug   = [ Using( .ProjectX64ClangDebug )      .Target = '$ProjectName$-X64Clang-Debug' ]
            .ProjectX64ClangProfile = [ Using( .ProjectX64ClangProfile )    .Target = '$ProjectName$-X64Clang-Profile' ]
            .ProjectX64ClangRelease = [ Using( .ProjectX64ClangRelease )    .Target = '$ProjectName$-X64Clang-Release' ]
            .ProjectConfigs         = { .ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release,
                                        .ProjectX64ClangDebug, .ProjectX64ClangProfile, .ProjectX64ClangRelease }
        }
    #endif

    // XCode Project Generation
    //--------------------------------------------------------------------------
    #if __OSX__
        XCodeProject( '$ProjectName$-xcodeproj' )
        {
            .ProjectOutput              = '../tmp/XCode/Projects/1_Test/$ProjectName$.xcodeproj/project.pbxproj'
            .ProjectInputPaths          = '$ProjectPath$/'
            .ProjectBasePath            = '$ProjectPath$/'

            .XCodeBuildWorkingDir       = '../../../../Code/'

            .ProjectOSXDebug        = [ .Config = 'Debug'   .Target = '$ProjectName$-x64OSX-Debug' ]
            .ProjectOSXProfile      = [ .Config = 'Profile' .Target = '$ProjectName$-x64OSX-Profile' ]
            .ProjectOSXRelease      = [ .Config = 'Release' .Target = '$ProjectName$-x64OSX-Release' ]
            .ProjectConfigs         = { .ProjectOSXDebug, .ProjectOSXProfile, .ProjectOSXRelease }
        }
   #endif
}
