// FBuildWorker
//------------------------------------------------------------------------------
{
    .ProjectName        = 'FBuildWorker'
    .ProjectPath        = 'Tools/FBuild/FBuildWorker'

    // Executable
    //--------------------------------------------------------------------------
    .ProjectConfigs = {}
    ForEach( .BuildConfig in .BuildConfigs )
    {
        Using( .BuildConfig )
        .OutputBase + '/$Platform$-$BuildConfigName$'

        // Windows Resources
        //--------------------------------------------------------------------------
        #if __WINDOWS__
            ObjectList( '$ProjectName$-Res-$Platform$-$BuildConfigName$' )
            {
                .Compiler                   = 'ResourceCompiler'
                .CompilerOutputExtension    = '.res'
                .CompilerOptions            = '/nologo /fo"%2" "%1"'
                .CompilerInputFiles         = 'Tools/FBuild/FBuildWorker/MainWindowResource.rc'
                .CompilerOutputPath         = '$OutputBase$/$ProjectName$/'
            }
        #endif

        // Unity
        //--------------------------------------------------------------------------
        Unity( '$ProjectName$-Unity-$Platform$-$BuildConfigName$' )
        {
            .UnityInputPath             = '$ProjectPath$/'
            .UnityOutputPath            = '$OutputBase$/$ProjectPath$/'
            .UnityOutputPattern         = '$ProjectName$_Unity*.cpp'
        }

        // Library
        //--------------------------------------------------------------------------
        ObjectList( '$ProjectName$-Lib-$Platform$-$BuildConfigName$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-$Platform$-$BuildConfigName$'

            // Output
            .CompilerOutputPath         = '$OutputBase$/$ProjectPath$/'

            #if __WINDOWS__
                .CompilerOptions        + ' -D"PSAPI_VERSION=1"'
            #endif
        }

        // Windows Manifest
        //--------------------------------------------------------------------------
        #if __WINDOWS__
            .ManifestFile = '$OutputBase$/$ProjectPath$/$ProjectName$$ExeExtension$.manifest.tmp'
            CreateManifest( '$ProjectName$-Manifest-$Platform$-$BuildConfigName$'
                            .ManifestFile )
        #endif

        // Executable
        //--------------------------------------------------------------------------
        Executable( '$ProjectName$-Exe-$Platform$-$BuildConfigName$' )
        {
            .Libraries                  = {
                                            'FBuildWorker-Lib-$Platform$-$BuildConfigName$',
                                            'FBuildCore-Lib-$Platform$-$BuildConfigName$',
                                            'OSUI-Lib-$Platform$-$BuildConfigName$'
                                            'Core-Lib-$Platform$-$BuildConfigName$',
                                            'LZ4-Lib-$Platform$-$BuildConfigName$'
                                            'xxHash-Lib-$Platform$-$BuildConfigName$'
                                            'Zstd-Lib-$Platform$-$BuildConfigName$'
                                          }
                                        #if __WINDOWS__
                                            + 'FBuildWorker-Res-$Platform$-$BuildConfigName$'
                                        #endif
            #if __LINUX__
                .LinkerOutput               = '$OutputBase$/$ProjectPath$/fbuildworker$ExeExtension$' // NOTE: lower case
            #else
                .LinkerOutput               = '$OutputBase$/$ProjectPath$/FBuildWorker$ExeExtension$'
            #endif
            #if __WINDOWS__
                .LinkerOptions              + ' /SUBSYSTEM:WINDOWS'
                                            + ' Advapi32.lib'
                                            + ' Iphlpapi.lib'
                                            + ' kernel32.lib'
                                            + ' Ws2_32.lib'
                                            + ' User32.lib'
                                            + ' Shell32.lib'
                                            + ' Comctl32.lib'
                                            + ' Gdi32.lib'
                                            + ' psapi.lib'
                                            + .CRTLibs_Static

                // Manifest
                .LinkerAssemblyResources    = .ManifestFile
                .LinkerOptions              + ' /MANIFEST:EMBED'
                                            + ' /MANIFESTINPUT:%3'
            #endif
            #if __OSX__
                .LinkerOptions              + ' -framework Cocoa'
            #endif
            #if __LINUX__
                .LinkerOptions              + ' -pthread -ldl -lrt'

                .LinkerStampExe             = '/bin/bash'
                .ExtractDebugInfo           = 'objcopy --only-keep-debug $LinkerOutput$ $LinkerOutput$.debug'
                .StripDebugInfo             = 'objcopy --strip-unneeded $LinkerOutput$'
                .AddDebugLink               = 'objcopy --add-gnu-debuglink $LinkerOutput$.debug $LinkerOutput$'
                .LinkerStampExeArgs         = '-c "$ExtractDebugInfo$ && $StripDebugInfo$ && $AddDebugLink$"'
            #endif
            #if __OSX__
                .LinkerStampExe             = '/bin/bash'
                .ExtractDebugInfo           = 'dsymutil -o $LinkerOutput$.dSYM $LinkerOutput$'
                .StripDebugInfo             = 'strip -x $LinkerOutput$'
                .LinkerStampExeArgs         = '-c "$ExtractDebugInfo$ && $StripDebugInfo$"'
            #endif
        }
        #if __WINDOWS__
            Copy( '$ProjectName$-Copy-$Platform$-$BuildConfigName$' )
            {
                .Source     = .ASanDLLs
                .Dest       = '$OutputBase$/$ProjectPath$/'
            }
        #endif
        Alias( '$ProjectName$-$Platform$-$BuildConfigName$' )
        {
            .Targets    = {
                            #if __WINDOWS__
                                '$ProjectName$-Copy-$Platform$-$BuildConfigName$'
                            #endif
                            '$ProjectName$-Exe-$Platform$-$BuildConfigName$'
                          }
        }
        ^'Targets_$Platform$_$BuildConfigName$' + { '$ProjectName$-$Platform$-$BuildConfigName$' }

        #if __WINDOWS__
            .ProjectConfig              = [ Using( .'Project_$Platform$_$BuildConfigName$' ) .Target = '$ProjectName$-$Platform$-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
        #if __OSX__
            .ProjectConfig              = [ .Config = '$BuildConfigName$'   .Target = '$ProjectName$-x64OSX-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
    }

    // Create Universal binaries
    #if CLANG_SUPPORTS_ARMOSX
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            If( .Platform == 'ARMOSX' )
            {
                CreateUniversalBinary( .ProjectName, .ProjectPath, .BuildConfigName, .OutputBase )
                ^'Targets_OSX_$BuildConfigName$' + { '$ProjectName$-OSX-$BuildConfigName$' }
            }
        }
    #endif

    // Aliases
    //--------------------------------------------------------------------------
    CreateCommonAliases( .ProjectName )

    // Visual Studio Project Generation
    //--------------------------------------------------------------------------
    #if __WINDOWS__
        CreateVCXProject_Exe( .ProjectName, .ProjectPath, .ProjectConfigs )
    #endif

    // XCode Project Generation
    //--------------------------------------------------------------------------
    #if __OSX__
        XCodeProject( '$ProjectName$-xcodeproj' )
        {
            .ProjectOutput              = '../tmp/XCode/Projects/3_Apps/$ProjectName$.xcodeproj/project.pbxproj'
            .ProjectInputPaths          = '$ProjectPath$/'
            .ProjectBasePath            = '$ProjectPath$/'

            .XCodeBuildWorkingDir       = '../../../../Code/'
        }
    #endif
}
