// CoreTest
//------------------------------------------------------------------------------
{
    .ProjectName        = 'CoreTest'
    .ProjectPath        = 'Core\CoreTest'

    // Executable
    //--------------------------------------------------------------------------
    .ProjectConfigs = {}
    ForEach( .BuildConfig in .BuildConfigs )
    {
        Using( .BuildConfig )
        .OutputBase + '\$Platform$-$BuildConfigName$'

        // Unity
        //--------------------------------------------------------------------------
        Unity( '$ProjectName$-Unity-$Platform$-$BuildConfigName$' )
        {
            .UnityInputPath             = '$ProjectPath$/'
            .UnityOutputPath            = '$OutputBase$/$ProjectPath$/'
            .UnityOutputPattern         = '$ProjectName$_Unity*.cpp'
        }

        // Library
        //--------------------------------------------------------------------------
        ObjectList( '$ProjectName$-Lib-$Platform$-$BuildConfigName$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-$Platform$-$BuildConfigName$'

            // Extra Compiler Options
            .CompilerOptions            + .UseExceptions // Test framework uses exceptions

            // Output
            .CompilerOutputPath         = '$OutputBase$/$ProjectPath$/'
        }

        // Executable
        //--------------------------------------------------------------------------
        Executable( '$ProjectName$-Exe-$Platform$-$BuildConfigName$' )
        {
            .Libraries                      = {
                                                'CoreTest-Lib-$Platform$-$BuildConfigName$'
                                                'TestFrameWork-Lib-$Platform$-$BuildConfigName$'
                                                'Core-Lib-$Platform$-$BuildConfigName$'
                                                'LZ4-Lib-$Platform$-$BuildConfigName$'
                                              }
            .LinkerOutput                   = '$OutputBase$/$ProjectPath$/$ProjectName$$ExeExtension$'
            #if __WINDOWS__
                .LinkerOptions                  + ' /SUBSYSTEM:CONSOLE'
                                                + ' Advapi32.lib'
                                                + ' kernel32.lib'
                                                + ' Ws2_32.lib'
                                                + ' User32.lib'
                                                + .CRTLibs_Static
            #endif
            #if __LINUX__
                .LinkerOptions                  + ' -pthread -lrt'
            #endif
        }
        Alias( '$ProjectName$-$Platform$-$BuildConfigName$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$BuildConfigName$' }
        ^'Targets_$Platform$_$BuildConfigName$' + { '$ProjectName$-$Platform$-$BuildConfigName$' }

        // Run Test
        //--------------------------------------------------------------------------
        Test( "$ProjectName$-RunTest-$Platform$-$BuildConfigName$" )
        {
            .TestExecutable                 = '$ProjectName$-Exe-$Platform$-$BuildConfigName$'
            .TestOutput                     = "$OutputBase$/$ProjectPath$/TestOutput.txt"
            .TestTimeOut                    = 300
        }

        #if __WINDOWS__
            .ProjectConfig              = [ Using( .'Project_$Platform$_$BuildConfigName$' ) .Target = '$ProjectName$-$Platform$-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
        #if __OSX__
            .ProjectConfig              = [ .Config = '$BuildConfigName$'   .Target = '$ProjectName$-x64OSX-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
    }

    // Aliases
    //--------------------------------------------------------------------------
    #include "../../gen_default_aliases.bff"

    // Visual Studio Project Generation
    //--------------------------------------------------------------------------
    #if __WINDOWS__
        VCXProject( '$ProjectName$-proj' )
        {
            .ProjectOutput              = '../tmp/VisualStudio/Projects/$ProjectName$.vcxproj'
            .ProjectInputPaths          = '$ProjectPath$\'
            .ProjectBasePath            = '$ProjectPath$\'

            .LocalDebuggerCommand       = '^$(SolutionDir)..\^$(Configuration)\Core\CoreTest\CoreTest.exe'
        }
    #endif

    // XCode Project Generation
    //--------------------------------------------------------------------------
    #if __OSX__
        XCodeProject( '$ProjectName$-xcodeproj' )
        {
            .ProjectOutput              = '../tmp/XCode/Projects/1_Test/$ProjectName$.xcodeproj/project.pbxproj'
            .ProjectInputPaths          = '$ProjectPath$/'
            .ProjectBasePath            = '$ProjectPath$/'

            .XCodeBuildWorkingDir       = '../../../../Code/'
        }
    #endif
}
