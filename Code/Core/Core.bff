// Core
//------------------------------------------------------------------------------
{
    .ProjectName        = 'Core'
    .ProjectPath        = 'Core'
    .PCHName            = 'PrecompiledHeader'

    // Unity
    //--------------------------------------------------------------------------
    {
        // Common options
        .UnityInputPath             = '$ProjectPath$\'
        .UnityOutputPath            = '$OutputBase$\Unity\$ProjectPath$\'
        .UnityInputExcludePath      = '$ProjectPath$\CoreTest\' // Exclude Tests

        // Windows
        Unity( '$ProjectName$-Unity-Windows' )
        {
            .UnityPCH               = '$ProjectPath$\$PCHName$.h'
        }

        // Linux
        Unity( '$ProjectName$-Unity-Linux' )
        {
            // No PCH
        }

        // OSX
        Unity( '$ProjectName$-Unity-OSX' )
        {
            // No PCH
        }
    }

    // Windows (MSVC)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_Windows_MSVC )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Precompiled Header Creation/Use
            .PCHInputFile               = '$ProjectPath$\$PCHName$.cpp'
            .PCHOutputFile              = '$OutputBase$\$ProjectName$\$PCHName$.pch'
            .PCHOptions                 + ' /Yc"$ProjectPath$\$PCHName$.h"'
            .CompilerOptions            + ' /Yu"$ProjectPath$\$PCHName$.h" /Fp"$PCHOutputFile$"'

            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-Windows'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.lib'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }

    // Windows (Clang)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_Windows_Clang )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-Windows'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.lib'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }

    // Linux (GCC)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_Linux_GCC )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-Linux'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.a'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }

    // OSX (Clang)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_OSX_Clang )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-OSX'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.a'
        }
        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }

    // Aliases
    //--------------------------------------------------------------------------
    // Per-Config
    Alias( '$ProjectName$-Debug' )      { .Targets = { '$ProjectName$-X86-Debug',   '$ProjectName$-X64-Debug', '$ProjectName$-X86Clang-Debug' } }
    Alias( '$ProjectName$-Profile' )    { .Targets = { '$ProjectName$-X86-Profile', '$ProjectName$-X64-Profile' } }
    Alias( '$ProjectName$-Release' )    { .Targets = { '$ProjectName$-X86-Release', '$ProjectName$-X64-Release' } }

    // Per-Platform
    Alias( '$ProjectName$-X86' )        { .Targets = { '$ProjectName$-X86-Debug', '$ProjectName$-X86-Release', '$ProjectName$-X86-Profile' } }
    Alias( '$ProjectName$-X64' )        { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }
    Alias( '$ProjectName$-X86Clang' )   { .Targets = { '$ProjectName$-X86Clang-Debug' } }
    Alias( '$ProjectName$-x64Linux' )   { .Targets = { '$ProjectName$-X64Linux-Debug', '$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile' } }
    Alias( '$ProjectName$-x64OSX' )     { .Targets = { '$ProjectName$-X64OSX-Debug', '$ProjectName$-X64OSX-Release', '$ProjectName$-X64OSX-Profile' } }

    // All
    Alias( '$ProjectName$' )
    {
        .Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
    }

    // Visual Studio Project Generation
    //--------------------------------------------------------------------------
    VCXProject( '$ProjectName$-proj' )
    {
        .ProjectOutput              = '../tmp/VisualStudio/Projects/$ProjectName$.vcxproj'
        .ProjectInputPaths          = '$ProjectPath$\'
        .ProjectBasePath            = '$ProjectPath$\'

        // Exclude Tests
        .ProjectInputPathsExclude   = '$ProjectPath$\CoreTest\'

        .ProjectX86Debug        = [ Using( .ProjectX86Debug )           .Target = '$ProjectName$-X86-Debug' ]
        .ProjectX86Profile      = [ Using( .ProjectX86Profile )         .Target = '$ProjectName$-X86-Profile' ]
        .ProjectX86Release      = [ Using( .ProjectX86Release )         .Target = '$ProjectName$-X86-Release' ]
        .ProjectX64Debug        = [ Using( .ProjectX64Debug )           .Target = '$ProjectName$-X64-Debug' ]
        .ProjectX64Profile      = [ Using( .ProjectX64Profile )         .Target = '$ProjectName$-X64-Profile' ]
        .ProjectX64Release      = [ Using( .ProjectX64Release )         .Target = '$ProjectName$-X64-Release' ]
        .ProjectX86ClangDebug   = [ Using( .ProjectX86ClangDebug )      .Target = '$ProjectName$-X86Clang-Debug' ]
        .ProjectX86ClangProfile = [ Using( .ProjectX86ClangProfile )    .Target = '$ProjectName$-X86Clang-Profile' ]
        .ProjectX86ClangRelease = [ Using( .ProjectX86ClangRelease )    .Target = '$ProjectName$-X86Clang-Release' ]
        .ProjectConfigs         = { .ProjectX86Debug, .ProjectX86Profile, .ProjectX86Release,
                                    .ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release,
                                    .ProjectX86ClangDebug, .ProjectX86ClangProfile, .ProjectX86ClangRelease }
    }

    // XCode Project Generation
    //--------------------------------------------------------------------------
    XCodeProject( '$ProjectName$-xcodeproj' )
    {
        .ProjectOutput              = '../tmp/XCode/Projects/2_Libs/$ProjectName$.xcodeproj/project.pbxproj'
        .ProjectInputPaths          = '$ProjectPath$/'
        .ProjectBasePath            = '$ProjectPath$/'

        .XCodeBuildWorkingDir       = '../../../../Code/'

        .ProjectOSXDebug        = [ .Config = 'Debug'   .Target = '$ProjectName$-x64OSX-Debug' ]
        .ProjectOSXProfile      = [ .Config = 'Profile' .Target = '$ProjectName$-x64OSX-Profile' ]
        .ProjectOSXRelease      = [ .Config = 'Release' .Target = '$ProjectName$-x64OSX-Release' ]
        .ProjectConfigs         = { .ProjectOSXDebug, .ProjectOSXProfile, .ProjectOSXRelease }
    }
}
