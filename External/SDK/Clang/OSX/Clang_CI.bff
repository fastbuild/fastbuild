// Apple Clang 12.0.0
//------------------------------------------------------------------------------

#define CLANG_SUPPORTS_ARMOSX

// Compiler
//------------------------------------------------------------------------------
Compiler( 'Compiler-Clang12' )
{
    .Executable                     = 'CLANGXX_BINARY'

    // Allow tests to activate some experimental behavior
    #if ENABLE_RELATIVE_PATHS
        .UseRelativePaths_Experimental = true
    #endif
    #if ENABLE_SOURCE_MAPPING
        .SourceMapping_Experimental = '/fastbuild-test-mapping'
    #endif
}

// ToolChain
//------------------------------------------------------------------------------
.ToolChain_Clang_OSXCommon =
[
    // Compiler Options
    .Compiler                       = 'Compiler-Clang12'
    .CommonCompilerOptions          = ' -o "%2" "%1"'   // Input/Output
                                    + ' -c'             // Compile only
                                    + ' -g'             // Generate debug info
                                    + ' -D__OSX__'      // Platform define
                                    + ' -D__APPLE__'    // Platform define
                                    + ' -mmacosx-version-min=10.7'

                                    // Include paths
                                    + ' -I./'

                                    // Enable warnings
                                    + ' -Wall -Werror -Wfatal-errors'       // warnings as errors
                                    + ' -Wextra'

                                    // Disabled warnings
                                    + ' -Wno-#pragma-messages'
                                    + ' -Wno-invalid-offsetof'      // we get the offset of members in non-POD types
                                    + ' -Wno-implicit-exception-spec-mismatch' // Fires on our new/delete operator (Clang bug?)


    .CompilerOptions                = ' -std=c++17 $CommonCompilerOptions$'
                                    + ' -fno-rtti'      // No RTTI
    .CompilerOptionsC               = ' -x c $CommonCompilerOptions$'
    .PCHOptions                     = ' -x c++-header'
                                    + ' -std=c++17 $CommonCompilerOptions$'
                                    + ' -fno-rtti'      // No RTTI

    // Librarian
    .Librarian                      = '/usr/bin/ar'
    .LibrarianOptions               = 'rcs "%2" "%1"'

    // Linker
    .Linker                         = 'CLANGXX_BINARY'
    .LinkerOptions                  = '"%1" -o "%2" -g'
                                    + ' -Wl,-fatal_warnings'
                                    + ' -Wl,-dead_strip'
                                    + ' -mmacosx-version-min=10.7'

    // File Extensions
    .LibExtension                   = '.a'
    .ExeExtension                   = ''

    // Exception Control
    .UseExceptions                  = ' -fexceptions'
]

.ToolChain_Clang_OSX =
[
    Using( .ToolChain_Clang_OSXCommon )

    // Intel 64-bit
    .Platform                       = 'x64OSX'
    .CompilerOptions                + ' -arch x86_64'
    .CompilerOptionsC               + ' -arch x86_64'
    .LinkerOptions                  + ' -arch x86_64'
]

.ToolChain_Clang_ARMOSX =
[
    Using( .ToolChain_Clang_OSXCommon )

    // Apple ARM Silicon
    .Platform                       = 'ARMOSX'
    .CompilerOptions                + ' -arch arm64'
    .CompilerOptionsC               + ' -arch arm64'
    .LinkerOptions                  + ' -arch arm64'
]

//------------------------------------------------------------------------------
