// Clang 18.x.x
//------------------------------------------------------------------------------
.Clang18_BasePath = '/usr/lib/llvm-18/bin'

// Compiler
//------------------------------------------------------------------------------
Compiler( 'Compiler-Clang18' )
{
    .Root                           = '$Clang18_BasePath$'
    .Executable                     = '$Root$/clang'

    // Allow tests to activate some experimental behavior
    #if ENABLE_RELATIVE_PATHS
        .UseRelativePaths_Experimental = true
    #endif
    #if ENABLE_SOURCE_MAPPING
        .SourceMapping_Experimental = '/fastbuild-test-mapping'
    #endif
}

// ToolChain
//------------------------------------------------------------------------------
.ToolChain_Clang_Linux =
[
    .Platform                       = 'x64ClangLinux'

    // Compiler Options,
    .Compiler                       = 'Compiler-Clang18'
    .CommonCompilerOptions          = ' -o "%2" "%1"'   // Input/Output
                                    + ' -c'             // Compile only
                                    + ' -g'             // Generate debug info
                                    + ' -m64'           // x86_64
                                    + ' -D__LINUX__'    // Platform define

                                    // Include paths
                                    + ' -I./'

                                    // Enable warnings
                                    + ' -Wall -Werror -Wfatal-errors'   // warnings as errors
                                    + ' -Wextra'
                                    + ' -Weverything'

                                    // Warnings that are not useful
                                    + ' -Wno-c++98-compat-pedantic'     // variadic macros are incompatible with C++98
                                    + ' -Wno-disabled-macro-expansion'  // disabled expansion of recursive macro
                                    + ' -Wno-documentation-unknown-command' // unknown command tag name
                                    + ' -Wno-exit-time-destructors'     // declaration requires an exit-time destructor
                                    + ' -Wno-global-constructors'       // declaration requires a global destructor
                                    + ' -Wno-gnu-line-marker'           // this style of line directive is a GNU extension
                                    + ' -Wno-gnu-zero-variadic-macro-arguments' // token pasting of ',' and __VA_ARGS__ is a GNU extension
                                    + ' -Wno-invalid-offsetof'          // we get the offset of members in non-POD types
                                    + ' -Wno-missing-prototypes'        // no previous prototype for function '%s'
                                    + ' -Wno-missing-variable-declarations' // no previous extern declaration for non-static variable '%s'
                                    + ' -Wno-padded'                    // padding size of '%s' with %u bytes to alignment boundary
                                    + ' -Wno-switch-enum'               // Allow the use of "default" labels (we keep -Wswitch to ensure all cases are handled)
                                    + ' -Wno-switch-default'            // Don't require default: when all cases are already handled

                                    // Warnings that need fixing or further investigation
                                    + ' -Wno-atomic-implicit-seq-cst'   // implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary
                                    + ' -Wno-cast-align'                // cast from '%s' to '%s' increases required alignment from 1 to 4
                                    + ' -Wno-cast-qual'                 // cast from 'const %s *' to '%s *' drops const qualifier
                                    + ' -Wno-deprecated-copy-dtor'      // definition of implicit copy constructor for '%s' is deprecated because it has a user-declared destructor
                                    + ' -Wno-missing-noreturn'          // function '%s' could be declared with attribute 'noreturn'
                                    + ' -Wno-old-style-cast'            // use of old-style cast
                                    + ' -Wno-reserved-identifier'       // Fix declaration of _itoa_s
                                    + ' -Wno-shorten-64-to-32'          // implicit conversion loses integer precision: '%s' to '%s'
                                    + ' -Wno-unsafe-buffer-usage'       // unsafe pointer arithmetic
                                    + ' -Wno-weak-vtables'              // '%s has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit

    .CompilerOptions                = ' -std=c++17 $CommonCompilerOptions$'
                                    + ' -fno-rtti'      // No RTTI
                                    + ' -fno-exceptions'
    .CompilerOptionsC               = ' -x c $CommonCompilerOptions$'
    .PCHOptions                     = ' -x c++-header'
                                    + ' -std=c++17 $CommonCompilerOptions$'
                                    + ' -fno-rtti'      // No RTTI
                                    + ' -fno-exceptions'

    // Librarian
    .Librarian                      = '$Clang18_BasePath$/llvm-ar'
    .LibrarianOptions               = 'rcs "%2" "%1"'

    // Linker
    .Linker                         = '$Clang18_BasePath$/clang++'
    .LinkerOptions                  = '"%1" -o "%2"'

    // File Extensions
    .LibExtension                   = '.a'
    .ExeExtension                   = ''

    // Exception Control
    .UseExceptions                  = ' -fexceptions'
]

//------------------------------------------------------------------------------
